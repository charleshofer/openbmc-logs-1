<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0 (Python 2.7.12 on linux2)" generated="20161110 21:49:14.854">
<suite id="s1" source="/tmp/root/24880/obmc-robot/tests" name="Tests">
<suite id="s1-s1" source="/tmp/root/24880/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/root/24880/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>https://${OPENBMC_HOST}/</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:15.250">Creating Session using : alias=openbmc, url=https://9.3.23.30/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:15.249" status="PASS" endtime="20161110 21:49:15.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:15.251">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:15.250" status="PASS" endtime="20161110 21:49:15.251"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:15.251">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:15.251" status="PASS" endtime="20161110 21:49:15.251"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:15.252">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:15.251" status="PASS" endtime="20161110 21:49:15.252"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:15.602">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:15.602">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:15.252" status="PASS" endtime="20161110 21:49:15.602"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/list</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:16.422">Get Request using : alias=openbmc, uri=/list, headers=None </msg>
<msg level="INFO" timestamp="20161110 21:49:16.423">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:15.603" status="PASS" endtime="20161110 21:49:16.423"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:16.424">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:16.423" status="PASS" endtime="20161110 21:49:16.424"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:16.425">To JSON using : content={
  "data": [
    "/org/openbmc/sensors/powercap/min_cap", 
    "/org/openbmc/control", 
    "/org/openbmc/sensors/host/powercap", 
    "/org/openbmc/UserManager/Group", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28", 
    "/org/openbmc/control/power0", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25", 
    "/org/openbmc/settings/host0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event", 
    "/org/openbmc/inventory/system/systemevent", 
    "/org/openbmc/sensors/host/cpu0/OccStatus", 
    "/org/openbmc/sensors/temperature/dimm20", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1", 
    "/org/openbmc/sensors/temperature/dimm21", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
    "/org/openbmc/records/events/280", 
    "/org/openbmc/control/checkstop0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7", 
    "/org/openbmc/sensors/tach/fan0L", 
    "/org/openbmc/inventory/system/chassis/sas_expander", 
    "/org/openbmc/sensors/tach/fan0H", 
    "/org/openbmc/watchdog", 
    "/org/openbmc/inventory/system/misc", 
    "/org/openbmc/UserManager/Users", 
    "/org/openbmc/sensors/temperature/dimm28", 
    "/org/openbmc/sensors/temperature/dimm29", 
    "/org/openbmc/sensors/temperature/dimm24", 
    "/org/openbmc/sensors/temperature/dimm25", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3", 
    "/org/openbmc/sensors/temperature/cpu0/core11", 
    "/org/openbmc/sensors/temperature/cpu0/core10", 
    "/org/openbmc/sensors/powercap/system_power", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10", 
    "/org/openbmc/records/events", 
    "/org/openbmc/sensors/tach/fan1H", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29", 
    "/org/openbmc/sensors/tach/fan1L", 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1", 
    "/org/openbmc/sensors/temperature/dimm16", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4", 
    "/org/openbmc/sensors/speed/fan1", 
    "/org/openbmc/sensors/speed/fan0", 
    "/org/openbmc/sensors/speed/fan3", 
    "/org/openbmc/sensors/speed/fan2", 
    "/org/openbmc/sensors/speed/fan5", 
    "/org/openbmc/sensors/speed/fan4", 
    "/org/openbmc/managers/Download", 
    "/org/openbmc/sensors/HSCA/Vout", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14", 
    "/org/openbmc/control/flash/bmc", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2", 
    "/org/openbmc/sensors/temperature/dimm17", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9", 
    "/org/openbmc/managers/System", 
    "/org/openbmc/sensors/temperature/cpu0/core9", 
    "/org/openbmc/control/led/identify", 
    "/org/openbmc/sensors/temperature/cpu1/core10", 
    "/org/openbmc/sensors/temperature/cpu1/core11", 
    "/org/openbmc/sensors/temperature/cpu0/core1", 
    "/org/openbmc/sensors/temperature/cpu0/core3", 
    "/org/openbmc/sensors/temperature/cpu0/core2", 
    "/org/openbmc/sensors/temperature/cpu0/core5", 
    "/org/openbmc/sensors/temperature/cpu0/core4", 
    "/org/openbmc/sensors/temperature/cpu0/core7", 
    "/org/openbmc/sensors/temperature/cpu0/core6", 
    "/org/openbmc/control/bmc0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6", 
    "/org/openbmc/sensors/temperature/cpu1/core6", 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3", 
    "/org/openbmc/control/fans", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2", 
    "/org/openbmc/sensors/temperature/cpu1/core2", 
    "/org/openbmc/inventory/system/chassis", 
    "/org/openbmc", 
    "/org/openbmc/sensors/temperature/dimm1", 
    "/org/openbmc/UserManager/Groups", 
    "/org/openbmc/records/events/280/fru", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9", 
    "/org/openbmc/sensors/host/cpu1/OccStatus", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1", 
    "/org/openbmc/HostServices", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5", 
    "/org/openbmc/buttons", 
    "/org/openbmc/control/host0", 
    "/org/openbmc/sensors/voltage/P1V1_MEM0", 
    "/org/openbmc/sensors/voltage/P1V1_MEM1", 
    "/org/openbmc/sensors/voltage/P0V97_CPU0", 
    "/org/openbmc/sensors/voltage/P0V97_CPU1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12", 
    "/org/openbmc/inventory", 
    "/org/openbmc/sensors/temperature/cpu1/core4", 
    "/org/openbmc/sensors/temperature/cpu1/core5", 
    "/org/openbmc/sensors/tach/fan4H", 
    "/org/openbmc/sensors/temperature/cpu1/core0", 
    "/org/openbmc/sensors/tach/fan4L", 
    "/org/openbmc/sensors/temperature/cpu1/core3", 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock", 
    "/org/openbmc/sensors/temperature/cpu1/core8", 
    "/org/openbmc/sensors/temperature/cpu1/core9", 
    "/org/openbmc/control/led/heartbeat", 
    "/org/openbmc/control/flash", 
    "/org/openbmc/sensors/temperature/membuf0", 
    "/org/openbmc/sensors/temperature/membuf1", 
    "/org/openbmc/sensors/temperature/membuf4", 
    "/org/openbmc/sensors/temperature/membuf5", 
    "/org/openbmc/sensors/temperature/membuf6", 
    "/org/openbmc/sensors/HSCB/Iout", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1", 
    "/org/openbmc/buttons/reset0", 
    "/org/openbmc/HostIpmi/1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1", 
    "/org/openbmc/control/led", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0", 
    "/org/openbmc/sensors/host/BootCount", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4", 
    "/org/openbmc/sensors/tach/fan5L", 
    "/org/openbmc/sensors/host/BootProgress", 
    "/org/openbmc/sensors/tach/fan5H", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3", 
    "/org/openbmc/control/chassis0", 
    "/org/openbmc/inventory/system/chassis/hdd_backplane", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7", 
    "/org/openbmc/sensors/temperature/dimm5", 
    "/org/openbmc/sensors/temperature/dimm4", 
    "/org/openbmc/buttons/power0", 
    "/org/openbmc/control/flash/bios", 
    "/org/openbmc/sensors/temperature/dimm0", 
    "/org/openbmc/sensors/powercap/n_cap", 
    "/org/openbmc/sensors/HSCA/Iout", 
    "/org/openbmc/inventory/system", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8", 
    "/org/openbmc/inventory/system/bios", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser", 
    "/org/openbmc/sensors/host/OperatingSystemStatus", 
    "/org/openbmc/sensors/powercap/max_cap", 
    "/org/openbmc/sensors/powercap/user_cap", 
    "/org/openbmc/sensors/tach/fan2L", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2", 
    "/org/openbmc/control/led/beep", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0", 
    "/org/openbmc/sensors/tach/fan2H", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4", 
    "/org/openbmc/inventory/system/chassis/fan4", 
    "/org/openbmc/inventory/system/chassis/fan5", 
    "/org/openbmc/inventory/system/chassis/fan2", 
    "/org/openbmc/inventory/system/chassis/fan3", 
    "/org/openbmc/inventory/system/chassis/fan0", 
    "/org/openbmc/inventory/system/chassis/fan1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15", 
    "/org/openbmc/sensors/temperature/rtc", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11", 
    "/org/openbmc/NetworkManager/Interface", 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10", 
    "/org/openbmc/inventory/system/chassis/motherboard/apss", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18", 
    "/org/openbmc/inventory/system/chassis/io_board", 
    "/org/openbmc/UserManager/User", 
    "/org/openbmc/watchdog/host0", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4", 
    "/org/openbmc/sensors", 
    "/org/openbmc/sensors/temperature/ambient", 
    "/org/openbmc/sensors/HSCB/Vout", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6", 
    "/org/openbmc/sensors/powercap/curr_cap", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1", 
    "/org/openbmc/inventory/system/chassis/motherboard", 
    "/org/openbmc/sensors/tach/fan3L", 
    "/org/openbmc/sensors/tach/fan3H", 
    "/org/openbmc/sensors/temperature/membuf7"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:49:16.426">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:49:16.426">${jsondata} = {u'data': [u'/org/openbmc/sensors/powercap/min_cap', u'/org/openbmc/control', u'/org/openbmc/sensors/host/powercap', u'/org/openbmc/UserManager/Group', u'/org/openbmc/inventory/system/chassis/io_board...</msg>
<status starttime="20161110 21:49:16.424" status="PASS" endtime="20161110 21:49:16.426"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${jsondata}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:16.427">Length is 3</msg>
<status starttime="20161110 21:49:16.427" status="PASS" endtime="20161110 21:49:16.427"></status>
</kw>
<kw type="teardown" name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 21:49:16.428" status="PASS" endtime="20161110 21:49:16.432"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:16.434" html="yes">Created directory '&lt;a href="file:///tmp/root/24880/obmc-robot/logs"&gt;/tmp/root/24880/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20161110 21:49:16.433" status="PASS" endtime="20161110 21:49:16.434"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:49:16.436">File '/tmp/root/24880/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20161110 21:49:16.435" status="FAIL" endtime="20161110 21:49:16.436"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:16.436">${exist} = False</msg>
<status starttime="20161110 21:49:16.434" status="PASS" endtime="20161110 21:49:16.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:16.439" html="yes">Created file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/test_history.txt"&gt;/tmp/root/24880/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 21:49:16.439" status="PASS" endtime="20161110 21:49:16.439"></status>
</kw>
<status starttime="20161110 21:49:16.436" status="PASS" endtime="20161110 21:49:16.439"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:16.440">${cur_time} = 2016-11-10 21:49:16:439911</msg>
<status starttime="20161110 21:49:16.440" status="PASS" endtime="20161110 21:49:16.440"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:16.441">${cur_time} = 20161110214916439911</msg>
<status starttime="20161110 21:49:16.440" status="PASS" endtime="20161110 21:49:16.441"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:16.441">${cur_time} = 20161110214916439911</msg>
<status starttime="20161110 21:49:16.439" status="PASS" endtime="20161110 21:49:16.441"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:16.441" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/test_history.txt"&gt;/tmp/root/24880/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 21:49:16.441" status="PASS" endtime="20161110 21:49:16.442"></status>
</kw>
<status starttime="20161110 21:49:16.433" status="PASS" endtime="20161110 21:49:16.442"></status>
</kw>
<status starttime="20161110 21:49:16.428" status="PASS" endtime="20161110 21:49:16.442"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20161110 21:49:15.249" critical="yes" status="PASS" endtime="20161110 21:49:16.442"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20161110 21:49:16.443">Delete All Sessions</msg>
<status starttime="20161110 21:49:16.442" status="PASS" endtime="20161110 21:49:16.443"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20161110 21:49:14.878" status="PASS" endtime="20161110 21:49:16.443"></status>
</suite>
<status starttime="20161110 21:49:14.876" status="PASS" endtime="20161110 21:49:16.444"></status>
</suite>
<suite id="s1-s2" source="/tmp/root/24880/obmc-robot/tests/test_association.robot" name="Test Association">
<kw type="setup" name="Suite Initialization Setup">
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:49:16.466">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 21:49:16.466" status="FAIL" endtime="20161110 21:49:16.466"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:16.466">${has_host} = False</msg>
<status starttime="20161110 21:49:16.465" status="PASS" endtime="20161110 21:49:16.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 21:49:16.469" status="PASS" endtime="20161110 21:49:16.469"></status>
</kw>
<status starttime="20161110 21:49:16.466" status="PASS" endtime="20161110 21:49:16.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:16.473">${port_num} = 22</msg>
<status starttime="20161110 21:49:16.473" status="PASS" endtime="20161110 21:49:16.473"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:16.473">${SSH_PORT} = 22</msg>
<status starttime="20161110 21:49:16.473" status="PASS" endtime="20161110 21:49:16.473"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:16.474">${https_num} = 443</msg>
<status starttime="20161110 21:49:16.474" status="PASS" endtime="20161110 21:49:16.474"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:16.475">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 21:49:16.474" status="PASS" endtime="20161110 21:49:16.475"></status>
</kw>
<status starttime="20161110 21:49:16.472" status="PASS" endtime="20161110 21:49:16.475"></status>
</kw>
<status starttime="20161110 21:49:16.470" status="PASS" endtime="20161110 21:49:16.475"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:49:16.476">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 21:49:16.475" status="FAIL" endtime="20161110 21:49:16.476"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:16.476">${has_port} = False</msg>
<status starttime="20161110 21:49:16.475" status="PASS" endtime="20161110 21:49:16.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 21:49:16.479" status="PASS" endtime="20161110 21:49:16.480"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 21:49:16.480" status="PASS" endtime="20161110 21:49:16.480"></status>
</kw>
<status starttime="20161110 21:49:16.479" status="PASS" endtime="20161110 21:49:16.480"></status>
</kw>
<status starttime="20161110 21:49:16.476" status="PASS" endtime="20161110 21:49:16.480"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:16.481">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 21:49:19.744">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 21:49:16.480" status="PASS" endtime="20161110 21:49:19.744"></status>
</kw>
<status starttime="20161110 21:49:16.465" status="PASS" endtime="20161110 21:49:19.744"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:19.747">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161110 21:49:19.747" status="PASS" endtime="20161110 21:49:19.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:19.749">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:19.748" status="PASS" endtime="20161110 21:49:19.749"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:49:19.749" status="PASS" endtime="20161110 21:49:19.750"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:19.753">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:19.751" status="PASS" endtime="20161110 21:49:19.753"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:19.755">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:19.754" status="PASS" endtime="20161110 21:49:19.755"></status>
</kw>
<status starttime="20161110 21:49:19.753" status="PASS" endtime="20161110 21:49:19.755"></status>
</kw>
<status starttime="20161110 21:49:19.750" status="PASS" endtime="20161110 21:49:19.756"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:19.757">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:19.756" status="PASS" endtime="20161110 21:49:19.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:19.757">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:19.757" status="PASS" endtime="20161110 21:49:19.757"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:19.758">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:19.758" status="PASS" endtime="20161110 21:49:19.758"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:19.758">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:19.758" status="PASS" endtime="20161110 21:49:19.758"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:20.179">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:20.180">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:19.759" status="PASS" endtime="20161110 21:49:20.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:20.181">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:20.180" status="PASS" endtime="20161110 21:49:20.181"></status>
</kw>
<status starttime="20161110 21:49:19.756" status="PASS" endtime="20161110 21:49:20.181"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:20.466">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:20.466">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:20.181" status="PASS" endtime="20161110 21:49:20.466"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:20.468">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:20.467" status="PASS" endtime="20161110 21:49:20.468"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:20.469">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:20.469" status="PASS" endtime="20161110 21:49:20.469"></status>
</kw>
<status starttime="20161110 21:49:20.468" status="PASS" endtime="20161110 21:49:20.469"></status>
</kw>
<status starttime="20161110 21:49:20.466" status="PASS" endtime="20161110 21:49:20.469"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:20.470">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:19.746" status="PASS" endtime="20161110 21:49:20.470"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:20.471">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:20.470" status="PASS" endtime="20161110 21:49:20.471"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:20.472">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161110 21:49:20.472" status="PASS" endtime="20161110 21:49:20.473"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:20.475">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 21:49:20.474" status="PASS" endtime="20161110 21:49:20.475"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:20.476">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 21:49:20.476" status="PASS" endtime="20161110 21:49:20.476"></status>
</kw>
<status starttime="20161110 21:49:20.475" status="PASS" endtime="20161110 21:49:20.476"></status>
</kw>
<status starttime="20161110 21:49:20.473" status="PASS" endtime="20161110 21:49:20.476"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:20.477">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:20.477" status="PASS" endtime="20161110 21:49:20.477"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:20.478">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:20.478" status="PASS" endtime="20161110 21:49:20.478"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:20.479">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:20.478" status="PASS" endtime="20161110 21:49:20.479"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:20.479">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:20.479" status="PASS" endtime="20161110 21:49:20.479"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:20.907">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:20.907">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:20.479" status="PASS" endtime="20161110 21:49:20.908"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:20.908">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:20.908" status="PASS" endtime="20161110 21:49:20.908"></status>
</kw>
<status starttime="20161110 21:49:20.476" status="PASS" endtime="20161110 21:49:20.908"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:20.966">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161110 21:49:20.966">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:20.908" status="PASS" endtime="20161110 21:49:20.966"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:20.967">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:20.967" status="PASS" endtime="20161110 21:49:20.967"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:20.968">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:20.968" status="PASS" endtime="20161110 21:49:20.968"></status>
</kw>
<status starttime="20161110 21:49:20.968" status="PASS" endtime="20161110 21:49:20.968"></status>
</kw>
<status starttime="20161110 21:49:20.967" status="PASS" endtime="20161110 21:49:20.968"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:20.969">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:20.471" status="PASS" endtime="20161110 21:49:20.969"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:20.969">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:49:20.969">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:49:20.969">${json} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:49:20.969" status="PASS" endtime="20161110 21:49:20.969"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:20.970">Length is 0</msg>
<status starttime="20161110 21:49:20.969" status="PASS" endtime="20161110 21:49:20.970"></status>
</kw>
<status starttime="20161110 21:49:19.745" status="PASS" endtime="20161110 21:49:20.970"></status>
</kw>
<status starttime="20161110 21:49:19.745" status="PASS" endtime="20161110 21:49:20.970"></status>
</kw>
<status starttime="20161110 21:49:16.465" status="PASS" endtime="20161110 21:49:20.970"></status>
</kw>
<test id="s1-s2-t1" name="Create error log on single FRU">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:20.972">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161110 21:49:20.972" status="PASS" endtime="20161110 21:49:20.972"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:20.972">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:20.972" status="PASS" endtime="20161110 21:49:20.973"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:49:20.973" status="PASS" endtime="20161110 21:49:20.973"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:20.974">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:20.974" status="PASS" endtime="20161110 21:49:20.974"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:20.975">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:20.975" status="PASS" endtime="20161110 21:49:20.975"></status>
</kw>
<status starttime="20161110 21:49:20.975" status="PASS" endtime="20161110 21:49:20.976"></status>
</kw>
<status starttime="20161110 21:49:20.973" status="PASS" endtime="20161110 21:49:20.976"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:20.977">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:20.977" status="PASS" endtime="20161110 21:49:20.978"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:20.978">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:20.978" status="PASS" endtime="20161110 21:49:20.978"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:20.979">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:20.979" status="PASS" endtime="20161110 21:49:20.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:20.980">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:20.980" status="PASS" endtime="20161110 21:49:20.980"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:21.525">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:21.525">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:20.981" status="PASS" endtime="20161110 21:49:21.525"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:21.526">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:21.525" status="PASS" endtime="20161110 21:49:21.526"></status>
</kw>
<status starttime="20161110 21:49:20.976" status="PASS" endtime="20161110 21:49:21.527"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:22.049">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:22.049">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:21.527" status="PASS" endtime="20161110 21:49:22.049"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:22.051">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:22.050" status="PASS" endtime="20161110 21:49:22.051"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:22.053">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:22.052" status="PASS" endtime="20161110 21:49:22.053"></status>
</kw>
<status starttime="20161110 21:49:22.052" status="PASS" endtime="20161110 21:49:22.053"></status>
</kw>
<status starttime="20161110 21:49:22.050" status="PASS" endtime="20161110 21:49:22.053"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:22.053">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:20.971" status="PASS" endtime="20161110 21:49:22.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:22.055">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:22.054" status="PASS" endtime="20161110 21:49:22.055"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:22.056">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161110 21:49:22.056" status="PASS" endtime="20161110 21:49:22.057"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:22.059">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 21:49:22.058" status="PASS" endtime="20161110 21:49:22.059"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:22.061">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 21:49:22.060" status="PASS" endtime="20161110 21:49:22.061"></status>
</kw>
<status starttime="20161110 21:49:22.059" status="PASS" endtime="20161110 21:49:22.061"></status>
</kw>
<status starttime="20161110 21:49:22.057" status="PASS" endtime="20161110 21:49:22.061"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:22.062">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:22.062" status="PASS" endtime="20161110 21:49:22.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:22.064">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:22.063" status="PASS" endtime="20161110 21:49:22.064"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:22.065">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:22.064" status="PASS" endtime="20161110 21:49:22.065"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:22.066">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:22.065" status="PASS" endtime="20161110 21:49:22.066"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:22.627">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:22.627">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:22.066" status="PASS" endtime="20161110 21:49:22.627"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:22.628">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:22.628" status="PASS" endtime="20161110 21:49:22.628"></status>
</kw>
<status starttime="20161110 21:49:22.061" status="PASS" endtime="20161110 21:49:22.628"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:22.684">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161110 21:49:22.684">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:22.628" status="PASS" endtime="20161110 21:49:22.684"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:22.685">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:22.685" status="PASS" endtime="20161110 21:49:22.685"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:22.686">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:22.686" status="PASS" endtime="20161110 21:49:22.686"></status>
</kw>
<status starttime="20161110 21:49:22.685" status="PASS" endtime="20161110 21:49:22.686"></status>
</kw>
<status starttime="20161110 21:49:22.684" status="PASS" endtime="20161110 21:49:22.686"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:22.687">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:22.055" status="PASS" endtime="20161110 21:49:22.687"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:22.687">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:49:22.687">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:49:22.687">${json} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:49:22.687" status="PASS" endtime="20161110 21:49:22.687"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:22.688">Length is 0</msg>
<status starttime="20161110 21:49:22.688" status="PASS" endtime="20161110 21:49:22.688"></status>
</kw>
<status starttime="20161110 21:49:20.971" status="PASS" endtime="20161110 21:49:22.688"></status>
</kw>
<status starttime="20161110 21:49:20.971" status="PASS" endtime="20161110 21:49:22.688"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${CREATE_ERROR_SINGLE_FRU}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${elog}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:22.689">Executing command 'busctl call org.openbmc.records.events /org/openbmc/records/events org.openbmc.recordlog acceptHostMessage sssay "Error" "Testing failure" "/org/openbmc/inventory/system/chassis/motherboard/dimm1" 1 1'.</msg>
<msg level="INFO" timestamp="20161110 21:49:22.858">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 21:49:22.859">${elog} = q 281</msg>
<msg level="INFO" timestamp="20161110 21:49:22.859">${stderr} = </msg>
<status starttime="20161110 21:49:22.688" status="PASS" endtime="20161110 21:49:22.859"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:22.859">Length is 0</msg>
<status starttime="20161110 21:49:22.859" status="PASS" endtime="20161110 21:49:22.859"></status>
</kw>
<kw name="Get EventList">
<assign>
<var>${log_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:22.861">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161110 21:49:22.860" status="PASS" endtime="20161110 21:49:22.861"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:22.862">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 21:49:22.861" status="PASS" endtime="20161110 21:49:22.862"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:22.863">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 21:49:22.862" status="PASS" endtime="20161110 21:49:22.863"></status>
</kw>
<status starttime="20161110 21:49:22.862" status="PASS" endtime="20161110 21:49:22.863"></status>
</kw>
<status starttime="20161110 21:49:22.861" status="PASS" endtime="20161110 21:49:22.863"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:22.864">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:22.863" status="PASS" endtime="20161110 21:49:22.864"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:22.865">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:22.864" status="PASS" endtime="20161110 21:49:22.865"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:22.865">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:22.865" status="PASS" endtime="20161110 21:49:22.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:22.866">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:22.865" status="PASS" endtime="20161110 21:49:22.866"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.310">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:23.311">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:22.866" status="PASS" endtime="20161110 21:49:23.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:23.312">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:23.311" status="PASS" endtime="20161110 21:49:23.312"></status>
</kw>
<status starttime="20161110 21:49:22.863" status="PASS" endtime="20161110 21:49:23.312"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.373">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161110 21:49:23.374">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:23.312" status="PASS" endtime="20161110 21:49:23.374"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.375">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/281"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:23.375" status="PASS" endtime="20161110 21:49:23.376"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:23.377">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/281"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:23.377" status="PASS" endtime="20161110 21:49:23.378"></status>
</kw>
<status starttime="20161110 21:49:23.376" status="PASS" endtime="20161110 21:49:23.378"></status>
</kw>
<status starttime="20161110 21:49:23.374" status="PASS" endtime="20161110 21:49:23.378"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:23.378">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:22.860" status="PASS" endtime="20161110 21:49:23.378"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:23.379">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:23.379" status="PASS" endtime="20161110 21:49:23.379"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.380">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/281"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:49:23.380">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:49:23.380">${jsondata} = {u'data': [u'/org/openbmc/records/events/281'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:49:23.380" status="PASS" endtime="20161110 21:49:23.380"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:23.381">${log_list} = [u'/org/openbmc/records/events/281']</msg>
<status starttime="20161110 21:49:22.859" status="PASS" endtime="20161110 21:49:23.381"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>'${log_list}'</arg>
<arg>${elog.strip('q ')}</arg>
</arguments>
<status starttime="20161110 21:49:23.381" status="PASS" endtime="20161110 21:49:23.382"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${EVENT_RECORD}/${elog.strip('q ')}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.383">${association_uri} = /org/openbmc/records/events/281/fru</msg>
<status starttime="20161110 21:49:23.382" status="PASS" endtime="20161110 21:49:23.383"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${association_uri}</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${association_content}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.385">${base_uri} = /org/openbmc/records/events/281/fru/attr/endpoints</msg>
<status starttime="20161110 21:49:23.385" status="PASS" endtime="20161110 21:49:23.385"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.387">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/281/fru/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 21:49:23.386" status="PASS" endtime="20161110 21:49:23.387"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:23.388">URI:https://9.3.23.30:443/org/openbmc/records/events/281/fru/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 21:49:23.388" status="PASS" endtime="20161110 21:49:23.388"></status>
</kw>
<status starttime="20161110 21:49:23.387" status="PASS" endtime="20161110 21:49:23.388"></status>
</kw>
<status starttime="20161110 21:49:23.386" status="PASS" endtime="20161110 21:49:23.388"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:23.389">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:23.389" status="PASS" endtime="20161110 21:49:23.389"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.390">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:23.389" status="PASS" endtime="20161110 21:49:23.390"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.390">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:23.390" status="PASS" endtime="20161110 21:49:23.390"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.391">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:23.390" status="PASS" endtime="20161110 21:49:23.391"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.719">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:23.720">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:23.391" status="PASS" endtime="20161110 21:49:23.720"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:23.720">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:23.720" status="PASS" endtime="20161110 21:49:23.720"></status>
</kw>
<status starttime="20161110 21:49:23.388" status="PASS" endtime="20161110 21:49:23.721"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.799">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/281/fru/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161110 21:49:23.799">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:23.721" status="PASS" endtime="20161110 21:49:23.800"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.801">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:23.800" status="PASS" endtime="20161110 21:49:23.801"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:23.801">Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:23.801" status="PASS" endtime="20161110 21:49:23.801"></status>
</kw>
<status starttime="20161110 21:49:23.801" status="PASS" endtime="20161110 21:49:23.802"></status>
</kw>
<status starttime="20161110 21:49:23.800" status="PASS" endtime="20161110 21:49:23.802"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:23.802">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:23.384" status="PASS" endtime="20161110 21:49:23.802"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.802">To JSON using : content={
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:49:23.802">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:49:23.802">${content} = {u'data': [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:49:23.802" status="PASS" endtime="20161110 21:49:23.803"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:23.803">${association_content} = [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1']</msg>
<status starttime="20161110 21:49:23.383" status="PASS" endtime="20161110 21:49:23.803"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${association_content}</arg>
<arg>${DIMM1_URI}</arg>
</arguments>
<status starttime="20161110 21:49:23.803" status="PASS" endtime="20161110 21:49:23.803"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM1_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm1_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.805">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints</msg>
<status starttime="20161110 21:49:23.804" status="PASS" endtime="20161110 21:49:23.805"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.806">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 21:49:23.805" status="PASS" endtime="20161110 21:49:23.806"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:23.807">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 21:49:23.806" status="PASS" endtime="20161110 21:49:23.807"></status>
</kw>
<status starttime="20161110 21:49:23.806" status="PASS" endtime="20161110 21:49:23.807"></status>
</kw>
<status starttime="20161110 21:49:23.805" status="PASS" endtime="20161110 21:49:23.807"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:23.808">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:23.807" status="PASS" endtime="20161110 21:49:23.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.809">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:23.808" status="PASS" endtime="20161110 21:49:23.809"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.809">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:23.809" status="PASS" endtime="20161110 21:49:23.809"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:23.810">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:23.809" status="PASS" endtime="20161110 21:49:23.810"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:24.142">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:24.143">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:23.810" status="PASS" endtime="20161110 21:49:24.143"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:24.144">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:24.143" status="PASS" endtime="20161110 21:49:24.144"></status>
</kw>
<status starttime="20161110 21:49:23.807" status="PASS" endtime="20161110 21:49:24.144"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:24.221">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161110 21:49:24.221">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:24.144" status="PASS" endtime="20161110 21:49:24.222"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:24.223">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/281"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:24.222" status="PASS" endtime="20161110 21:49:24.223"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:24.225">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/281"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:24.224" status="PASS" endtime="20161110 21:49:24.225"></status>
</kw>
<status starttime="20161110 21:49:24.224" status="PASS" endtime="20161110 21:49:24.225"></status>
</kw>
<status starttime="20161110 21:49:24.222" status="PASS" endtime="20161110 21:49:24.225"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:24.225">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:23.804" status="PASS" endtime="20161110 21:49:24.225"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:24.226">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/281"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:49:24.227">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:49:24.227">${content} = {u'data': [u'/org/openbmc/records/events/281'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:49:24.226" status="PASS" endtime="20161110 21:49:24.227"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:24.227">${dimm1_event} = [u'/org/openbmc/records/events/281']</msg>
<status starttime="20161110 21:49:23.803" status="PASS" endtime="20161110 21:49:24.227"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${dimm1_event}</arg>
<arg>${log_list[0]}</arg>
</arguments>
<status starttime="20161110 21:49:24.228" status="PASS" endtime="20161110 21:49:24.228"></status>
</kw>
<kw type="teardown" name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 21:49:24.229" status="PASS" endtime="20161110 21:49:24.233"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:24.235" html="yes">Directory '&lt;a href="file:///tmp/root/24880/obmc-robot/logs"&gt;/tmp/root/24880/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 21:49:24.234" status="PASS" endtime="20161110 21:49:24.235"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:24.236" html="yes">File '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/test_history.txt"&gt;/tmp/root/24880/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 21:49:24.236" status="PASS" endtime="20161110 21:49:24.236"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:24.236">${exist} = True</msg>
<status starttime="20161110 21:49:24.235" status="PASS" endtime="20161110 21:49:24.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 21:49:24.236" status="PASS" endtime="20161110 21:49:24.239"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:24.240">${cur_time} = 2016-11-10 21:49:24:239591</msg>
<status starttime="20161110 21:49:24.239" status="PASS" endtime="20161110 21:49:24.240"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:24.240">${cur_time} = 20161110214924239591</msg>
<status starttime="20161110 21:49:24.240" status="PASS" endtime="20161110 21:49:24.241"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:24.241">${cur_time} = 20161110214924239591</msg>
<status starttime="20161110 21:49:24.239" status="PASS" endtime="20161110 21:49:24.241"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:24.241" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/test_history.txt"&gt;/tmp/root/24880/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 21:49:24.241" status="PASS" endtime="20161110 21:49:24.241"></status>
</kw>
<status starttime="20161110 21:49:24.234" status="PASS" endtime="20161110 21:49:24.242"></status>
</kw>
<status starttime="20161110 21:49:24.228" status="PASS" endtime="20161110 21:49:24.242"></status>
</kw>
<doc>***GOOD PATH***
Create an error log on single FRU and verify
its association.
</doc>
<tags>
<tag>Create_error_log_on_single_FRU</tag>
</tags>
<status starttime="20161110 21:49:20.970" critical="yes" status="PASS" endtime="20161110 21:49:24.242"></status>
</test>
<test id="s1-s2-t2" name="Delete error log">
<kw name="Create a test log">
<assign>
<var>${log_uri1}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:24.243">${data} = {u'data': []}</msg>
<status starttime="20161110 21:49:24.243" status="PASS" endtime="20161110 21:49:24.243"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:24.244">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161110 21:49:24.244" status="PASS" endtime="20161110 21:49:24.244"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:24.245">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:24.244" status="PASS" endtime="20161110 21:49:24.245"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:49:24.245" status="PASS" endtime="20161110 21:49:24.245"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:24.246">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:24.246" status="PASS" endtime="20161110 21:49:24.246"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:24.247">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:24.247" status="PASS" endtime="20161110 21:49:24.247"></status>
</kw>
<status starttime="20161110 21:49:24.247" status="PASS" endtime="20161110 21:49:24.247"></status>
</kw>
<status starttime="20161110 21:49:24.245" status="PASS" endtime="20161110 21:49:24.247"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:24.248">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:24.248" status="PASS" endtime="20161110 21:49:24.249"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:24.249">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:24.249" status="PASS" endtime="20161110 21:49:24.249"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:24.250">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:24.249" status="PASS" endtime="20161110 21:49:24.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:24.250">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:24.250" status="PASS" endtime="20161110 21:49:24.250"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:24.666">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:24.667">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:24.250" status="PASS" endtime="20161110 21:49:24.667"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:24.667">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:24.667" status="PASS" endtime="20161110 21:49:24.668"></status>
</kw>
<status starttime="20161110 21:49:24.248" status="PASS" endtime="20161110 21:49:24.668"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:25.160">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:25.160">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:24.668" status="PASS" endtime="20161110 21:49:25.160"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:25.162">${msg} = Response code:200, Content:{
  "data": 282, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:25.161" status="PASS" endtime="20161110 21:49:25.162"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:25.163">Response code:200, Content:{
  "data": 282, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:25.163" status="PASS" endtime="20161110 21:49:25.163"></status>
</kw>
<status starttime="20161110 21:49:25.162" status="PASS" endtime="20161110 21:49:25.163"></status>
</kw>
<status starttime="20161110 21:49:25.160" status="PASS" endtime="20161110 21:49:25.164"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:25.164">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:24.243" status="PASS" endtime="20161110 21:49:25.164"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:25.165">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:25.164" status="PASS" endtime="20161110 21:49:25.165"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:25.166">To JSON using : content={
  "data": 282, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:49:25.166">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:49:25.166">${json} = {u'data': 282, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:49:25.165" status="PASS" endtime="20161110 21:49:25.166"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:25.167">${LOGID} = 282</msg>
<status starttime="20161110 21:49:25.167" status="PASS" endtime="20161110 21:49:25.167"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:25.168">${uri} = /org/openbmc/records/events/282</msg>
<status starttime="20161110 21:49:25.168" status="PASS" endtime="20161110 21:49:25.168"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:25.169">${log_uri1} = /org/openbmc/records/events/282</msg>
<status starttime="20161110 21:49:24.243" status="PASS" endtime="20161110 21:49:25.169"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri1}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:25.169">${association_uri1} = /org/openbmc/records/events/282/fru</msg>
<status starttime="20161110 21:49:25.169" status="PASS" endtime="20161110 21:49:25.169"></status>
</kw>
<kw name="Create a test log">
<assign>
<var>${log_uri2}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:25.171">${data} = {u'data': []}</msg>
<status starttime="20161110 21:49:25.170" status="PASS" endtime="20161110 21:49:25.171"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:25.173">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161110 21:49:25.172" status="PASS" endtime="20161110 21:49:25.173"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:25.173">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:25.173" status="PASS" endtime="20161110 21:49:25.173"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:49:25.174" status="PASS" endtime="20161110 21:49:25.174"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:25.176">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:25.175" status="PASS" endtime="20161110 21:49:25.176"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:25.177">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:25.177" status="PASS" endtime="20161110 21:49:25.177"></status>
</kw>
<status starttime="20161110 21:49:25.177" status="PASS" endtime="20161110 21:49:25.177"></status>
</kw>
<status starttime="20161110 21:49:25.174" status="PASS" endtime="20161110 21:49:25.177"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:25.178">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:25.178" status="PASS" endtime="20161110 21:49:25.179"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:25.179">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:25.179" status="PASS" endtime="20161110 21:49:25.179"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:25.180">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:25.180" status="PASS" endtime="20161110 21:49:25.180"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:25.181">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:25.180" status="PASS" endtime="20161110 21:49:25.181"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:25.706">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:25.707">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:25.181" status="PASS" endtime="20161110 21:49:25.707"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:25.707">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:25.707" status="PASS" endtime="20161110 21:49:25.707"></status>
</kw>
<status starttime="20161110 21:49:25.178" status="PASS" endtime="20161110 21:49:25.707"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:26.010">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:26.010">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:25.708" status="PASS" endtime="20161110 21:49:26.010"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:26.011">${msg} = Response code:200, Content:{
  "data": 283, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:26.010" status="PASS" endtime="20161110 21:49:26.011"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:26.011">Response code:200, Content:{
  "data": 283, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:26.011" status="PASS" endtime="20161110 21:49:26.012"></status>
</kw>
<status starttime="20161110 21:49:26.011" status="PASS" endtime="20161110 21:49:26.012"></status>
</kw>
<status starttime="20161110 21:49:26.010" status="PASS" endtime="20161110 21:49:26.012"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:26.012">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:25.171" status="PASS" endtime="20161110 21:49:26.012"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:26.012">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:26.012" status="PASS" endtime="20161110 21:49:26.013"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:26.013">To JSON using : content={
  "data": 283, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:49:26.013">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:49:26.013">${json} = {u'data': 283, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:49:26.013" status="PASS" endtime="20161110 21:49:26.013"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:26.014">${LOGID} = 283</msg>
<status starttime="20161110 21:49:26.013" status="PASS" endtime="20161110 21:49:26.014"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:26.014">${uri} = /org/openbmc/records/events/283</msg>
<status starttime="20161110 21:49:26.014" status="PASS" endtime="20161110 21:49:26.014"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:26.014">${log_uri2} = /org/openbmc/records/events/283</msg>
<status starttime="20161110 21:49:25.170" status="PASS" endtime="20161110 21:49:26.014"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/action/delete</arg>
</arguments>
<assign>
<var>${del_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:26.015">${del_uri} = /org/openbmc/records/events/282/action/delete</msg>
<status starttime="20161110 21:49:26.015" status="PASS" endtime="20161110 21:49:26.015"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${del_uri}</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:26.016">${base_uri} = /org/openbmc/records/events/282/action/delete</msg>
<status starttime="20161110 21:49:26.016" status="PASS" endtime="20161110 21:49:26.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:26.017">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:26.016" status="PASS" endtime="20161110 21:49:26.017"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:49:26.017" status="PASS" endtime="20161110 21:49:26.018"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:26.020">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/282/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:26.019" status="PASS" endtime="20161110 21:49:26.021"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:26.022">URI:https://9.3.23.30:443/org/openbmc/records/events/282/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:26.022" status="PASS" endtime="20161110 21:49:26.022"></status>
</kw>
<status starttime="20161110 21:49:26.021" status="PASS" endtime="20161110 21:49:26.023"></status>
</kw>
<status starttime="20161110 21:49:26.018" status="PASS" endtime="20161110 21:49:26.023"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:26.024">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:26.024" status="PASS" endtime="20161110 21:49:26.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:26.026">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:26.025" status="PASS" endtime="20161110 21:49:26.026"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:26.026">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:26.026" status="PASS" endtime="20161110 21:49:26.026"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:26.027">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:26.027" status="PASS" endtime="20161110 21:49:26.027"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:26.697">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:26.697">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:26.027" status="PASS" endtime="20161110 21:49:26.697"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:26.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:26.697" status="PASS" endtime="20161110 21:49:26.698"></status>
</kw>
<status starttime="20161110 21:49:26.023" status="PASS" endtime="20161110 21:49:26.698"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:27.149">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/282/action/delete, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:27.150">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:26.698" status="PASS" endtime="20161110 21:49:27.150"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:27.162">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:27.151" status="PASS" endtime="20161110 21:49:27.162"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:27.164">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:27.163" status="PASS" endtime="20161110 21:49:27.164"></status>
</kw>
<status starttime="20161110 21:49:27.163" status="PASS" endtime="20161110 21:49:27.164"></status>
</kw>
<status starttime="20161110 21:49:27.150" status="PASS" endtime="20161110 21:49:27.164"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:27.165">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:26.015" status="PASS" endtime="20161110 21:49:27.165"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:27.165">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:27.165" status="PASS" endtime="20161110 21:49:27.166"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${association_uri1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:27.167">${base_uri} = /org/openbmc/records/events/282/fru</msg>
<status starttime="20161110 21:49:27.167" status="PASS" endtime="20161110 21:49:27.167"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:27.172">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/282/fru, method:Get, args:{}</msg>
<status starttime="20161110 21:49:27.168" status="PASS" endtime="20161110 21:49:27.172"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:27.173">URI:https://9.3.23.30:443/org/openbmc/records/events/282/fru, method:Get, args:{}</msg>
<status starttime="20161110 21:49:27.173" status="PASS" endtime="20161110 21:49:27.173"></status>
</kw>
<status starttime="20161110 21:49:27.172" status="PASS" endtime="20161110 21:49:27.173"></status>
</kw>
<status starttime="20161110 21:49:27.168" status="PASS" endtime="20161110 21:49:27.173"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:27.175">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:27.174" status="PASS" endtime="20161110 21:49:27.175"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:27.176">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:27.176" status="PASS" endtime="20161110 21:49:27.176"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:27.177">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:27.176" status="PASS" endtime="20161110 21:49:27.177"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:27.177">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:27.177" status="PASS" endtime="20161110 21:49:27.177"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:27.950">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:27.950">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:27.178" status="PASS" endtime="20161110 21:49:27.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:27.951">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:27.950" status="PASS" endtime="20161110 21:49:27.951"></status>
</kw>
<status starttime="20161110 21:49:27.174" status="PASS" endtime="20161110 21:49:27.951"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:28.004">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/282/fru, headers=None </msg>
<msg level="INFO" timestamp="20161110 21:49:28.005">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20161110 21:49:27.951" status="PASS" endtime="20161110 21:49:28.005"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:28.007">${msg} = Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/282/fru"
  }, 
  "message": "404 Not Found",...</msg>
<status starttime="20161110 21:49:28.006" status="PASS" endtime="20161110 21:49:28.007"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:28.008">Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/282/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
}</msg>
<status starttime="20161110 21:49:28.008" status="PASS" endtime="20161110 21:49:28.008"></status>
</kw>
<status starttime="20161110 21:49:28.007" status="PASS" endtime="20161110 21:49:28.009"></status>
</kw>
<status starttime="20161110 21:49:28.005" status="PASS" endtime="20161110 21:49:28.009"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:28.009">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20161110 21:49:27.166" status="PASS" endtime="20161110 21:49:28.009"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:28.010">To JSON using : content={
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/282/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
} </msg>
<msg level="INFO" timestamp="20161110 21:49:28.010">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:49:28.010">${jsondata} = {u'data': {u'description': u'org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/282/fru'}, u'status': u'error', u'message': u'404 Not Found'}</msg>
<status starttime="20161110 21:49:28.009" status="PASS" endtime="20161110 21:49:28.010"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${jsondata['message']}</arg>
<arg>404 Not Found</arg>
</arguments>
<status starttime="20161110 21:49:28.010" status="PASS" endtime="20161110 21:49:28.011"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM3_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm3_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:28.014">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints</msg>
<status starttime="20161110 21:49:28.013" status="PASS" endtime="20161110 21:49:28.015"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:28.017">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 21:49:28.016" status="PASS" endtime="20161110 21:49:28.017"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:28.017">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 21:49:28.017" status="PASS" endtime="20161110 21:49:28.018"></status>
</kw>
<status starttime="20161110 21:49:28.017" status="PASS" endtime="20161110 21:49:28.018"></status>
</kw>
<status starttime="20161110 21:49:28.015" status="PASS" endtime="20161110 21:49:28.018"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:28.019">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:28.018" status="PASS" endtime="20161110 21:49:28.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:28.020">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:28.019" status="PASS" endtime="20161110 21:49:28.020"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:28.020">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:28.020" status="PASS" endtime="20161110 21:49:28.020"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:28.021">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:28.020" status="PASS" endtime="20161110 21:49:28.021"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:28.699">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:28.699">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:28.021" status="PASS" endtime="20161110 21:49:28.699"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:28.700">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:28.699" status="PASS" endtime="20161110 21:49:28.700"></status>
</kw>
<status starttime="20161110 21:49:28.018" status="PASS" endtime="20161110 21:49:28.700"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:28.787">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161110 21:49:28.787">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:28.700" status="PASS" endtime="20161110 21:49:28.787"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:28.788">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/283"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:28.788" status="PASS" endtime="20161110 21:49:28.788"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:28.789">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/283"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:28.789" status="PASS" endtime="20161110 21:49:28.789"></status>
</kw>
<status starttime="20161110 21:49:28.788" status="PASS" endtime="20161110 21:49:28.789"></status>
</kw>
<status starttime="20161110 21:49:28.787" status="PASS" endtime="20161110 21:49:28.789"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:28.789">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:28.012" status="PASS" endtime="20161110 21:49:28.789"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:28.790">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/283"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:49:28.790">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:49:28.790">${content} = {u'data': [u'/org/openbmc/records/events/283'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:49:28.789" status="PASS" endtime="20161110 21:49:28.790"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:28.790">${dimm3_event} = [u'/org/openbmc/records/events/283']</msg>
<status starttime="20161110 21:49:28.011" status="PASS" endtime="20161110 21:49:28.790"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm3_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status starttime="20161110 21:49:28.790" status="PASS" endtime="20161110 21:49:28.791"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM2_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm2_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:28.792">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints</msg>
<status starttime="20161110 21:49:28.792" status="PASS" endtime="20161110 21:49:28.792"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:28.794">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 21:49:28.793" status="PASS" endtime="20161110 21:49:28.794"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:28.794">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 21:49:28.794" status="PASS" endtime="20161110 21:49:28.795"></status>
</kw>
<status starttime="20161110 21:49:28.794" status="PASS" endtime="20161110 21:49:28.795"></status>
</kw>
<status starttime="20161110 21:49:28.793" status="PASS" endtime="20161110 21:49:28.795"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:28.796">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:28.795" status="PASS" endtime="20161110 21:49:28.796"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:28.796">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:28.796" status="PASS" endtime="20161110 21:49:28.796"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:28.797">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:28.797" status="PASS" endtime="20161110 21:49:28.797"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:28.798">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:28.797" status="PASS" endtime="20161110 21:49:28.798"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:29.502">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:29.503">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:28.798" status="PASS" endtime="20161110 21:49:29.503"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:29.504">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:29.503" status="PASS" endtime="20161110 21:49:29.504"></status>
</kw>
<status starttime="20161110 21:49:28.795" status="PASS" endtime="20161110 21:49:29.504"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:29.597">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161110 21:49:29.598">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:29.504" status="PASS" endtime="20161110 21:49:29.598"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:29.599">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/283"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:29.599" status="PASS" endtime="20161110 21:49:29.600"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:29.601">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/283"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:29.601" status="PASS" endtime="20161110 21:49:29.601"></status>
</kw>
<status starttime="20161110 21:49:29.600" status="PASS" endtime="20161110 21:49:29.602"></status>
</kw>
<status starttime="20161110 21:49:29.598" status="PASS" endtime="20161110 21:49:29.602"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:29.602">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:28.791" status="PASS" endtime="20161110 21:49:29.602"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:29.603">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/283"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:49:29.603">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:49:29.603">${content} = {u'data': [u'/org/openbmc/records/events/283'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:49:29.602" status="PASS" endtime="20161110 21:49:29.603"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:29.604">${dimm2_event} = [u'/org/openbmc/records/events/283']</msg>
<status starttime="20161110 21:49:28.791" status="PASS" endtime="20161110 21:49:29.604"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm2_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status starttime="20161110 21:49:29.604" status="PASS" endtime="20161110 21:49:29.604"></status>
</kw>
<kw type="teardown" name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 21:49:29.605" status="PASS" endtime="20161110 21:49:29.610"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:29.611" html="yes">Directory '&lt;a href="file:///tmp/root/24880/obmc-robot/logs"&gt;/tmp/root/24880/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 21:49:29.611" status="PASS" endtime="20161110 21:49:29.612"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:29.613" html="yes">File '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/test_history.txt"&gt;/tmp/root/24880/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 21:49:29.612" status="PASS" endtime="20161110 21:49:29.613"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:29.613">${exist} = True</msg>
<status starttime="20161110 21:49:29.612" status="PASS" endtime="20161110 21:49:29.613"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 21:49:29.613" status="PASS" endtime="20161110 21:49:29.617"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:29.618">${cur_time} = 2016-11-10 21:49:29:617802</msg>
<status starttime="20161110 21:49:29.618" status="PASS" endtime="20161110 21:49:29.618"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:29.618">${cur_time} = 20161110214929617802</msg>
<status starttime="20161110 21:49:29.618" status="PASS" endtime="20161110 21:49:29.618"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:29.619">${cur_time} = 20161110214929617802</msg>
<status starttime="20161110 21:49:29.617" status="PASS" endtime="20161110 21:49:29.619"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:29.619" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/test_history.txt"&gt;/tmp/root/24880/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 21:49:29.619" status="PASS" endtime="20161110 21:49:29.620"></status>
</kw>
<status starttime="20161110 21:49:29.610" status="PASS" endtime="20161110 21:49:29.620"></status>
</kw>
<status starttime="20161110 21:49:29.605" status="PASS" endtime="20161110 21:49:29.620"></status>
</kw>
<doc>***BAD PATH***
Delete an error log and verify that its
association is also removed.
</doc>
<tags>
<tag>Delete_error_log</tag>
</tags>
<status starttime="20161110 21:49:24.242" critical="yes" status="PASS" endtime="20161110 21:49:29.620"></status>
</test>
<kw type="teardown" name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status starttime="20161110 21:49:29.621" status="PASS" endtime="20161110 21:49:29.636"></status>
</kw>
<doc>This suite is used for testing eventlog association.</doc>
<status starttime="20161110 21:49:16.445" status="PASS" endtime="20161110 21:49:29.636"></status>
</suite>
<suite id="s1-s3" source="/tmp/root/24880/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s3-t1" name="power on test">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start logging to a file in /tmp so that it can</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:49:29.664">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 21:49:29.664" status="FAIL" endtime="20161110 21:49:29.664"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:29.664">${has_host} = False</msg>
<status starttime="20161110 21:49:29.664" status="PASS" endtime="20161110 21:49:29.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 21:49:29.667" status="PASS" endtime="20161110 21:49:29.667"></status>
</kw>
<status starttime="20161110 21:49:29.665" status="PASS" endtime="20161110 21:49:29.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:29.671">${port_num} = 22</msg>
<status starttime="20161110 21:49:29.671" status="PASS" endtime="20161110 21:49:29.671"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:29.671">${SSH_PORT} = 22</msg>
<status starttime="20161110 21:49:29.671" status="PASS" endtime="20161110 21:49:29.672"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:29.672">${https_num} = 443</msg>
<status starttime="20161110 21:49:29.672" status="PASS" endtime="20161110 21:49:29.672"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:29.673">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 21:49:29.672" status="PASS" endtime="20161110 21:49:29.673"></status>
</kw>
<status starttime="20161110 21:49:29.670" status="PASS" endtime="20161110 21:49:29.673"></status>
</kw>
<status starttime="20161110 21:49:29.668" status="PASS" endtime="20161110 21:49:29.673"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:49:29.674">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 21:49:29.674" status="FAIL" endtime="20161110 21:49:29.674"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:29.674">${has_port} = False</msg>
<status starttime="20161110 21:49:29.673" status="PASS" endtime="20161110 21:49:29.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 21:49:29.678" status="PASS" endtime="20161110 21:49:29.678"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 21:49:29.678" status="PASS" endtime="20161110 21:49:29.678"></status>
</kw>
<status starttime="20161110 21:49:29.677" status="PASS" endtime="20161110 21:49:29.678"></status>
</kw>
<status starttime="20161110 21:49:29.674" status="PASS" endtime="20161110 21:49:29.678"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:29.679">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 21:49:32.328">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 21:49:29.679" status="PASS" endtime="20161110 21:49:32.328"></status>
</kw>
<status starttime="20161110 21:49:29.663" status="PASS" endtime="20161110 21:49:32.329"></status>
</kw>
<kw name="Get Time Stamp" library="utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y%m%d%H%M%S%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:32.330">${cur_time} = 20161110214932329913</msg>
<status starttime="20161110 21:49:32.330" status="PASS" endtime="20161110 21:49:32.330"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:32.331">${cur_time} = 20161110214932329913</msg>
<status starttime="20161110 21:49:32.329" status="PASS" endtime="20161110 21:49:32.331"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:32.336">${LOG_TIME} = 20161110214932329913</msg>
<status starttime="20161110 21:49:32.331" status="PASS" endtime="20161110 21:49:32.336"></status>
</kw>
<kw name="Start Command" library="SSHLibrary">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>obmc-console-client &gt; ${file_path}-${LOG_TIME}_$$</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:32.336">Starting command 'obmc-console-client &gt; /tmp/obmc-console.log-20161110214932329913_$$'.</msg>
<status starttime="20161110 21:49:32.336" status="PASS" endtime="20161110 21:49:32.344"></status>
</kw>
<status starttime="20161110 21:49:29.663" status="PASS" endtime="20161110 21:49:32.344"></status>
</kw>
<kw name="BMC Power Off" library="poweroffs">
<doc>Powers off the system and makes sure that all states are</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:49:32.346">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 21:49:32.345" status="FAIL" endtime="20161110 21:49:32.346"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:32.346">${has_host} = False</msg>
<status starttime="20161110 21:49:32.345" status="PASS" endtime="20161110 21:49:32.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 21:49:32.350" status="PASS" endtime="20161110 21:49:32.350"></status>
</kw>
<status starttime="20161110 21:49:32.346" status="PASS" endtime="20161110 21:49:32.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:32.356">${port_num} = 22</msg>
<status starttime="20161110 21:49:32.355" status="PASS" endtime="20161110 21:49:32.356"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:32.356">${SSH_PORT} = 22</msg>
<status starttime="20161110 21:49:32.356" status="PASS" endtime="20161110 21:49:32.356"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:32.357">${https_num} = 443</msg>
<status starttime="20161110 21:49:32.356" status="PASS" endtime="20161110 21:49:32.357"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:32.357">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 21:49:32.357" status="PASS" endtime="20161110 21:49:32.357"></status>
</kw>
<status starttime="20161110 21:49:32.354" status="PASS" endtime="20161110 21:49:32.358"></status>
</kw>
<status starttime="20161110 21:49:32.351" status="PASS" endtime="20161110 21:49:32.358"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:49:32.358">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 21:49:32.358" status="FAIL" endtime="20161110 21:49:32.358"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:32.359">${has_port} = False</msg>
<status starttime="20161110 21:49:32.358" status="PASS" endtime="20161110 21:49:32.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 21:49:32.362" status="PASS" endtime="20161110 21:49:32.362"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 21:49:32.362" status="PASS" endtime="20161110 21:49:32.363"></status>
</kw>
<status starttime="20161110 21:49:32.362" status="PASS" endtime="20161110 21:49:32.363"></status>
</kw>
<status starttime="20161110 21:49:32.359" status="PASS" endtime="20161110 21:49:32.363"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:32.363">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 21:49:34.745">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 21:49:32.363" status="PASS" endtime="20161110 21:49:34.745"></status>
</kw>
<status starttime="20161110 21:49:32.345" status="PASS" endtime="20161110 21:49:34.746"></status>
</kw>
<kw name="Initiate Power Off" library="utils">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:34.747">@{arglist} = [ ]</msg>
<status starttime="20161110 21:49:34.747" status="PASS" endtime="20161110 21:49:34.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:34.748">${args} = {u'data': []}</msg>
<status starttime="20161110 21:49:34.747" status="PASS" endtime="20161110 21:49:34.748"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:34.750">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161110 21:49:34.749" status="PASS" endtime="20161110 21:49:34.750"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:34.752">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status starttime="20161110 21:49:34.751" status="PASS" endtime="20161110 21:49:34.752"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:34.753">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:34.753" status="PASS" endtime="20161110 21:49:34.753"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:49:34.754" status="PASS" endtime="20161110 21:49:34.754"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:34.757">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:34.756" status="PASS" endtime="20161110 21:49:34.757"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:34.757">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:34.757" status="PASS" endtime="20161110 21:49:34.757"></status>
</kw>
<status starttime="20161110 21:49:34.757" status="PASS" endtime="20161110 21:49:34.758"></status>
</kw>
<status starttime="20161110 21:49:34.755" status="PASS" endtime="20161110 21:49:34.758"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:34.758">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:34.758" status="PASS" endtime="20161110 21:49:34.759"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:34.759">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:34.759" status="PASS" endtime="20161110 21:49:34.759"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:34.760">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:34.760" status="PASS" endtime="20161110 21:49:34.760"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:34.760">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:34.760" status="PASS" endtime="20161110 21:49:34.760"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:35.344">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:35.344">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:34.761" status="PASS" endtime="20161110 21:49:35.344"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:35.345">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:35.345" status="PASS" endtime="20161110 21:49:35.346"></status>
</kw>
<status starttime="20161110 21:49:34.758" status="PASS" endtime="20161110 21:49:35.346"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:35.804">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:35.804">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:35.346" status="PASS" endtime="20161110 21:49:35.804"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:35.806">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:35.805" status="PASS" endtime="20161110 21:49:35.806"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:35.808">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:35.808" status="PASS" endtime="20161110 21:49:35.808"></status>
</kw>
<status starttime="20161110 21:49:35.807" status="PASS" endtime="20161110 21:49:35.808"></status>
</kw>
<status starttime="20161110 21:49:35.805" status="PASS" endtime="20161110 21:49:35.809"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:35.809">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:34.750" status="PASS" endtime="20161110 21:49:35.809"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:35.809">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:34.748" status="PASS" endtime="20161110 21:49:35.809"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:35.810">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:35.810" status="PASS" endtime="20161110 21:49:35.810"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw name="Is Power Off" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:35.813">@{arglist} = [ ]</msg>
<status starttime="20161110 21:49:35.812" status="PASS" endtime="20161110 21:49:35.813"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:35.814">${args} = {u'data': []}</msg>
<status starttime="20161110 21:49:35.813" status="PASS" endtime="20161110 21:49:35.814"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:35.815">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161110 21:49:35.815" status="PASS" endtime="20161110 21:49:35.815"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:35.817">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161110 21:49:35.817" status="PASS" endtime="20161110 21:49:35.817"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:35.817">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:35.817" status="PASS" endtime="20161110 21:49:35.817"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:49:35.818" status="PASS" endtime="20161110 21:49:35.818"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:35.819">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:35.819" status="PASS" endtime="20161110 21:49:35.819"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:35.820">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:35.820" status="PASS" endtime="20161110 21:49:35.820"></status>
</kw>
<status starttime="20161110 21:49:35.820" status="PASS" endtime="20161110 21:49:35.820"></status>
</kw>
<status starttime="20161110 21:49:35.818" status="PASS" endtime="20161110 21:49:35.821"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:35.821">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:35.821" status="PASS" endtime="20161110 21:49:35.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:35.822">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:35.822" status="PASS" endtime="20161110 21:49:35.822"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:35.823">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:35.823" status="PASS" endtime="20161110 21:49:35.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:35.824">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:35.823" status="PASS" endtime="20161110 21:49:35.824"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:40.679">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:40.679">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:35.824" status="PASS" endtime="20161110 21:49:40.679"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:40.681">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:40.680" status="PASS" endtime="20161110 21:49:40.681"></status>
</kw>
<status starttime="20161110 21:49:35.821" status="PASS" endtime="20161110 21:49:40.681"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:40.953">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:40.953">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:40.681" status="PASS" endtime="20161110 21:49:40.953"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:40.955">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:40.954" status="PASS" endtime="20161110 21:49:40.955"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:40.957">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:40.956" status="PASS" endtime="20161110 21:49:40.957"></status>
</kw>
<status starttime="20161110 21:49:40.956" status="PASS" endtime="20161110 21:49:40.957"></status>
</kw>
<status starttime="20161110 21:49:40.953" status="PASS" endtime="20161110 21:49:40.957"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:40.958">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:35.816" status="PASS" endtime="20161110 21:49:40.958"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:40.958">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:35.814" status="PASS" endtime="20161110 21:49:40.958"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:40.959">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:40.958" status="PASS" endtime="20161110 21:49:40.959"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:40.960">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:49:40.960">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:49:40.960">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:49:40.959" status="PASS" endtime="20161110 21:49:40.960"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:40.961">${state} = 0</msg>
<status starttime="20161110 21:49:35.812" status="PASS" endtime="20161110 21:49:40.961"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20161110 21:49:40.961" status="PASS" endtime="20161110 21:49:40.961"></status>
</kw>
<status starttime="20161110 21:49:35.811" status="PASS" endtime="20161110 21:49:40.962"></status>
</kw>
<status starttime="20161110 21:49:35.811" status="PASS" endtime="20161110 21:49:40.962"></status>
</kw>
<status starttime="20161110 21:49:34.746" status="PASS" endtime="20161110 21:49:40.962"></status>
</kw>
<kw name="Check Power Off States" library="poweroffs">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:40.964">@{arglist} = [ ]</msg>
<status starttime="20161110 21:49:40.963" status="PASS" endtime="20161110 21:49:40.964"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:40.965">${args} = {u'data': []}</msg>
<status starttime="20161110 21:49:40.964" status="PASS" endtime="20161110 21:49:40.965"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:40.966">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161110 21:49:40.966" status="PASS" endtime="20161110 21:49:40.966"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:40.968">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161110 21:49:40.967" status="PASS" endtime="20161110 21:49:40.968"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:40.968">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:40.968" status="PASS" endtime="20161110 21:49:40.968"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:49:40.968" status="PASS" endtime="20161110 21:49:40.969"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:40.972">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:40.971" status="PASS" endtime="20161110 21:49:40.972"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:40.973">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:40.973" status="PASS" endtime="20161110 21:49:40.973"></status>
</kw>
<status starttime="20161110 21:49:40.972" status="PASS" endtime="20161110 21:49:40.973"></status>
</kw>
<status starttime="20161110 21:49:40.969" status="PASS" endtime="20161110 21:49:40.973"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:40.974">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:40.974" status="PASS" endtime="20161110 21:49:40.974"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:40.975">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:40.975" status="PASS" endtime="20161110 21:49:40.975"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:40.975">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:40.975" status="PASS" endtime="20161110 21:49:40.976"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:40.976">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:40.976" status="PASS" endtime="20161110 21:49:40.976"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:41.333">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:41.333">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:40.976" status="PASS" endtime="20161110 21:49:41.333"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:41.334">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:41.334" status="PASS" endtime="20161110 21:49:41.334"></status>
</kw>
<status starttime="20161110 21:49:40.973" status="PASS" endtime="20161110 21:49:41.334"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:41.909">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:41.909">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:41.334" status="PASS" endtime="20161110 21:49:41.909"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:41.910">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:41.910" status="PASS" endtime="20161110 21:49:41.910"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:41.911">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:41.911" status="PASS" endtime="20161110 21:49:41.911"></status>
</kw>
<status starttime="20161110 21:49:41.910" status="PASS" endtime="20161110 21:49:41.911"></status>
</kw>
<status starttime="20161110 21:49:41.909" status="PASS" endtime="20161110 21:49:41.911"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:41.912">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:40.967" status="PASS" endtime="20161110 21:49:41.912"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:41.912">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:40.965" status="PASS" endtime="20161110 21:49:41.912"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:41.913">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:41.912" status="PASS" endtime="20161110 21:49:41.913"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:41.913">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:49:41.913">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:49:41.913">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:49:41.913" status="PASS" endtime="20161110 21:49:41.913"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:41.913">${power_state} = 0</msg>
<status starttime="20161110 21:49:40.963" status="PASS" endtime="20161110 21:49:41.914"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${power_state}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20161110 21:49:41.914" status="PASS" endtime="20161110 21:49:41.914"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Power State: ${power_state}</arg>
</arguments>
<status starttime="20161110 21:49:41.914" status="PASS" endtime="20161110 21:49:41.914"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/org/openbmc/sensors/host/BootProgress</arg>
<arg>value</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:41.916">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20161110 21:49:41.916" status="PASS" endtime="20161110 21:49:41.916"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:41.918">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20161110 21:49:41.917" status="PASS" endtime="20161110 21:49:41.918"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:41.919">URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20161110 21:49:41.918" status="PASS" endtime="20161110 21:49:41.919"></status>
</kw>
<status starttime="20161110 21:49:41.918" status="PASS" endtime="20161110 21:49:41.919"></status>
</kw>
<status starttime="20161110 21:49:41.917" status="PASS" endtime="20161110 21:49:41.919"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:41.920">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:41.919" status="PASS" endtime="20161110 21:49:41.920"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:41.920">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:41.920" status="PASS" endtime="20161110 21:49:41.921"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:41.921">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:41.921" status="PASS" endtime="20161110 21:49:41.921"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:41.922">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:41.921" status="PASS" endtime="20161110 21:49:41.922"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:42.757">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:42.757">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:41.922" status="PASS" endtime="20161110 21:49:42.757"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:42.758">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:42.758" status="PASS" endtime="20161110 21:49:42.758"></status>
</kw>
<status starttime="20161110 21:49:41.919" status="PASS" endtime="20161110 21:49:42.758"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:42.851">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg level="INFO" timestamp="20161110 21:49:42.852">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:42.759" status="PASS" endtime="20161110 21:49:42.852"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:42.854">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:42.853" status="PASS" endtime="20161110 21:49:42.854"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:42.855">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:42.855" status="PASS" endtime="20161110 21:49:42.856"></status>
</kw>
<status starttime="20161110 21:49:42.854" status="PASS" endtime="20161110 21:49:42.856"></status>
</kw>
<status starttime="20161110 21:49:42.852" status="PASS" endtime="20161110 21:49:42.856"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:42.856">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:41.916" status="PASS" endtime="20161110 21:49:42.857"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:42.857">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:49:42.857">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:49:42.858">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:49:42.857" status="PASS" endtime="20161110 21:49:42.858"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:42.858">${state} = Off</msg>
<status starttime="20161110 21:49:41.915" status="PASS" endtime="20161110 21:49:42.858"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:42.858">${boot_progress} = Off</msg>
<status starttime="20161110 21:49:41.915" status="PASS" endtime="20161110 21:49:42.858"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20161110 21:49:42.859" status="PASS" endtime="20161110 21:49:42.859"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Boot Progress: ${boot_progress}</arg>
</arguments>
<status starttime="20161110 21:49:42.859" status="PASS" endtime="20161110 21:49:42.860"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:42.861">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status starttime="20161110 21:49:42.860" status="PASS" endtime="20161110 21:49:42.861"></status>
</kw>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:42.862">@{arglist} = [ ]</msg>
<status starttime="20161110 21:49:42.861" status="PASS" endtime="20161110 21:49:42.862"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:42.863">${args} = {u'data': []}</msg>
<status starttime="20161110 21:49:42.862" status="PASS" endtime="20161110 21:49:42.863"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:42.864">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:49:42.864" status="PASS" endtime="20161110 21:49:42.864"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:42.866">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:49:42.866" status="PASS" endtime="20161110 21:49:42.866"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:42.867">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:42.866" status="PASS" endtime="20161110 21:49:42.867"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:49:42.867" status="PASS" endtime="20161110 21:49:42.867"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:42.869">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:42.868" status="PASS" endtime="20161110 21:49:42.869"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:42.869">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:42.869" status="PASS" endtime="20161110 21:49:42.869"></status>
</kw>
<status starttime="20161110 21:49:42.869" status="PASS" endtime="20161110 21:49:42.870"></status>
</kw>
<status starttime="20161110 21:49:42.867" status="PASS" endtime="20161110 21:49:42.870"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:42.871">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:42.870" status="PASS" endtime="20161110 21:49:42.871"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:42.871">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:42.871" status="PASS" endtime="20161110 21:49:42.872"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:42.872">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:42.872" status="PASS" endtime="20161110 21:49:42.872"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:42.873">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:42.872" status="PASS" endtime="20161110 21:49:42.873"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:43.213">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:43.213">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:42.873" status="PASS" endtime="20161110 21:49:43.213"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:43.214">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:43.214" status="PASS" endtime="20161110 21:49:43.215"></status>
</kw>
<status starttime="20161110 21:49:42.870" status="PASS" endtime="20161110 21:49:43.215"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:43.501">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:43.502">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:43.215" status="PASS" endtime="20161110 21:49:43.502"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:43.503">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_OFF", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:43.502" status="PASS" endtime="20161110 21:49:43.503"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:43.504">Response code:200, Content:{
  "data": "HOST_POWERED_OFF", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:43.504" status="PASS" endtime="20161110 21:49:43.504"></status>
</kw>
<status starttime="20161110 21:49:43.503" status="PASS" endtime="20161110 21:49:43.504"></status>
</kw>
<status starttime="20161110 21:49:43.502" status="PASS" endtime="20161110 21:49:43.505"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:43.505">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:42.865" status="PASS" endtime="20161110 21:49:43.505"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:43.505">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:42.863" status="PASS" endtime="20161110 21:49:43.505"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:43.506">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:43.505" status="PASS" endtime="20161110 21:49:43.506"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:43.507">To JSON using : content={
  "data": "HOST_POWERED_OFF", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:49:43.507">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:49:43.507">${content} = {u'data': u'HOST_POWERED_OFF', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:49:43.506" status="PASS" endtime="20161110 21:49:43.507"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:43.508">${bmc_state} = HOST_POWERED_OFF</msg>
<status starttime="20161110 21:49:42.861" status="PASS" endtime="20161110 21:49:43.508"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${states}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status starttime="20161110 21:49:43.508" status="PASS" endtime="20161110 21:49:43.508"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>BMC State: ${bmc_state}</arg>
</arguments>
<status starttime="20161110 21:49:43.509" status="PASS" endtime="20161110 21:49:43.509"></status>
</kw>
<status starttime="20161110 21:49:40.962" status="PASS" endtime="20161110 21:49:43.509"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status starttime="20161110 21:49:43.510" status="PASS" endtime="20161110 21:49:43.595"></status>
</kw>
<status starttime="20161110 21:49:32.344" status="PASS" endtime="20161110 21:49:43.596"></status>
</kw>
<kw name="BMC Power On" library="powerons">
<doc>Powers on the system, checks that the OS is functional, and</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>alias=bmc_connection</arg>
</arguments>
<assign>
<var>&amp;{bmc_connection_args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:43.598">&amp;{bmc_connection_args} = { alias=bmc_connection }</msg>
<status starttime="20161110 21:49:43.597" status="PASS" endtime="20161110 21:49:43.598"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<arguments>
<arg>&amp;{bmc_connection_args}</arg>
</arguments>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:49:43.600">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 21:49:43.599" status="FAIL" endtime="20161110 21:49:43.600"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:43.600">${has_host} = False</msg>
<status starttime="20161110 21:49:43.599" status="PASS" endtime="20161110 21:49:43.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 21:49:43.605" status="PASS" endtime="20161110 21:49:43.606"></status>
</kw>
<status starttime="20161110 21:49:43.601" status="PASS" endtime="20161110 21:49:43.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:43.611">${port_num} = 22</msg>
<status starttime="20161110 21:49:43.611" status="PASS" endtime="20161110 21:49:43.611"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:43.612">${SSH_PORT} = 22</msg>
<status starttime="20161110 21:49:43.612" status="PASS" endtime="20161110 21:49:43.612"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:43.613">${https_num} = 443</msg>
<status starttime="20161110 21:49:43.612" status="PASS" endtime="20161110 21:49:43.613"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:43.614">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 21:49:43.613" status="PASS" endtime="20161110 21:49:43.614"></status>
</kw>
<status starttime="20161110 21:49:43.610" status="PASS" endtime="20161110 21:49:43.615"></status>
</kw>
<status starttime="20161110 21:49:43.606" status="PASS" endtime="20161110 21:49:43.615"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:49:43.616">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 21:49:43.616" status="FAIL" endtime="20161110 21:49:43.616"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:43.616">${has_port} = False</msg>
<status starttime="20161110 21:49:43.615" status="PASS" endtime="20161110 21:49:43.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 21:49:43.622" status="PASS" endtime="20161110 21:49:43.622"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 21:49:43.623" status="PASS" endtime="20161110 21:49:43.623"></status>
</kw>
<status starttime="20161110 21:49:43.621" status="PASS" endtime="20161110 21:49:43.623"></status>
</kw>
<status starttime="20161110 21:49:43.617" status="PASS" endtime="20161110 21:49:43.623"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:43.624">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 21:49:46.111">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 21:49:43.624" status="PASS" endtime="20161110 21:49:46.112"></status>
</kw>
<status starttime="20161110 21:49:43.598" status="PASS" endtime="20161110 21:49:46.112"></status>
</kw>
<kw name="Initiate Power On" library="utils">
<doc>Initiates the power on and waits until the Is Power On</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:46.113">@{arglist} = [ ]</msg>
<status starttime="20161110 21:49:46.113" status="PASS" endtime="20161110 21:49:46.113"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:46.115">${args} = {u'data': []}</msg>
<status starttime="20161110 21:49:46.114" status="PASS" endtime="20161110 21:49:46.115"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>powerOn</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:46.117">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161110 21:49:46.116" status="PASS" endtime="20161110 21:49:46.117"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:46.119">${base_uri} = /org/openbmc/control/chassis0//action/powerOn</msg>
<status starttime="20161110 21:49:46.118" status="PASS" endtime="20161110 21:49:46.119"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:46.120">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:46.119" status="PASS" endtime="20161110 21:49:46.120"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:49:46.120" status="PASS" endtime="20161110 21:49:46.120"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:46.123">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:46.122" status="PASS" endtime="20161110 21:49:46.123"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:46.125">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:46.125" status="PASS" endtime="20161110 21:49:46.125"></status>
</kw>
<status starttime="20161110 21:49:46.124" status="PASS" endtime="20161110 21:49:46.126"></status>
</kw>
<status starttime="20161110 21:49:46.121" status="PASS" endtime="20161110 21:49:46.126"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:46.127">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:46.127" status="PASS" endtime="20161110 21:49:46.127"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:46.128">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:46.127" status="PASS" endtime="20161110 21:49:46.128"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:46.128">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:46.128" status="PASS" endtime="20161110 21:49:46.128"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:46.129">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:46.129" status="PASS" endtime="20161110 21:49:46.129"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:46.569">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:46.570">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:46.129" status="PASS" endtime="20161110 21:49:46.570"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:46.570">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:46.570" status="PASS" endtime="20161110 21:49:46.570"></status>
</kw>
<status starttime="20161110 21:49:46.126" status="PASS" endtime="20161110 21:49:46.571"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:47.170">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOn, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:47.170">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:46.571" status="PASS" endtime="20161110 21:49:47.170"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:47.171">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:47.171" status="PASS" endtime="20161110 21:49:47.172"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:47.172">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:47.172" status="PASS" endtime="20161110 21:49:47.172"></status>
</kw>
<status starttime="20161110 21:49:47.172" status="PASS" endtime="20161110 21:49:47.173"></status>
</kw>
<status starttime="20161110 21:49:47.170" status="PASS" endtime="20161110 21:49:47.173"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:47.173">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:46.117" status="PASS" endtime="20161110 21:49:47.173"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:47.173">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:46.115" status="PASS" endtime="20161110 21:49:47.173"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:47.174">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:47.173" status="PASS" endtime="20161110 21:49:47.174"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Power On</arg>
</arguments>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:47.175">@{arglist} = [ ]</msg>
<status starttime="20161110 21:49:47.175" status="PASS" endtime="20161110 21:49:47.175"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:47.176">${args} = {u'data': []}</msg>
<status starttime="20161110 21:49:47.176" status="PASS" endtime="20161110 21:49:47.176"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:47.177">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161110 21:49:47.177" status="PASS" endtime="20161110 21:49:47.178"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:47.179">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161110 21:49:47.179" status="PASS" endtime="20161110 21:49:47.179"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:47.180">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:47.180" status="PASS" endtime="20161110 21:49:47.180"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:49:47.181" status="PASS" endtime="20161110 21:49:47.181"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:47.184">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:47.183" status="PASS" endtime="20161110 21:49:47.184"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:47.185">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:47.185" status="PASS" endtime="20161110 21:49:47.186"></status>
</kw>
<status starttime="20161110 21:49:47.184" status="PASS" endtime="20161110 21:49:47.186"></status>
</kw>
<status starttime="20161110 21:49:47.182" status="PASS" endtime="20161110 21:49:47.186"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:47.187">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:47.187" status="PASS" endtime="20161110 21:49:47.187"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:47.188">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:47.188" status="PASS" endtime="20161110 21:49:47.188"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:47.189">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:47.188" status="PASS" endtime="20161110 21:49:47.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:47.189">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:47.189" status="PASS" endtime="20161110 21:49:47.189"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:48.329">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:48.329">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:47.190" status="PASS" endtime="20161110 21:49:48.329"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:48.330">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:48.330" status="PASS" endtime="20161110 21:49:48.331"></status>
</kw>
<status starttime="20161110 21:49:47.186" status="PASS" endtime="20161110 21:49:48.331"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:49.678">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:49:49.678">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:48.331" status="PASS" endtime="20161110 21:49:49.678"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:49.680">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:49.679" status="PASS" endtime="20161110 21:49:49.680"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:49.681">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:49:49.681" status="PASS" endtime="20161110 21:49:49.681"></status>
</kw>
<status starttime="20161110 21:49:49.680" status="PASS" endtime="20161110 21:49:49.682"></status>
</kw>
<status starttime="20161110 21:49:49.678" status="PASS" endtime="20161110 21:49:49.682"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:49.682">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:47.178" status="PASS" endtime="20161110 21:49:49.682"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:49.683">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:47.176" status="PASS" endtime="20161110 21:49:49.683"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:49.683">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:49:49.683" status="PASS" endtime="20161110 21:49:49.684"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:49.684">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:49:49.684">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:49:49.685">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:49:49.684" status="PASS" endtime="20161110 21:49:49.685"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:49:49.685">${state} = 0</msg>
<status starttime="20161110 21:49:47.175" status="PASS" endtime="20161110 21:49:49.685"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:49:49.686">0 != 1</msg>
<status starttime="20161110 21:49:49.686" status="FAIL" endtime="20161110 21:49:49.686"></status>
</kw>
<status starttime="20161110 21:49:47.174" status="FAIL" endtime="20161110 21:49:49.687"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:59.691">@{arglist} = [ ]</msg>
<status starttime="20161110 21:49:59.690" status="PASS" endtime="20161110 21:49:59.691"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:59.692">${args} = {u'data': []}</msg>
<status starttime="20161110 21:49:59.691" status="PASS" endtime="20161110 21:49:59.692"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:59.694">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161110 21:49:59.693" status="PASS" endtime="20161110 21:49:59.694"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:59.696">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161110 21:49:59.695" status="PASS" endtime="20161110 21:49:59.696"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:59.697">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:59.696" status="PASS" endtime="20161110 21:49:59.697"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:49:59.697" status="PASS" endtime="20161110 21:49:59.697"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:59.699">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:59.698" status="PASS" endtime="20161110 21:49:59.699"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:59.701">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:49:59.700" status="PASS" endtime="20161110 21:49:59.701"></status>
</kw>
<status starttime="20161110 21:49:59.700" status="PASS" endtime="20161110 21:49:59.701"></status>
</kw>
<status starttime="20161110 21:49:59.698" status="PASS" endtime="20161110 21:49:59.701"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:49:59.703">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:49:59.702" status="PASS" endtime="20161110 21:49:59.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:59.704">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:49:59.704" status="PASS" endtime="20161110 21:49:59.704"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:59.705">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:49:59.704" status="PASS" endtime="20161110 21:49:59.705"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:49:59.706">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:49:59.705" status="PASS" endtime="20161110 21:49:59.706"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:01.654">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:50:01.654">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:59.706" status="PASS" endtime="20161110 21:50:01.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:01.655">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:50:01.654" status="PASS" endtime="20161110 21:50:01.655"></status>
</kw>
<status starttime="20161110 21:49:59.702" status="PASS" endtime="20161110 21:50:01.655"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:01.982">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:50:01.982">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:01.656" status="PASS" endtime="20161110 21:50:01.982"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:01.984">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:50:01.983" status="PASS" endtime="20161110 21:50:01.984"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:01.986">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:50:01.985" status="PASS" endtime="20161110 21:50:01.986"></status>
</kw>
<status starttime="20161110 21:50:01.984" status="PASS" endtime="20161110 21:50:01.986"></status>
</kw>
<status starttime="20161110 21:50:01.983" status="PASS" endtime="20161110 21:50:01.986"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:01.987">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:59.694" status="PASS" endtime="20161110 21:50:01.987"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:01.987">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:49:59.692" status="PASS" endtime="20161110 21:50:01.987"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:01.988">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:50:01.987" status="PASS" endtime="20161110 21:50:01.989"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:01.990">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:50:01.991">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:50:01.991">${content} = {u'data': 1, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:50:01.990" status="PASS" endtime="20161110 21:50:01.991"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:01.991">${state} = 1</msg>
<status starttime="20161110 21:49:59.689" status="PASS" endtime="20161110 21:50:01.992"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<status starttime="20161110 21:50:01.992" status="PASS" endtime="20161110 21:50:01.993"></status>
</kw>
<status starttime="20161110 21:49:59.687" status="PASS" endtime="20161110 21:50:01.993"></status>
</kw>
<status starttime="20161110 21:49:47.174" status="PASS" endtime="20161110 21:50:01.993"></status>
</kw>
<status starttime="20161110 21:49:46.112" status="PASS" endtime="20161110 21:50:01.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' != '${EMPTY}'</arg>
<arg>Wait For OS</arg>
</arguments>
<status starttime="20161110 21:50:01.994" status="PASS" endtime="20161110 21:50:01.999"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>bmc_connection</arg>
</arguments>
<status starttime="20161110 21:50:01.999" status="PASS" endtime="20161110 21:50:01.999"></status>
</kw>
<kw name="Check Power On States" library="powerons">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${OS_WAIT_TIMEOUT}</arg>
<arg>10sec</arg>
<arg>Is Host Booted</arg>
</arguments>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:02.002">@{arglist} = [ ]</msg>
<status starttime="20161110 21:50:02.002" status="PASS" endtime="20161110 21:50:02.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:02.003">${args} = {u'data': []}</msg>
<status starttime="20161110 21:50:02.002" status="PASS" endtime="20161110 21:50:02.003"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:02.004">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:50:02.004" status="PASS" endtime="20161110 21:50:02.004"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:02.006">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:50:02.005" status="PASS" endtime="20161110 21:50:02.006"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:02.006">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:50:02.006" status="PASS" endtime="20161110 21:50:02.006"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:50:02.007" status="PASS" endtime="20161110 21:50:02.007"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:02.009">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:50:02.008" status="PASS" endtime="20161110 21:50:02.009"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:02.010">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:50:02.010" status="PASS" endtime="20161110 21:50:02.010"></status>
</kw>
<status starttime="20161110 21:50:02.009" status="PASS" endtime="20161110 21:50:02.010"></status>
</kw>
<status starttime="20161110 21:50:02.007" status="PASS" endtime="20161110 21:50:02.010"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:02.011">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:50:02.011" status="PASS" endtime="20161110 21:50:02.011"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:02.012">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:50:02.012" status="PASS" endtime="20161110 21:50:02.012"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:02.013">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:50:02.012" status="PASS" endtime="20161110 21:50:02.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:02.013">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:50:02.013" status="PASS" endtime="20161110 21:50:02.014"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:02.348">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:50:02.349">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:02.014" status="PASS" endtime="20161110 21:50:02.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:02.349">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:50:02.349" status="PASS" endtime="20161110 21:50:02.349"></status>
</kw>
<status starttime="20161110 21:50:02.010" status="PASS" endtime="20161110 21:50:02.349"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:03.446">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:50:03.446">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:02.350" status="PASS" endtime="20161110 21:50:03.446"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:03.448">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:50:03.447" status="PASS" endtime="20161110 21:50:03.448"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:03.450">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:50:03.449" status="PASS" endtime="20161110 21:50:03.450"></status>
</kw>
<status starttime="20161110 21:50:03.449" status="PASS" endtime="20161110 21:50:03.450"></status>
</kw>
<status starttime="20161110 21:50:03.447" status="PASS" endtime="20161110 21:50:03.450"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:03.450">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:02.004" status="PASS" endtime="20161110 21:50:03.451"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:03.451">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:02.003" status="PASS" endtime="20161110 21:50:03.451"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:03.452">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:50:03.451" status="PASS" endtime="20161110 21:50:03.452"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:03.453">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:50:03.453">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:50:03.453">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:50:03.452" status="PASS" endtime="20161110 21:50:03.453"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:03.453">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:50:02.001" status="PASS" endtime="20161110 21:50:03.453"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:50:03.455">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:50:03.454" status="FAIL" endtime="20161110 21:50:03.455"></status>
</kw>
<status starttime="20161110 21:50:02.000" status="FAIL" endtime="20161110 21:50:03.455"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:13.457">@{arglist} = [ ]</msg>
<status starttime="20161110 21:50:13.457" status="PASS" endtime="20161110 21:50:13.457"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:13.458">${args} = {u'data': []}</msg>
<status starttime="20161110 21:50:13.457" status="PASS" endtime="20161110 21:50:13.458"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:13.459">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:50:13.459" status="PASS" endtime="20161110 21:50:13.459"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:13.460">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:50:13.460" status="PASS" endtime="20161110 21:50:13.460"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:13.461">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:50:13.460" status="PASS" endtime="20161110 21:50:13.461"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:50:13.461" status="PASS" endtime="20161110 21:50:13.461"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:13.463">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:50:13.462" status="PASS" endtime="20161110 21:50:13.463"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:13.464">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:50:13.463" status="PASS" endtime="20161110 21:50:13.464"></status>
</kw>
<status starttime="20161110 21:50:13.463" status="PASS" endtime="20161110 21:50:13.464"></status>
</kw>
<status starttime="20161110 21:50:13.461" status="PASS" endtime="20161110 21:50:13.464"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:13.465">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:50:13.465" status="PASS" endtime="20161110 21:50:13.465"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:13.466">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:50:13.465" status="PASS" endtime="20161110 21:50:13.466"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:13.466">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:50:13.466" status="PASS" endtime="20161110 21:50:13.466"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:13.467">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:50:13.466" status="PASS" endtime="20161110 21:50:13.467"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:13.865">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:50:13.865">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:13.467" status="PASS" endtime="20161110 21:50:13.866"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:13.866">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:50:13.866" status="PASS" endtime="20161110 21:50:13.866"></status>
</kw>
<status starttime="20161110 21:50:13.464" status="PASS" endtime="20161110 21:50:13.867"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:14.226">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:50:14.226">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:13.867" status="PASS" endtime="20161110 21:50:14.226"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:14.228">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:50:14.227" status="PASS" endtime="20161110 21:50:14.228"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:14.230">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:50:14.229" status="PASS" endtime="20161110 21:50:14.230"></status>
</kw>
<status starttime="20161110 21:50:14.228" status="PASS" endtime="20161110 21:50:14.230"></status>
</kw>
<status starttime="20161110 21:50:14.226" status="PASS" endtime="20161110 21:50:14.230"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:14.230">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:13.459" status="PASS" endtime="20161110 21:50:14.231"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:14.231">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:13.458" status="PASS" endtime="20161110 21:50:14.231"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:14.232">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:50:14.231" status="PASS" endtime="20161110 21:50:14.232"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:14.233">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:50:14.233">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:50:14.233">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:50:14.232" status="PASS" endtime="20161110 21:50:14.233"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:14.233">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:50:13.456" status="PASS" endtime="20161110 21:50:14.233"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:50:14.234">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:50:14.234" status="FAIL" endtime="20161110 21:50:14.234"></status>
</kw>
<status starttime="20161110 21:50:13.456" status="FAIL" endtime="20161110 21:50:14.235"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:24.238">@{arglist} = [ ]</msg>
<status starttime="20161110 21:50:24.237" status="PASS" endtime="20161110 21:50:24.238"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:24.239">${args} = {u'data': []}</msg>
<status starttime="20161110 21:50:24.238" status="PASS" endtime="20161110 21:50:24.239"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:24.242">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:50:24.242" status="PASS" endtime="20161110 21:50:24.242"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:24.244">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:50:24.244" status="PASS" endtime="20161110 21:50:24.244"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:24.245">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:50:24.244" status="PASS" endtime="20161110 21:50:24.245"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:50:24.245" status="PASS" endtime="20161110 21:50:24.246"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:24.248">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:50:24.247" status="PASS" endtime="20161110 21:50:24.248"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:24.249">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:50:24.248" status="PASS" endtime="20161110 21:50:24.249"></status>
</kw>
<status starttime="20161110 21:50:24.248" status="PASS" endtime="20161110 21:50:24.249"></status>
</kw>
<status starttime="20161110 21:50:24.246" status="PASS" endtime="20161110 21:50:24.249"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:24.250">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:50:24.249" status="PASS" endtime="20161110 21:50:24.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:24.251">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:50:24.250" status="PASS" endtime="20161110 21:50:24.251"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:24.251">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:50:24.251" status="PASS" endtime="20161110 21:50:24.251"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:24.252">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:50:24.251" status="PASS" endtime="20161110 21:50:24.252"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:24.590">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:50:24.590">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:24.252" status="PASS" endtime="20161110 21:50:24.590"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:24.591">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:50:24.590" status="PASS" endtime="20161110 21:50:24.591"></status>
</kw>
<status starttime="20161110 21:50:24.249" status="PASS" endtime="20161110 21:50:24.591"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:24.873">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:50:24.873">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:24.591" status="PASS" endtime="20161110 21:50:24.873"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:24.875">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:50:24.874" status="PASS" endtime="20161110 21:50:24.875"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:24.875">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:50:24.875" status="PASS" endtime="20161110 21:50:24.875"></status>
</kw>
<status starttime="20161110 21:50:24.875" status="PASS" endtime="20161110 21:50:24.876"></status>
</kw>
<status starttime="20161110 21:50:24.874" status="PASS" endtime="20161110 21:50:24.876"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:24.876">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:24.242" status="PASS" endtime="20161110 21:50:24.876"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:24.876">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:24.239" status="PASS" endtime="20161110 21:50:24.876"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:24.877">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:50:24.876" status="PASS" endtime="20161110 21:50:24.877"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:24.877">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:50:24.877">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:50:24.878">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:50:24.877" status="PASS" endtime="20161110 21:50:24.878"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:24.878">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:50:24.236" status="PASS" endtime="20161110 21:50:24.878"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:50:24.878">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:50:24.878" status="FAIL" endtime="20161110 21:50:24.878"></status>
</kw>
<status starttime="20161110 21:50:24.236" status="FAIL" endtime="20161110 21:50:24.879"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:34.882">@{arglist} = [ ]</msg>
<status starttime="20161110 21:50:34.881" status="PASS" endtime="20161110 21:50:34.882"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:34.883">${args} = {u'data': []}</msg>
<status starttime="20161110 21:50:34.883" status="PASS" endtime="20161110 21:50:34.884"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:34.886">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:50:34.885" status="PASS" endtime="20161110 21:50:34.886"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:34.888">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:50:34.888" status="PASS" endtime="20161110 21:50:34.888"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:34.889">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:50:34.889" status="PASS" endtime="20161110 21:50:34.889"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:50:34.889" status="PASS" endtime="20161110 21:50:34.890"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:34.892">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:50:34.891" status="PASS" endtime="20161110 21:50:34.892"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:34.893">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:50:34.893" status="PASS" endtime="20161110 21:50:34.893"></status>
</kw>
<status starttime="20161110 21:50:34.892" status="PASS" endtime="20161110 21:50:34.894"></status>
</kw>
<status starttime="20161110 21:50:34.890" status="PASS" endtime="20161110 21:50:34.894"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:34.895">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:50:34.894" status="PASS" endtime="20161110 21:50:34.895"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:34.896">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:50:34.896" status="PASS" endtime="20161110 21:50:34.896"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:34.896">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:50:34.896" status="PASS" endtime="20161110 21:50:34.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:34.897">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:50:34.897" status="PASS" endtime="20161110 21:50:34.897"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:35.235">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:50:35.235">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:34.897" status="PASS" endtime="20161110 21:50:35.235"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:35.236">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:50:35.236" status="PASS" endtime="20161110 21:50:35.236"></status>
</kw>
<status starttime="20161110 21:50:34.894" status="PASS" endtime="20161110 21:50:35.237"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:35.514">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:50:35.514">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:35.237" status="PASS" endtime="20161110 21:50:35.514"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:35.516">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:50:35.515" status="PASS" endtime="20161110 21:50:35.516"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:35.518">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:50:35.517" status="PASS" endtime="20161110 21:50:35.518"></status>
</kw>
<status starttime="20161110 21:50:35.516" status="PASS" endtime="20161110 21:50:35.518"></status>
</kw>
<status starttime="20161110 21:50:35.515" status="PASS" endtime="20161110 21:50:35.518"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:35.518">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:34.886" status="PASS" endtime="20161110 21:50:35.518"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:35.519">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:34.884" status="PASS" endtime="20161110 21:50:35.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:35.520">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:50:35.520" status="PASS" endtime="20161110 21:50:35.520"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:35.522">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:50:35.522">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:50:35.522">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:50:35.521" status="PASS" endtime="20161110 21:50:35.523"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:35.523">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:50:34.880" status="PASS" endtime="20161110 21:50:35.523"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:50:35.524">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:50:35.523" status="FAIL" endtime="20161110 21:50:35.524"></status>
</kw>
<status starttime="20161110 21:50:34.879" status="FAIL" endtime="20161110 21:50:35.524"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:45.526">@{arglist} = [ ]</msg>
<status starttime="20161110 21:50:45.526" status="PASS" endtime="20161110 21:50:45.527"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:45.528">${args} = {u'data': []}</msg>
<status starttime="20161110 21:50:45.527" status="PASS" endtime="20161110 21:50:45.528"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:45.529">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:50:45.529" status="PASS" endtime="20161110 21:50:45.529"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:45.531">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:50:45.531" status="PASS" endtime="20161110 21:50:45.531"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:45.532">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:50:45.532" status="PASS" endtime="20161110 21:50:45.532"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:50:45.532" status="PASS" endtime="20161110 21:50:45.533"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:45.536">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:50:45.534" status="PASS" endtime="20161110 21:50:45.536"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:45.537">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:50:45.537" status="PASS" endtime="20161110 21:50:45.537"></status>
</kw>
<status starttime="20161110 21:50:45.536" status="PASS" endtime="20161110 21:50:45.538"></status>
</kw>
<status starttime="20161110 21:50:45.534" status="PASS" endtime="20161110 21:50:45.538"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:45.538">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:50:45.538" status="PASS" endtime="20161110 21:50:45.539"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:45.539">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:50:45.539" status="PASS" endtime="20161110 21:50:45.539"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:45.540">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:50:45.540" status="PASS" endtime="20161110 21:50:45.540"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:45.540">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:50:45.540" status="PASS" endtime="20161110 21:50:45.540"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:45.871">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:50:45.871">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:45.541" status="PASS" endtime="20161110 21:50:45.871"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:45.872">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:50:45.871" status="PASS" endtime="20161110 21:50:45.872"></status>
</kw>
<status starttime="20161110 21:50:45.538" status="PASS" endtime="20161110 21:50:45.872"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:46.163">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:50:46.163">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:45.872" status="PASS" endtime="20161110 21:50:46.163"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:46.164">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:50:46.164" status="PASS" endtime="20161110 21:50:46.164"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:46.165">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:50:46.165" status="PASS" endtime="20161110 21:50:46.165"></status>
</kw>
<status starttime="20161110 21:50:46.164" status="PASS" endtime="20161110 21:50:46.165"></status>
</kw>
<status starttime="20161110 21:50:46.163" status="PASS" endtime="20161110 21:50:46.165"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:46.166">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:45.530" status="PASS" endtime="20161110 21:50:46.166"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:46.166">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:45.528" status="PASS" endtime="20161110 21:50:46.166"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:46.166">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:50:46.166" status="PASS" endtime="20161110 21:50:46.166"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:46.167">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:50:46.167">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:50:46.167">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:50:46.167" status="PASS" endtime="20161110 21:50:46.167"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:46.167">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:50:45.525" status="PASS" endtime="20161110 21:50:46.167"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:50:46.168">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:50:46.168" status="FAIL" endtime="20161110 21:50:46.168"></status>
</kw>
<status starttime="20161110 21:50:45.525" status="FAIL" endtime="20161110 21:50:46.168"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:56.171">@{arglist} = [ ]</msg>
<status starttime="20161110 21:50:56.170" status="PASS" endtime="20161110 21:50:56.171"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:56.172">${args} = {u'data': []}</msg>
<status starttime="20161110 21:50:56.171" status="PASS" endtime="20161110 21:50:56.172"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:56.174">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:50:56.173" status="PASS" endtime="20161110 21:50:56.174"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:56.176">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:50:56.175" status="PASS" endtime="20161110 21:50:56.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:56.177">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:50:56.176" status="PASS" endtime="20161110 21:50:56.177"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:50:56.177" status="PASS" endtime="20161110 21:50:56.178"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:56.179">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:50:56.178" status="PASS" endtime="20161110 21:50:56.179"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:56.180">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:50:56.180" status="PASS" endtime="20161110 21:50:56.180"></status>
</kw>
<status starttime="20161110 21:50:56.179" status="PASS" endtime="20161110 21:50:56.180"></status>
</kw>
<status starttime="20161110 21:50:56.178" status="PASS" endtime="20161110 21:50:56.180"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:56.181">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:50:56.181" status="PASS" endtime="20161110 21:50:56.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:56.182">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:50:56.182" status="PASS" endtime="20161110 21:50:56.182"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:56.183">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:50:56.182" status="PASS" endtime="20161110 21:50:56.183"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:56.183">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:50:56.183" status="PASS" endtime="20161110 21:50:56.183"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:56.519">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:50:56.519">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:56.183" status="PASS" endtime="20161110 21:50:56.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:56.520">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:50:56.519" status="PASS" endtime="20161110 21:50:56.520"></status>
</kw>
<status starttime="20161110 21:50:56.180" status="PASS" endtime="20161110 21:50:56.520"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:56.798">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:50:56.798">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:56.521" status="PASS" endtime="20161110 21:50:56.799"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:56.800">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:50:56.800" status="PASS" endtime="20161110 21:50:56.800"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:56.802">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:50:56.801" status="PASS" endtime="20161110 21:50:56.802"></status>
</kw>
<status starttime="20161110 21:50:56.801" status="PASS" endtime="20161110 21:50:56.802"></status>
</kw>
<status starttime="20161110 21:50:56.799" status="PASS" endtime="20161110 21:50:56.802"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:56.803">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:56.174" status="PASS" endtime="20161110 21:50:56.803"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:56.803">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:50:56.172" status="PASS" endtime="20161110 21:50:56.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:50:56.804">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:50:56.803" status="PASS" endtime="20161110 21:50:56.804"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:50:56.805">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:50:56.805">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:50:56.805">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:50:56.804" status="PASS" endtime="20161110 21:50:56.805"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:50:56.806">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:50:56.170" status="PASS" endtime="20161110 21:50:56.806"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:50:56.807">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:50:56.806" status="FAIL" endtime="20161110 21:50:56.807"></status>
</kw>
<status starttime="20161110 21:50:56.169" status="FAIL" endtime="20161110 21:50:56.807"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:06.809">@{arglist} = [ ]</msg>
<status starttime="20161110 21:51:06.809" status="PASS" endtime="20161110 21:51:06.809"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:06.810">${args} = {u'data': []}</msg>
<status starttime="20161110 21:51:06.809" status="PASS" endtime="20161110 21:51:06.810"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:06.812">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:51:06.811" status="PASS" endtime="20161110 21:51:06.812"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:06.814">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:51:06.813" status="PASS" endtime="20161110 21:51:06.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:06.815">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:51:06.814" status="PASS" endtime="20161110 21:51:06.815"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:51:06.815" status="PASS" endtime="20161110 21:51:06.816"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:06.818">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:51:06.817" status="PASS" endtime="20161110 21:51:06.818"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:06.819">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:51:06.819" status="PASS" endtime="20161110 21:51:06.819"></status>
</kw>
<status starttime="20161110 21:51:06.818" status="PASS" endtime="20161110 21:51:06.819"></status>
</kw>
<status starttime="20161110 21:51:06.816" status="PASS" endtime="20161110 21:51:06.819"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:06.820">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:51:06.820" status="PASS" endtime="20161110 21:51:06.821"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:06.821">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:51:06.821" status="PASS" endtime="20161110 21:51:06.821"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:06.822">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:51:06.821" status="PASS" endtime="20161110 21:51:06.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:06.822">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:51:06.822" status="PASS" endtime="20161110 21:51:06.822"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:08.770">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:51:08.770">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:06.822" status="PASS" endtime="20161110 21:51:08.770"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:08.771">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:51:08.771" status="PASS" endtime="20161110 21:51:08.771"></status>
</kw>
<status starttime="20161110 21:51:06.820" status="PASS" endtime="20161110 21:51:08.771"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:09.059">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:51:09.059">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:08.771" status="PASS" endtime="20161110 21:51:09.059"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:09.060">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:51:09.060" status="PASS" endtime="20161110 21:51:09.060"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:09.062">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:51:09.061" status="PASS" endtime="20161110 21:51:09.062"></status>
</kw>
<status starttime="20161110 21:51:09.061" status="PASS" endtime="20161110 21:51:09.062"></status>
</kw>
<status starttime="20161110 21:51:09.059" status="PASS" endtime="20161110 21:51:09.062"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:51:09.062">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:06.812" status="PASS" endtime="20161110 21:51:09.062"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:51:09.062">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:06.810" status="PASS" endtime="20161110 21:51:09.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:09.063">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:51:09.063" status="PASS" endtime="20161110 21:51:09.063"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:09.064">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:51:09.064">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:51:09.064">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:51:09.064" status="PASS" endtime="20161110 21:51:09.064"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:51:09.065">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:51:06.808" status="PASS" endtime="20161110 21:51:09.065"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:51:09.065">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:51:09.065" status="FAIL" endtime="20161110 21:51:09.065"></status>
</kw>
<status starttime="20161110 21:51:06.807" status="FAIL" endtime="20161110 21:51:09.066"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:19.068">@{arglist} = [ ]</msg>
<status starttime="20161110 21:51:19.068" status="PASS" endtime="20161110 21:51:19.068"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:19.069">${args} = {u'data': []}</msg>
<status starttime="20161110 21:51:19.068" status="PASS" endtime="20161110 21:51:19.069"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:19.071">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:51:19.071" status="PASS" endtime="20161110 21:51:19.071"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:19.073">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:51:19.073" status="PASS" endtime="20161110 21:51:19.073"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:19.074">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:51:19.074" status="PASS" endtime="20161110 21:51:19.074"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:51:19.075" status="PASS" endtime="20161110 21:51:19.075"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:19.077">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:51:19.076" status="PASS" endtime="20161110 21:51:19.077"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:19.079">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:51:19.078" status="PASS" endtime="20161110 21:51:19.079"></status>
</kw>
<status starttime="20161110 21:51:19.078" status="PASS" endtime="20161110 21:51:19.079"></status>
</kw>
<status starttime="20161110 21:51:19.075" status="PASS" endtime="20161110 21:51:19.079"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:19.080">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:51:19.079" status="PASS" endtime="20161110 21:51:19.080"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:19.081">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:51:19.080" status="PASS" endtime="20161110 21:51:19.081"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:19.081">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:51:19.081" status="PASS" endtime="20161110 21:51:19.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:19.082">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:51:19.081" status="PASS" endtime="20161110 21:51:19.082"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:19.607">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:51:19.607">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:19.082" status="PASS" endtime="20161110 21:51:19.607"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:19.608">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:51:19.607" status="PASS" endtime="20161110 21:51:19.608"></status>
</kw>
<status starttime="20161110 21:51:19.079" status="PASS" endtime="20161110 21:51:19.608"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:19.927">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:51:19.927">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:19.608" status="PASS" endtime="20161110 21:51:19.927"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:19.929">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:51:19.928" status="PASS" endtime="20161110 21:51:19.929"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:19.930">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:51:19.930" status="PASS" endtime="20161110 21:51:19.930"></status>
</kw>
<status starttime="20161110 21:51:19.929" status="PASS" endtime="20161110 21:51:19.931"></status>
</kw>
<status starttime="20161110 21:51:19.928" status="PASS" endtime="20161110 21:51:19.931"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:51:19.931">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:19.072" status="PASS" endtime="20161110 21:51:19.931"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:51:19.932">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:19.069" status="PASS" endtime="20161110 21:51:19.932"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:19.933">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:51:19.932" status="PASS" endtime="20161110 21:51:19.933"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:19.934">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:51:19.934">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:51:19.934">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:51:19.933" status="PASS" endtime="20161110 21:51:19.934"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:51:19.934">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:51:19.067" status="PASS" endtime="20161110 21:51:19.935"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:51:19.935">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:51:19.935" status="FAIL" endtime="20161110 21:51:19.936"></status>
</kw>
<status starttime="20161110 21:51:19.066" status="FAIL" endtime="20161110 21:51:19.936"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:29.949">@{arglist} = [ ]</msg>
<status starttime="20161110 21:51:29.949" status="PASS" endtime="20161110 21:51:29.949"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:29.950">${args} = {u'data': []}</msg>
<status starttime="20161110 21:51:29.950" status="PASS" endtime="20161110 21:51:29.950"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:29.951">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:51:29.951" status="PASS" endtime="20161110 21:51:29.951"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:29.952">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:51:29.952" status="PASS" endtime="20161110 21:51:29.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:29.953">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:51:29.952" status="PASS" endtime="20161110 21:51:29.953"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:51:29.953" status="PASS" endtime="20161110 21:51:29.953"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:29.954">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:51:29.954" status="PASS" endtime="20161110 21:51:29.955"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:29.955">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:51:29.955" status="PASS" endtime="20161110 21:51:29.955"></status>
</kw>
<status starttime="20161110 21:51:29.955" status="PASS" endtime="20161110 21:51:29.956"></status>
</kw>
<status starttime="20161110 21:51:29.953" status="PASS" endtime="20161110 21:51:29.956"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:29.956">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:51:29.956" status="PASS" endtime="20161110 21:51:29.957"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:29.958">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:51:29.957" status="PASS" endtime="20161110 21:51:29.958"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:29.958">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:51:29.958" status="PASS" endtime="20161110 21:51:29.958"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:29.959">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:51:29.959" status="PASS" endtime="20161110 21:51:29.959"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:30.288">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:51:30.288">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:29.959" status="PASS" endtime="20161110 21:51:30.288"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:30.289">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:51:30.288" status="PASS" endtime="20161110 21:51:30.289"></status>
</kw>
<status starttime="20161110 21:51:29.956" status="PASS" endtime="20161110 21:51:30.289"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:30.748">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:51:30.748">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:30.289" status="PASS" endtime="20161110 21:51:30.748"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:30.750">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:51:30.749" status="PASS" endtime="20161110 21:51:30.750"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:30.752">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:51:30.752" status="PASS" endtime="20161110 21:51:30.753"></status>
</kw>
<status starttime="20161110 21:51:30.751" status="PASS" endtime="20161110 21:51:30.753"></status>
</kw>
<status starttime="20161110 21:51:30.749" status="PASS" endtime="20161110 21:51:30.753"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:51:30.753">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:29.951" status="PASS" endtime="20161110 21:51:30.753"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:51:30.754">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:29.950" status="PASS" endtime="20161110 21:51:30.754"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:30.755">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:51:30.754" status="PASS" endtime="20161110 21:51:30.755"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:30.755">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:51:30.756">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:51:30.756">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:51:30.755" status="PASS" endtime="20161110 21:51:30.756"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:51:30.756">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:51:29.949" status="PASS" endtime="20161110 21:51:30.756"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:51:30.758">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:51:30.757" status="FAIL" endtime="20161110 21:51:30.758"></status>
</kw>
<status starttime="20161110 21:51:29.948" status="FAIL" endtime="20161110 21:51:30.758"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:40.761">@{arglist} = [ ]</msg>
<status starttime="20161110 21:51:40.760" status="PASS" endtime="20161110 21:51:40.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:40.762">${args} = {u'data': []}</msg>
<status starttime="20161110 21:51:40.761" status="PASS" endtime="20161110 21:51:40.762"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:40.764">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:51:40.763" status="PASS" endtime="20161110 21:51:40.764"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:40.766">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:51:40.765" status="PASS" endtime="20161110 21:51:40.766"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:40.767">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:51:40.766" status="PASS" endtime="20161110 21:51:40.767"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:51:40.767" status="PASS" endtime="20161110 21:51:40.768"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:40.770">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:51:40.769" status="PASS" endtime="20161110 21:51:40.771"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:40.772">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:51:40.772" status="PASS" endtime="20161110 21:51:40.772"></status>
</kw>
<status starttime="20161110 21:51:40.771" status="PASS" endtime="20161110 21:51:40.772"></status>
</kw>
<status starttime="20161110 21:51:40.768" status="PASS" endtime="20161110 21:51:40.772"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:40.774">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:51:40.773" status="PASS" endtime="20161110 21:51:40.775"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:40.775">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:51:40.775" status="PASS" endtime="20161110 21:51:40.775"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:40.776">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:51:40.776" status="PASS" endtime="20161110 21:51:40.776"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:40.777">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:51:40.777" status="PASS" endtime="20161110 21:51:40.777"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:42.102">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:51:42.102">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:40.778" status="PASS" endtime="20161110 21:51:42.102"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:42.103">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:51:42.102" status="PASS" endtime="20161110 21:51:42.103"></status>
</kw>
<status starttime="20161110 21:51:40.773" status="PASS" endtime="20161110 21:51:42.103"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:42.853">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:51:42.853">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:42.104" status="PASS" endtime="20161110 21:51:42.853"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:42.855">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:51:42.854" status="PASS" endtime="20161110 21:51:42.855"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:42.856">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:51:42.856" status="PASS" endtime="20161110 21:51:42.856"></status>
</kw>
<status starttime="20161110 21:51:42.855" status="PASS" endtime="20161110 21:51:42.856"></status>
</kw>
<status starttime="20161110 21:51:42.853" status="PASS" endtime="20161110 21:51:42.857"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:51:42.857">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:40.764" status="PASS" endtime="20161110 21:51:42.857"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:51:42.857">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:40.762" status="PASS" endtime="20161110 21:51:42.858"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:42.859">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:51:42.858" status="PASS" endtime="20161110 21:51:42.859"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:42.859">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:51:42.860">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:51:42.860">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:51:42.859" status="PASS" endtime="20161110 21:51:42.860"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:51:42.860">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:51:40.760" status="PASS" endtime="20161110 21:51:42.860"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:51:42.861">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:51:42.861" status="FAIL" endtime="20161110 21:51:42.862"></status>
</kw>
<status starttime="20161110 21:51:40.759" status="FAIL" endtime="20161110 21:51:42.862"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:52.865">@{arglist} = [ ]</msg>
<status starttime="20161110 21:51:52.864" status="PASS" endtime="20161110 21:51:52.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:52.866">${args} = {u'data': []}</msg>
<status starttime="20161110 21:51:52.865" status="PASS" endtime="20161110 21:51:52.866"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:52.867">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:51:52.866" status="PASS" endtime="20161110 21:51:52.867"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:52.868">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:51:52.867" status="PASS" endtime="20161110 21:51:52.868"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:52.868">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:51:52.868" status="PASS" endtime="20161110 21:51:52.868"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:51:52.868" status="PASS" endtime="20161110 21:51:52.869"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:52.870">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:51:52.869" status="PASS" endtime="20161110 21:51:52.870"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:52.871">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:51:52.871" status="PASS" endtime="20161110 21:51:52.871"></status>
</kw>
<status starttime="20161110 21:51:52.870" status="PASS" endtime="20161110 21:51:52.871"></status>
</kw>
<status starttime="20161110 21:51:52.869" status="PASS" endtime="20161110 21:51:52.871"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:52.872">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:51:52.872" status="PASS" endtime="20161110 21:51:52.873"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:52.873">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:51:52.873" status="PASS" endtime="20161110 21:51:52.873"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:52.874">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:51:52.873" status="PASS" endtime="20161110 21:51:52.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:52.874">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:51:52.874" status="PASS" endtime="20161110 21:51:52.874"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:53.207">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:51:53.208">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:52.874" status="PASS" endtime="20161110 21:51:53.208"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:53.209">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:51:53.208" status="PASS" endtime="20161110 21:51:53.209"></status>
</kw>
<status starttime="20161110 21:51:52.871" status="PASS" endtime="20161110 21:51:53.209"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:53.490">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:51:53.490">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:53.209" status="PASS" endtime="20161110 21:51:53.491"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:53.492">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:51:53.491" status="PASS" endtime="20161110 21:51:53.492"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:53.493">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:51:53.493" status="PASS" endtime="20161110 21:51:53.493"></status>
</kw>
<status starttime="20161110 21:51:53.492" status="PASS" endtime="20161110 21:51:53.494"></status>
</kw>
<status starttime="20161110 21:51:53.491" status="PASS" endtime="20161110 21:51:53.494"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:51:53.494">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:52.867" status="PASS" endtime="20161110 21:51:53.494"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:51:53.494">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:51:52.866" status="PASS" endtime="20161110 21:51:53.494"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:51:53.495">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:51:53.495" status="PASS" endtime="20161110 21:51:53.495"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:51:53.496">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:51:53.496">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:51:53.496">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:51:53.496" status="PASS" endtime="20161110 21:51:53.496"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:51:53.497">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:51:52.863" status="PASS" endtime="20161110 21:51:53.497"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:51:53.498">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:51:53.497" status="FAIL" endtime="20161110 21:51:53.498"></status>
</kw>
<status starttime="20161110 21:51:52.863" status="FAIL" endtime="20161110 21:51:53.498"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:03.500">@{arglist} = [ ]</msg>
<status starttime="20161110 21:52:03.500" status="PASS" endtime="20161110 21:52:03.500"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:03.501">${args} = {u'data': []}</msg>
<status starttime="20161110 21:52:03.501" status="PASS" endtime="20161110 21:52:03.501"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:03.503">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:52:03.503" status="PASS" endtime="20161110 21:52:03.503"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:03.505">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:52:03.505" status="PASS" endtime="20161110 21:52:03.505"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:03.506">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:52:03.506" status="PASS" endtime="20161110 21:52:03.506"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:52:03.507" status="PASS" endtime="20161110 21:52:03.507"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:03.509">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:52:03.508" status="PASS" endtime="20161110 21:52:03.509"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:03.510">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:52:03.510" status="PASS" endtime="20161110 21:52:03.510"></status>
</kw>
<status starttime="20161110 21:52:03.509" status="PASS" endtime="20161110 21:52:03.511"></status>
</kw>
<status starttime="20161110 21:52:03.507" status="PASS" endtime="20161110 21:52:03.511"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:03.511">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:52:03.511" status="PASS" endtime="20161110 21:52:03.512"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:03.512">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:52:03.512" status="PASS" endtime="20161110 21:52:03.512"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:03.513">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:52:03.513" status="PASS" endtime="20161110 21:52:03.513"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:03.514">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:52:03.513" status="PASS" endtime="20161110 21:52:03.514"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:03.850">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:52:03.850">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:03.514" status="PASS" endtime="20161110 21:52:03.850"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:03.851">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:52:03.851" status="PASS" endtime="20161110 21:52:03.851"></status>
</kw>
<status starttime="20161110 21:52:03.511" status="PASS" endtime="20161110 21:52:03.851"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:04.133">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:52:04.133">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:03.852" status="PASS" endtime="20161110 21:52:04.133"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:04.135">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:52:04.134" status="PASS" endtime="20161110 21:52:04.135"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:04.137">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:52:04.136" status="PASS" endtime="20161110 21:52:04.137"></status>
</kw>
<status starttime="20161110 21:52:04.136" status="PASS" endtime="20161110 21:52:04.137"></status>
</kw>
<status starttime="20161110 21:52:04.133" status="PASS" endtime="20161110 21:52:04.137"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:52:04.137">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:03.504" status="PASS" endtime="20161110 21:52:04.138"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:52:04.138">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:03.502" status="PASS" endtime="20161110 21:52:04.138"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:04.139">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:52:04.138" status="PASS" endtime="20161110 21:52:04.139"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:04.139">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:52:04.140">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:52:04.140">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:52:04.139" status="PASS" endtime="20161110 21:52:04.140"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:52:04.140">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:52:03.499" status="PASS" endtime="20161110 21:52:04.140"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:52:04.141">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:52:04.140" status="FAIL" endtime="20161110 21:52:04.141"></status>
</kw>
<status starttime="20161110 21:52:03.499" status="FAIL" endtime="20161110 21:52:04.141"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:14.143">@{arglist} = [ ]</msg>
<status starttime="20161110 21:52:14.143" status="PASS" endtime="20161110 21:52:14.143"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:14.144">${args} = {u'data': []}</msg>
<status starttime="20161110 21:52:14.144" status="PASS" endtime="20161110 21:52:14.145"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:14.147">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:52:14.146" status="PASS" endtime="20161110 21:52:14.147"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:14.149">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:52:14.148" status="PASS" endtime="20161110 21:52:14.149"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:14.150">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:52:14.149" status="PASS" endtime="20161110 21:52:14.150"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:52:14.150" status="PASS" endtime="20161110 21:52:14.151"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:14.153">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:52:14.152" status="PASS" endtime="20161110 21:52:14.154"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:14.155">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:52:14.155" status="PASS" endtime="20161110 21:52:14.155"></status>
</kw>
<status starttime="20161110 21:52:14.154" status="PASS" endtime="20161110 21:52:14.155"></status>
</kw>
<status starttime="20161110 21:52:14.151" status="PASS" endtime="20161110 21:52:14.155"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:14.157">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:52:14.156" status="PASS" endtime="20161110 21:52:14.158"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:14.158">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:52:14.158" status="PASS" endtime="20161110 21:52:14.158"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:14.159">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:52:14.159" status="PASS" endtime="20161110 21:52:14.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:14.160">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:52:14.160" status="PASS" endtime="20161110 21:52:14.160"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:21.621">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:52:21.622">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:14.160" status="PASS" endtime="20161110 21:52:21.622"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:21.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:52:21.622" status="PASS" endtime="20161110 21:52:21.623"></status>
</kw>
<status starttime="20161110 21:52:14.156" status="PASS" endtime="20161110 21:52:21.623"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:21.950">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:52:21.950">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:21.624" status="PASS" endtime="20161110 21:52:21.950"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:21.952">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:52:21.951" status="PASS" endtime="20161110 21:52:21.952"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:21.953">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:52:21.953" status="PASS" endtime="20161110 21:52:21.953"></status>
</kw>
<status starttime="20161110 21:52:21.952" status="PASS" endtime="20161110 21:52:21.953"></status>
</kw>
<status starttime="20161110 21:52:21.950" status="PASS" endtime="20161110 21:52:21.953"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:52:21.954">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:14.147" status="PASS" endtime="20161110 21:52:21.954"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:52:21.954">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:14.145" status="PASS" endtime="20161110 21:52:21.954"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:21.955">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:52:21.954" status="PASS" endtime="20161110 21:52:21.955"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:21.956">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:52:21.956">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:52:21.956">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:52:21.955" status="PASS" endtime="20161110 21:52:21.956"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:52:21.957">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:52:14.142" status="PASS" endtime="20161110 21:52:21.957"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:52:21.958">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:52:21.957" status="FAIL" endtime="20161110 21:52:21.958"></status>
</kw>
<status starttime="20161110 21:52:14.141" status="FAIL" endtime="20161110 21:52:21.958"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:31.960">@{arglist} = [ ]</msg>
<status starttime="20161110 21:52:31.959" status="PASS" endtime="20161110 21:52:31.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:31.961">${args} = {u'data': []}</msg>
<status starttime="20161110 21:52:31.960" status="PASS" endtime="20161110 21:52:31.961"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:31.962">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:52:31.962" status="PASS" endtime="20161110 21:52:31.962"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:31.964">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:52:31.964" status="PASS" endtime="20161110 21:52:31.964"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:31.965">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:52:31.964" status="PASS" endtime="20161110 21:52:31.965"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:52:31.965" status="PASS" endtime="20161110 21:52:31.966"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:31.968">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:52:31.967" status="PASS" endtime="20161110 21:52:31.968"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:31.969">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:52:31.969" status="PASS" endtime="20161110 21:52:31.969"></status>
</kw>
<status starttime="20161110 21:52:31.968" status="PASS" endtime="20161110 21:52:31.969"></status>
</kw>
<status starttime="20161110 21:52:31.966" status="PASS" endtime="20161110 21:52:31.970"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:31.970">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:52:31.970" status="PASS" endtime="20161110 21:52:31.971"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:31.972">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:52:31.971" status="PASS" endtime="20161110 21:52:31.972"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:31.972">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:52:31.972" status="PASS" endtime="20161110 21:52:31.972"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:31.973">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:52:31.972" status="PASS" endtime="20161110 21:52:31.973"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:32.312">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:52:32.312">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:31.973" status="PASS" endtime="20161110 21:52:32.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:32.313">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:52:32.312" status="PASS" endtime="20161110 21:52:32.313"></status>
</kw>
<status starttime="20161110 21:52:31.970" status="PASS" endtime="20161110 21:52:32.313"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:32.635">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:52:32.635">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:32.313" status="PASS" endtime="20161110 21:52:32.635"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:32.636">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:52:32.636" status="PASS" endtime="20161110 21:52:32.636"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:32.637">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:52:32.637" status="PASS" endtime="20161110 21:52:32.637"></status>
</kw>
<status starttime="20161110 21:52:32.636" status="PASS" endtime="20161110 21:52:32.637"></status>
</kw>
<status starttime="20161110 21:52:32.635" status="PASS" endtime="20161110 21:52:32.637"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:52:32.637">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:31.963" status="PASS" endtime="20161110 21:52:32.637"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:52:32.638">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:31.961" status="PASS" endtime="20161110 21:52:32.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:32.638">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:52:32.638" status="PASS" endtime="20161110 21:52:32.638"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:32.639">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:52:32.639">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:52:32.639">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:52:32.638" status="PASS" endtime="20161110 21:52:32.639"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:52:32.639">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:52:31.959" status="PASS" endtime="20161110 21:52:32.639"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:52:32.640">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:52:32.639" status="FAIL" endtime="20161110 21:52:32.640"></status>
</kw>
<status starttime="20161110 21:52:31.958" status="FAIL" endtime="20161110 21:52:32.640"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:42.643">@{arglist} = [ ]</msg>
<status starttime="20161110 21:52:42.643" status="PASS" endtime="20161110 21:52:42.643"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:42.645">${args} = {u'data': []}</msg>
<status starttime="20161110 21:52:42.644" status="PASS" endtime="20161110 21:52:42.645"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:42.647">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:52:42.646" status="PASS" endtime="20161110 21:52:42.647"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:42.650">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:52:42.649" status="PASS" endtime="20161110 21:52:42.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:42.652">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:52:42.651" status="PASS" endtime="20161110 21:52:42.652"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:52:42.652" status="PASS" endtime="20161110 21:52:42.653"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:42.656">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:52:42.655" status="PASS" endtime="20161110 21:52:42.656"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:42.658">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:52:42.657" status="PASS" endtime="20161110 21:52:42.658"></status>
</kw>
<status starttime="20161110 21:52:42.657" status="PASS" endtime="20161110 21:52:42.658"></status>
</kw>
<status starttime="20161110 21:52:42.653" status="PASS" endtime="20161110 21:52:42.658"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:42.660">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:52:42.659" status="PASS" endtime="20161110 21:52:42.660"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:42.661">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:52:42.660" status="PASS" endtime="20161110 21:52:42.661"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:42.661">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:52:42.661" status="PASS" endtime="20161110 21:52:42.661"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:42.662">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:52:42.661" status="PASS" endtime="20161110 21:52:42.662"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:43.002">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:52:43.002">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:42.662" status="PASS" endtime="20161110 21:52:43.002"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:43.003">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:52:43.003" status="PASS" endtime="20161110 21:52:43.003"></status>
</kw>
<status starttime="20161110 21:52:42.659" status="PASS" endtime="20161110 21:52:43.004"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:43.288">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:52:43.288">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:43.004" status="PASS" endtime="20161110 21:52:43.288"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:43.290">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:52:43.289" status="PASS" endtime="20161110 21:52:43.290"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:43.292">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:52:43.291" status="PASS" endtime="20161110 21:52:43.292"></status>
</kw>
<status starttime="20161110 21:52:43.290" status="PASS" endtime="20161110 21:52:43.292"></status>
</kw>
<status starttime="20161110 21:52:43.288" status="PASS" endtime="20161110 21:52:43.292"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:52:43.292">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:42.647" status="PASS" endtime="20161110 21:52:43.292"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:52:43.293">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:42.645" status="PASS" endtime="20161110 21:52:43.293"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:43.294">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:52:43.293" status="PASS" endtime="20161110 21:52:43.294"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:43.294">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:52:43.294">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:52:43.295">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:52:43.294" status="PASS" endtime="20161110 21:52:43.295"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:52:43.295">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:52:42.642" status="PASS" endtime="20161110 21:52:43.295"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:52:43.296">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:52:43.295" status="FAIL" endtime="20161110 21:52:43.296"></status>
</kw>
<status starttime="20161110 21:52:42.641" status="FAIL" endtime="20161110 21:52:43.296"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:53.299">@{arglist} = [ ]</msg>
<status starttime="20161110 21:52:53.298" status="PASS" endtime="20161110 21:52:53.299"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:53.300">${args} = {u'data': []}</msg>
<status starttime="20161110 21:52:53.299" status="PASS" endtime="20161110 21:52:53.300"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:53.301">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:52:53.301" status="PASS" endtime="20161110 21:52:53.301"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:53.303">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:52:53.303" status="PASS" endtime="20161110 21:52:53.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:53.304">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:52:53.304" status="PASS" endtime="20161110 21:52:53.304"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:52:53.304" status="PASS" endtime="20161110 21:52:53.305"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:53.307">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:52:53.306" status="PASS" endtime="20161110 21:52:53.307"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:53.309">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:52:53.308" status="PASS" endtime="20161110 21:52:53.309"></status>
</kw>
<status starttime="20161110 21:52:53.308" status="PASS" endtime="20161110 21:52:53.309"></status>
</kw>
<status starttime="20161110 21:52:53.305" status="PASS" endtime="20161110 21:52:53.309"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:53.310">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:52:53.310" status="PASS" endtime="20161110 21:52:53.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:53.311">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:52:53.311" status="PASS" endtime="20161110 21:52:53.311"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:53.312">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:52:53.311" status="PASS" endtime="20161110 21:52:53.312"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:53.313">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:52:53.313" status="PASS" endtime="20161110 21:52:53.313"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:53.651">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:52:53.651">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:53.313" status="PASS" endtime="20161110 21:52:53.651"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:53.652">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:52:53.651" status="PASS" endtime="20161110 21:52:53.652"></status>
</kw>
<status starttime="20161110 21:52:53.309" status="PASS" endtime="20161110 21:52:53.652"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:54.455">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:52:54.455">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:53.652" status="PASS" endtime="20161110 21:52:54.455"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:54.457">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:52:54.456" status="PASS" endtime="20161110 21:52:54.457"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:54.458">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:52:54.458" status="PASS" endtime="20161110 21:52:54.459"></status>
</kw>
<status starttime="20161110 21:52:54.457" status="PASS" endtime="20161110 21:52:54.459"></status>
</kw>
<status starttime="20161110 21:52:54.455" status="PASS" endtime="20161110 21:52:54.459"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:52:54.459">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:53.302" status="PASS" endtime="20161110 21:52:54.459"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:52:54.460">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:52:53.300" status="PASS" endtime="20161110 21:52:54.460"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:52:54.461">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:52:54.460" status="PASS" endtime="20161110 21:52:54.461"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:52:54.462">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:52:54.462">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:52:54.462">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:52:54.462" status="PASS" endtime="20161110 21:52:54.462"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:52:54.463">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:52:53.298" status="PASS" endtime="20161110 21:52:54.463"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:52:54.464">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:52:54.463" status="FAIL" endtime="20161110 21:52:54.464"></status>
</kw>
<status starttime="20161110 21:52:53.297" status="FAIL" endtime="20161110 21:52:54.464"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:04.467">@{arglist} = [ ]</msg>
<status starttime="20161110 21:53:04.466" status="PASS" endtime="20161110 21:53:04.467"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:04.468">${args} = {u'data': []}</msg>
<status starttime="20161110 21:53:04.467" status="PASS" endtime="20161110 21:53:04.468"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:04.470">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:53:04.469" status="PASS" endtime="20161110 21:53:04.470"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:04.472">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:53:04.471" status="PASS" endtime="20161110 21:53:04.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:04.473">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:53:04.472" status="PASS" endtime="20161110 21:53:04.473"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:53:04.473" status="PASS" endtime="20161110 21:53:04.474"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:04.478">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:53:04.475" status="PASS" endtime="20161110 21:53:04.478"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:04.479">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:53:04.479" status="PASS" endtime="20161110 21:53:04.479"></status>
</kw>
<status starttime="20161110 21:53:04.478" status="PASS" endtime="20161110 21:53:04.480"></status>
</kw>
<status starttime="20161110 21:53:04.474" status="PASS" endtime="20161110 21:53:04.480"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:04.481">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:53:04.481" status="PASS" endtime="20161110 21:53:04.481"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:04.482">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:53:04.481" status="PASS" endtime="20161110 21:53:04.482"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:04.482">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:53:04.482" status="PASS" endtime="20161110 21:53:04.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:04.483">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:53:04.482" status="PASS" endtime="20161110 21:53:04.483"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:04.811">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:53:04.811">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:04.483" status="PASS" endtime="20161110 21:53:04.811"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:04.812">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:53:04.811" status="PASS" endtime="20161110 21:53:04.812"></status>
</kw>
<status starttime="20161110 21:53:04.480" status="PASS" endtime="20161110 21:53:04.812"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:05.093">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:53:05.094">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:04.812" status="PASS" endtime="20161110 21:53:05.094"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:05.096">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:53:05.095" status="PASS" endtime="20161110 21:53:05.096"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:05.097">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:53:05.097" status="PASS" endtime="20161110 21:53:05.097"></status>
</kw>
<status starttime="20161110 21:53:05.096" status="PASS" endtime="20161110 21:53:05.097"></status>
</kw>
<status starttime="20161110 21:53:05.094" status="PASS" endtime="20161110 21:53:05.097"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:53:05.098">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:04.470" status="PASS" endtime="20161110 21:53:05.098"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:53:05.098">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:04.468" status="PASS" endtime="20161110 21:53:05.098"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:05.099">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:53:05.099" status="PASS" endtime="20161110 21:53:05.099"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:05.100">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:53:05.100">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:53:05.100">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:53:05.100" status="PASS" endtime="20161110 21:53:05.100"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:53:05.101">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:53:04.466" status="PASS" endtime="20161110 21:53:05.101"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:53:05.102">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:53:05.101" status="FAIL" endtime="20161110 21:53:05.102"></status>
</kw>
<status starttime="20161110 21:53:04.465" status="FAIL" endtime="20161110 21:53:05.102"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:15.106">@{arglist} = [ ]</msg>
<status starttime="20161110 21:53:15.105" status="PASS" endtime="20161110 21:53:15.106"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:15.108">${args} = {u'data': []}</msg>
<status starttime="20161110 21:53:15.107" status="PASS" endtime="20161110 21:53:15.108"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:15.109">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:53:15.109" status="PASS" endtime="20161110 21:53:15.109"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:15.111">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:53:15.111" status="PASS" endtime="20161110 21:53:15.112"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:15.112">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:53:15.112" status="PASS" endtime="20161110 21:53:15.112"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:53:15.113" status="PASS" endtime="20161110 21:53:15.113"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:15.116">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:53:15.114" status="PASS" endtime="20161110 21:53:15.116"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:15.117">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:53:15.117" status="PASS" endtime="20161110 21:53:15.117"></status>
</kw>
<status starttime="20161110 21:53:15.116" status="PASS" endtime="20161110 21:53:15.117"></status>
</kw>
<status starttime="20161110 21:53:15.114" status="PASS" endtime="20161110 21:53:15.118"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:15.119">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:53:15.118" status="PASS" endtime="20161110 21:53:15.120"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:15.120">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:53:15.120" status="PASS" endtime="20161110 21:53:15.120"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:15.121">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:53:15.121" status="PASS" endtime="20161110 21:53:15.121"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:15.122">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:53:15.121" status="PASS" endtime="20161110 21:53:15.122"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:15.453">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:53:15.453">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:15.122" status="PASS" endtime="20161110 21:53:15.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:15.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:53:15.453" status="PASS" endtime="20161110 21:53:15.454"></status>
</kw>
<status starttime="20161110 21:53:15.118" status="PASS" endtime="20161110 21:53:15.454"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:15.745">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:53:15.746">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:15.455" status="PASS" endtime="20161110 21:53:15.746"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:15.747">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:53:15.746" status="PASS" endtime="20161110 21:53:15.747"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:15.748">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:53:15.747" status="PASS" endtime="20161110 21:53:15.748"></status>
</kw>
<status starttime="20161110 21:53:15.747" status="PASS" endtime="20161110 21:53:15.748"></status>
</kw>
<status starttime="20161110 21:53:15.746" status="PASS" endtime="20161110 21:53:15.748"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:53:15.748">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:15.110" status="PASS" endtime="20161110 21:53:15.748"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:53:15.748">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:15.108" status="PASS" endtime="20161110 21:53:15.748"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:15.749">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:53:15.749" status="PASS" endtime="20161110 21:53:15.749"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:15.749">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:53:15.749">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:53:15.750">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:53:15.749" status="PASS" endtime="20161110 21:53:15.750"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:53:15.750">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:53:15.104" status="PASS" endtime="20161110 21:53:15.750"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:53:15.750">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:53:15.750" status="FAIL" endtime="20161110 21:53:15.751"></status>
</kw>
<status starttime="20161110 21:53:15.103" status="FAIL" endtime="20161110 21:53:15.751"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:25.753">@{arglist} = [ ]</msg>
<status starttime="20161110 21:53:25.753" status="PASS" endtime="20161110 21:53:25.753"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:25.754">${args} = {u'data': []}</msg>
<status starttime="20161110 21:53:25.754" status="PASS" endtime="20161110 21:53:25.755"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:25.756">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:53:25.756" status="PASS" endtime="20161110 21:53:25.756"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:25.758">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:53:25.758" status="PASS" endtime="20161110 21:53:25.758"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:25.759">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:53:25.759" status="PASS" endtime="20161110 21:53:25.759"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:53:25.760" status="PASS" endtime="20161110 21:53:25.760"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:25.762">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:53:25.761" status="PASS" endtime="20161110 21:53:25.763"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:25.764">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:53:25.764" status="PASS" endtime="20161110 21:53:25.765"></status>
</kw>
<status starttime="20161110 21:53:25.763" status="PASS" endtime="20161110 21:53:25.765"></status>
</kw>
<status starttime="20161110 21:53:25.760" status="PASS" endtime="20161110 21:53:25.765"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:25.767">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:53:25.766" status="PASS" endtime="20161110 21:53:25.767"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:25.768">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:53:25.768" status="PASS" endtime="20161110 21:53:25.768"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:25.769">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:53:25.768" status="PASS" endtime="20161110 21:53:25.769"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:25.771">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:53:25.770" status="PASS" endtime="20161110 21:53:25.771"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:34.148">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:53:34.148">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:25.771" status="PASS" endtime="20161110 21:53:34.148"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:34.150">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:53:34.149" status="PASS" endtime="20161110 21:53:34.150"></status>
</kw>
<status starttime="20161110 21:53:25.765" status="PASS" endtime="20161110 21:53:34.150"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:35.069">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:53:35.069">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:34.151" status="PASS" endtime="20161110 21:53:35.069"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:35.071">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:53:35.070" status="PASS" endtime="20161110 21:53:35.071"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:35.072">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:53:35.072" status="PASS" endtime="20161110 21:53:35.073"></status>
</kw>
<status starttime="20161110 21:53:35.071" status="PASS" endtime="20161110 21:53:35.073"></status>
</kw>
<status starttime="20161110 21:53:35.069" status="PASS" endtime="20161110 21:53:35.073"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:53:35.073">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:25.757" status="PASS" endtime="20161110 21:53:35.074"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:53:35.074">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:25.755" status="PASS" endtime="20161110 21:53:35.074"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:35.075">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:53:35.074" status="PASS" endtime="20161110 21:53:35.075"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:35.076">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:53:35.076">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:53:35.076">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:53:35.075" status="PASS" endtime="20161110 21:53:35.076"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:53:35.076">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:53:25.752" status="PASS" endtime="20161110 21:53:35.077"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:53:35.077">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:53:35.077" status="FAIL" endtime="20161110 21:53:35.078"></status>
</kw>
<status starttime="20161110 21:53:25.751" status="FAIL" endtime="20161110 21:53:35.078"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:45.081">@{arglist} = [ ]</msg>
<status starttime="20161110 21:53:45.080" status="PASS" endtime="20161110 21:53:45.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:45.082">${args} = {u'data': []}</msg>
<status starttime="20161110 21:53:45.081" status="PASS" endtime="20161110 21:53:45.082"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:45.086">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:53:45.085" status="PASS" endtime="20161110 21:53:45.086"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:45.088">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:53:45.088" status="PASS" endtime="20161110 21:53:45.088"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:45.089">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:53:45.089" status="PASS" endtime="20161110 21:53:45.089"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:53:45.089" status="PASS" endtime="20161110 21:53:45.090"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:45.092">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:53:45.091" status="PASS" endtime="20161110 21:53:45.092"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:45.093">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:53:45.092" status="PASS" endtime="20161110 21:53:45.093"></status>
</kw>
<status starttime="20161110 21:53:45.092" status="PASS" endtime="20161110 21:53:45.093"></status>
</kw>
<status starttime="20161110 21:53:45.090" status="PASS" endtime="20161110 21:53:45.093"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:45.094">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:53:45.093" status="PASS" endtime="20161110 21:53:45.094"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:45.095">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:53:45.094" status="PASS" endtime="20161110 21:53:45.095"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:45.095">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:53:45.095" status="PASS" endtime="20161110 21:53:45.095"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:45.096">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:53:45.095" status="PASS" endtime="20161110 21:53:45.096"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:45.427">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:53:45.427">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:45.096" status="PASS" endtime="20161110 21:53:45.427"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:45.428">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:53:45.427" status="PASS" endtime="20161110 21:53:45.428"></status>
</kw>
<status starttime="20161110 21:53:45.093" status="PASS" endtime="20161110 21:53:45.428"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:45.710">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:53:45.710">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:45.428" status="PASS" endtime="20161110 21:53:45.710"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:45.711">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:53:45.711" status="PASS" endtime="20161110 21:53:45.711"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:45.712">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:53:45.712" status="PASS" endtime="20161110 21:53:45.712"></status>
</kw>
<status starttime="20161110 21:53:45.711" status="PASS" endtime="20161110 21:53:45.712"></status>
</kw>
<status starttime="20161110 21:53:45.710" status="PASS" endtime="20161110 21:53:45.712"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:53:45.713">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:45.086" status="PASS" endtime="20161110 21:53:45.713"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:53:45.713">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:45.082" status="PASS" endtime="20161110 21:53:45.713"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:45.713">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:53:45.713" status="PASS" endtime="20161110 21:53:45.713"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:45.714">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:53:45.714">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:53:45.714">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:53:45.714" status="PASS" endtime="20161110 21:53:45.714"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:53:45.714">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:53:45.080" status="PASS" endtime="20161110 21:53:45.714"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:53:45.715">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:53:45.714" status="FAIL" endtime="20161110 21:53:45.715"></status>
</kw>
<status starttime="20161110 21:53:45.079" status="FAIL" endtime="20161110 21:53:45.715"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:55.717">@{arglist} = [ ]</msg>
<status starttime="20161110 21:53:55.717" status="PASS" endtime="20161110 21:53:55.717"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:55.718">${args} = {u'data': []}</msg>
<status starttime="20161110 21:53:55.718" status="PASS" endtime="20161110 21:53:55.718"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:55.720">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:53:55.719" status="PASS" endtime="20161110 21:53:55.720"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:55.722">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:53:55.722" status="PASS" endtime="20161110 21:53:55.722"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:55.723">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:53:55.723" status="PASS" endtime="20161110 21:53:55.723"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:53:55.723" status="PASS" endtime="20161110 21:53:55.724"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:55.726">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:53:55.725" status="PASS" endtime="20161110 21:53:55.726"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:55.728">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:53:55.727" status="PASS" endtime="20161110 21:53:55.728"></status>
</kw>
<status starttime="20161110 21:53:55.727" status="PASS" endtime="20161110 21:53:55.728"></status>
</kw>
<status starttime="20161110 21:53:55.724" status="PASS" endtime="20161110 21:53:55.728"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:55.730">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:53:55.729" status="PASS" endtime="20161110 21:53:55.731"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:55.731">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:53:55.731" status="PASS" endtime="20161110 21:53:55.732"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:55.732">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:53:55.732" status="PASS" endtime="20161110 21:53:55.732"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:55.733">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:53:55.732" status="PASS" endtime="20161110 21:53:55.733"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:56.072">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:53:56.073">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:55.733" status="PASS" endtime="20161110 21:53:56.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:56.074">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:53:56.073" status="PASS" endtime="20161110 21:53:56.074"></status>
</kw>
<status starttime="20161110 21:53:55.729" status="PASS" endtime="20161110 21:53:56.074"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:56.406">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:53:56.406">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:56.074" status="PASS" endtime="20161110 21:53:56.406"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:56.408">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:53:56.407" status="PASS" endtime="20161110 21:53:56.408"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:56.410">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:53:56.409" status="PASS" endtime="20161110 21:53:56.410"></status>
</kw>
<status starttime="20161110 21:53:56.409" status="PASS" endtime="20161110 21:53:56.410"></status>
</kw>
<status starttime="20161110 21:53:56.406" status="PASS" endtime="20161110 21:53:56.410"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:53:56.410">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:55.720" status="PASS" endtime="20161110 21:53:56.411"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:53:56.411">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:53:55.718" status="PASS" endtime="20161110 21:53:56.411"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:53:56.412">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:53:56.411" status="PASS" endtime="20161110 21:53:56.412"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:53:56.413">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:53:56.413">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:53:56.413">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:53:56.412" status="PASS" endtime="20161110 21:53:56.413"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:53:56.414">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:53:55.716" status="PASS" endtime="20161110 21:53:56.414"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:53:56.414">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:53:56.414" status="FAIL" endtime="20161110 21:53:56.415"></status>
</kw>
<status starttime="20161110 21:53:55.715" status="FAIL" endtime="20161110 21:53:56.415"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:06.417">@{arglist} = [ ]</msg>
<status starttime="20161110 21:54:06.417" status="PASS" endtime="20161110 21:54:06.418"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:06.419">${args} = {u'data': []}</msg>
<status starttime="20161110 21:54:06.418" status="PASS" endtime="20161110 21:54:06.419"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:06.420">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:54:06.420" status="PASS" endtime="20161110 21:54:06.420"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:06.422">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:54:06.422" status="PASS" endtime="20161110 21:54:06.422"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:06.423">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:54:06.422" status="PASS" endtime="20161110 21:54:06.423"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:54:06.423" status="PASS" endtime="20161110 21:54:06.424"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:06.425">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:54:06.424" status="PASS" endtime="20161110 21:54:06.425"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:06.426">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:54:06.426" status="PASS" endtime="20161110 21:54:06.426"></status>
</kw>
<status starttime="20161110 21:54:06.425" status="PASS" endtime="20161110 21:54:06.427"></status>
</kw>
<status starttime="20161110 21:54:06.424" status="PASS" endtime="20161110 21:54:06.427"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:06.428">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:54:06.427" status="PASS" endtime="20161110 21:54:06.428"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:06.429">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:54:06.428" status="PASS" endtime="20161110 21:54:06.429"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:06.429">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:54:06.429" status="PASS" endtime="20161110 21:54:06.429"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:06.430">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:54:06.430" status="PASS" endtime="20161110 21:54:06.430"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:06.829">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:54:06.830">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:06.430" status="PASS" endtime="20161110 21:54:06.830"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:06.830">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:54:06.830" status="PASS" endtime="20161110 21:54:06.830"></status>
</kw>
<status starttime="20161110 21:54:06.427" status="PASS" endtime="20161110 21:54:06.831"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:07.111">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:54:07.112">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:06.831" status="PASS" endtime="20161110 21:54:07.112"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:07.114">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:54:07.113" status="PASS" endtime="20161110 21:54:07.114"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:07.115">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:54:07.115" status="PASS" endtime="20161110 21:54:07.116"></status>
</kw>
<status starttime="20161110 21:54:07.114" status="PASS" endtime="20161110 21:54:07.116"></status>
</kw>
<status starttime="20161110 21:54:07.112" status="PASS" endtime="20161110 21:54:07.116"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:54:07.116">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:06.421" status="PASS" endtime="20161110 21:54:07.116"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:54:07.117">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:06.419" status="PASS" endtime="20161110 21:54:07.117"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:07.118">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:54:07.117" status="PASS" endtime="20161110 21:54:07.118"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:07.118">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:54:07.118">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:54:07.119">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:54:07.118" status="PASS" endtime="20161110 21:54:07.119"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:54:07.119">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:54:06.416" status="PASS" endtime="20161110 21:54:07.119"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:54:07.120">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:54:07.120" status="FAIL" endtime="20161110 21:54:07.120"></status>
</kw>
<status starttime="20161110 21:54:06.415" status="FAIL" endtime="20161110 21:54:07.121"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:17.124">@{arglist} = [ ]</msg>
<status starttime="20161110 21:54:17.123" status="PASS" endtime="20161110 21:54:17.124"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:17.125">${args} = {u'data': []}</msg>
<status starttime="20161110 21:54:17.124" status="PASS" endtime="20161110 21:54:17.125"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:17.126">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:54:17.126" status="PASS" endtime="20161110 21:54:17.126"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:17.128">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:54:17.128" status="PASS" endtime="20161110 21:54:17.128"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:17.129">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:54:17.129" status="PASS" endtime="20161110 21:54:17.129"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:54:17.130" status="PASS" endtime="20161110 21:54:17.130"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:17.132">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:54:17.131" status="PASS" endtime="20161110 21:54:17.132"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:17.133">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:54:17.133" status="PASS" endtime="20161110 21:54:17.133"></status>
</kw>
<status starttime="20161110 21:54:17.132" status="PASS" endtime="20161110 21:54:17.133"></status>
</kw>
<status starttime="20161110 21:54:17.130" status="PASS" endtime="20161110 21:54:17.133"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:17.134">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:54:17.134" status="PASS" endtime="20161110 21:54:17.135"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:17.135">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:54:17.135" status="PASS" endtime="20161110 21:54:17.135"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:17.136">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:54:17.135" status="PASS" endtime="20161110 21:54:17.136"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:17.136">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:54:17.136" status="PASS" endtime="20161110 21:54:17.136"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:17.467">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:54:17.467">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:17.136" status="PASS" endtime="20161110 21:54:17.467"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:17.468">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:54:17.467" status="PASS" endtime="20161110 21:54:17.468"></status>
</kw>
<status starttime="20161110 21:54:17.134" status="PASS" endtime="20161110 21:54:17.468"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:17.757">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:54:17.757">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:17.468" status="PASS" endtime="20161110 21:54:17.757"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:17.758">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:54:17.757" status="PASS" endtime="20161110 21:54:17.758"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:17.759">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:54:17.759" status="PASS" endtime="20161110 21:54:17.759"></status>
</kw>
<status starttime="20161110 21:54:17.758" status="PASS" endtime="20161110 21:54:17.759"></status>
</kw>
<status starttime="20161110 21:54:17.757" status="PASS" endtime="20161110 21:54:17.759"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:54:17.759">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:17.127" status="PASS" endtime="20161110 21:54:17.759"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:54:17.759">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:17.125" status="PASS" endtime="20161110 21:54:17.759"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:17.760">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:54:17.760" status="PASS" endtime="20161110 21:54:17.760"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:17.760">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:54:17.761">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:54:17.761">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:54:17.760" status="PASS" endtime="20161110 21:54:17.761"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:54:17.761">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:54:17.122" status="PASS" endtime="20161110 21:54:17.761"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:54:17.762">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:54:17.761" status="FAIL" endtime="20161110 21:54:17.762"></status>
</kw>
<status starttime="20161110 21:54:17.121" status="FAIL" endtime="20161110 21:54:17.762"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:27.764">@{arglist} = [ ]</msg>
<status starttime="20161110 21:54:27.764" status="PASS" endtime="20161110 21:54:27.765"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:27.766">${args} = {u'data': []}</msg>
<status starttime="20161110 21:54:27.765" status="PASS" endtime="20161110 21:54:27.766"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:27.767">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:54:27.767" status="PASS" endtime="20161110 21:54:27.767"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:27.769">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:54:27.769" status="PASS" endtime="20161110 21:54:27.769"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:27.770">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:54:27.770" status="PASS" endtime="20161110 21:54:27.770"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:54:27.771" status="PASS" endtime="20161110 21:54:27.771"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:27.774">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:54:27.772" status="PASS" endtime="20161110 21:54:27.774"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:27.776">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:54:27.775" status="PASS" endtime="20161110 21:54:27.776"></status>
</kw>
<status starttime="20161110 21:54:27.775" status="PASS" endtime="20161110 21:54:27.776"></status>
</kw>
<status starttime="20161110 21:54:27.771" status="PASS" endtime="20161110 21:54:27.776"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:27.778">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:54:27.777" status="PASS" endtime="20161110 21:54:27.778"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:27.779">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:54:27.779" status="PASS" endtime="20161110 21:54:27.779"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:27.780">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:54:27.780" status="PASS" endtime="20161110 21:54:27.780"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:27.781">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:54:27.781" status="PASS" endtime="20161110 21:54:27.781"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:28.125">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:54:28.125">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:27.782" status="PASS" endtime="20161110 21:54:28.125"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:28.126">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:54:28.125" status="PASS" endtime="20161110 21:54:28.126"></status>
</kw>
<status starttime="20161110 21:54:27.776" status="PASS" endtime="20161110 21:54:28.127"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:28.408">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:54:28.408">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:28.127" status="PASS" endtime="20161110 21:54:28.408"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:28.409">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:54:28.409" status="PASS" endtime="20161110 21:54:28.409"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:28.410">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:54:28.410" status="PASS" endtime="20161110 21:54:28.410"></status>
</kw>
<status starttime="20161110 21:54:28.409" status="PASS" endtime="20161110 21:54:28.410"></status>
</kw>
<status starttime="20161110 21:54:28.408" status="PASS" endtime="20161110 21:54:28.410"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:54:28.410">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:27.768" status="PASS" endtime="20161110 21:54:28.411"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:54:28.411">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:27.766" status="PASS" endtime="20161110 21:54:28.411"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:28.411">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:54:28.411" status="PASS" endtime="20161110 21:54:28.411"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:28.412">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:54:28.412">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:54:28.412">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:54:28.412" status="PASS" endtime="20161110 21:54:28.412"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:54:28.412">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:54:27.763" status="PASS" endtime="20161110 21:54:28.412"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:54:28.413">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:54:28.412" status="FAIL" endtime="20161110 21:54:28.413"></status>
</kw>
<status starttime="20161110 21:54:27.762" status="FAIL" endtime="20161110 21:54:28.413"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:38.416">@{arglist} = [ ]</msg>
<status starttime="20161110 21:54:38.415" status="PASS" endtime="20161110 21:54:38.416"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:38.417">${args} = {u'data': []}</msg>
<status starttime="20161110 21:54:38.416" status="PASS" endtime="20161110 21:54:38.417"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:38.419">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:54:38.418" status="PASS" endtime="20161110 21:54:38.419"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:38.421">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:54:38.420" status="PASS" endtime="20161110 21:54:38.421"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:38.422">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:54:38.421" status="PASS" endtime="20161110 21:54:38.422"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:54:38.422" status="PASS" endtime="20161110 21:54:38.423"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:38.425">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:54:38.424" status="PASS" endtime="20161110 21:54:38.425"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:38.427">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:54:38.426" status="PASS" endtime="20161110 21:54:38.427"></status>
</kw>
<status starttime="20161110 21:54:38.425" status="PASS" endtime="20161110 21:54:38.427"></status>
</kw>
<status starttime="20161110 21:54:38.423" status="PASS" endtime="20161110 21:54:38.427"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:38.429">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:54:38.428" status="PASS" endtime="20161110 21:54:38.429"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:38.430">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:54:38.430" status="PASS" endtime="20161110 21:54:38.430"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:38.431">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:54:38.431" status="PASS" endtime="20161110 21:54:38.431"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:38.432">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:54:38.432" status="PASS" endtime="20161110 21:54:38.432"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:46.106">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:54:46.106">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:38.432" status="PASS" endtime="20161110 21:54:46.106"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:46.107">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:54:46.107" status="PASS" endtime="20161110 21:54:46.107"></status>
</kw>
<status starttime="20161110 21:54:38.427" status="PASS" endtime="20161110 21:54:46.108"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:46.725">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:54:46.725">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:46.108" status="PASS" endtime="20161110 21:54:46.725"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:46.726">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:54:46.726" status="PASS" endtime="20161110 21:54:46.726"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:46.727">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:54:46.727" status="PASS" endtime="20161110 21:54:46.727"></status>
</kw>
<status starttime="20161110 21:54:46.727" status="PASS" endtime="20161110 21:54:46.727"></status>
</kw>
<status starttime="20161110 21:54:46.725" status="PASS" endtime="20161110 21:54:46.728"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:54:46.728">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:38.419" status="PASS" endtime="20161110 21:54:46.728"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:54:46.728">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:38.417" status="PASS" endtime="20161110 21:54:46.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:46.728">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:54:46.728" status="PASS" endtime="20161110 21:54:46.729"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:46.729">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:54:46.729">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:54:46.729">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:54:46.729" status="PASS" endtime="20161110 21:54:46.729"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:54:46.729">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:54:38.414" status="PASS" endtime="20161110 21:54:46.730"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:54:46.730">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:54:46.730" status="FAIL" endtime="20161110 21:54:46.730"></status>
</kw>
<status starttime="20161110 21:54:38.414" status="FAIL" endtime="20161110 21:54:46.730"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:56.734">@{arglist} = [ ]</msg>
<status starttime="20161110 21:54:56.734" status="PASS" endtime="20161110 21:54:56.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:56.736">${args} = {u'data': []}</msg>
<status starttime="20161110 21:54:56.735" status="PASS" endtime="20161110 21:54:56.736"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:56.737">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:54:56.737" status="PASS" endtime="20161110 21:54:56.737"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:56.739">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:54:56.739" status="PASS" endtime="20161110 21:54:56.739"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:56.740">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:54:56.740" status="PASS" endtime="20161110 21:54:56.740"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:54:56.741" status="PASS" endtime="20161110 21:54:56.741"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:56.743">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:54:56.743" status="PASS" endtime="20161110 21:54:56.743"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:56.744">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:54:56.744" status="PASS" endtime="20161110 21:54:56.744"></status>
</kw>
<status starttime="20161110 21:54:56.743" status="PASS" endtime="20161110 21:54:56.745"></status>
</kw>
<status starttime="20161110 21:54:56.742" status="PASS" endtime="20161110 21:54:56.745"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:56.746">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:54:56.745" status="PASS" endtime="20161110 21:54:56.746"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:56.746">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:54:56.746" status="PASS" endtime="20161110 21:54:56.746"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:56.747">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:54:56.747" status="PASS" endtime="20161110 21:54:56.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:56.748">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:54:56.747" status="PASS" endtime="20161110 21:54:56.748"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:57.083">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:54:57.084">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:56.748" status="PASS" endtime="20161110 21:54:57.084"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:57.085">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:54:57.084" status="PASS" endtime="20161110 21:54:57.085"></status>
</kw>
<status starttime="20161110 21:54:56.745" status="PASS" endtime="20161110 21:54:57.085"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:57.365">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:54:57.365">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:57.085" status="PASS" endtime="20161110 21:54:57.365"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:57.367">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:54:57.366" status="PASS" endtime="20161110 21:54:57.367"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:57.369">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:54:57.368" status="PASS" endtime="20161110 21:54:57.369"></status>
</kw>
<status starttime="20161110 21:54:57.367" status="PASS" endtime="20161110 21:54:57.369"></status>
</kw>
<status starttime="20161110 21:54:57.365" status="PASS" endtime="20161110 21:54:57.370"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:54:57.370">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:56.738" status="PASS" endtime="20161110 21:54:57.370"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:54:57.370">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:54:56.736" status="PASS" endtime="20161110 21:54:57.370"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:54:57.372">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:54:57.371" status="PASS" endtime="20161110 21:54:57.372"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:54:57.373">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:54:57.373">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:54:57.373">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:54:57.373" status="PASS" endtime="20161110 21:54:57.373"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:54:57.374">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:54:56.733" status="PASS" endtime="20161110 21:54:57.374"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:54:57.375">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:54:57.374" status="FAIL" endtime="20161110 21:54:57.375"></status>
</kw>
<status starttime="20161110 21:54:56.732" status="FAIL" endtime="20161110 21:54:57.375"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:07.377">@{arglist} = [ ]</msg>
<status starttime="20161110 21:55:07.377" status="PASS" endtime="20161110 21:55:07.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:07.378">${args} = {u'data': []}</msg>
<status starttime="20161110 21:55:07.378" status="PASS" endtime="20161110 21:55:07.379"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:07.381">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:55:07.380" status="PASS" endtime="20161110 21:55:07.381"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:07.383">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:55:07.382" status="PASS" endtime="20161110 21:55:07.383"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:07.384">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:55:07.383" status="PASS" endtime="20161110 21:55:07.384"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:55:07.384" status="PASS" endtime="20161110 21:55:07.385"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:07.387">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:55:07.386" status="PASS" endtime="20161110 21:55:07.387"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:07.389">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:55:07.388" status="PASS" endtime="20161110 21:55:07.389"></status>
</kw>
<status starttime="20161110 21:55:07.388" status="PASS" endtime="20161110 21:55:07.389"></status>
</kw>
<status starttime="20161110 21:55:07.385" status="PASS" endtime="20161110 21:55:07.389"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:07.391">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:55:07.390" status="PASS" endtime="20161110 21:55:07.391"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:07.392">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:55:07.392" status="PASS" endtime="20161110 21:55:07.392"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:07.393">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:55:07.393" status="PASS" endtime="20161110 21:55:07.393"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:07.393">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:55:07.393" status="PASS" endtime="20161110 21:55:07.393"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:07.728">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:55:07.728">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:07.394" status="PASS" endtime="20161110 21:55:07.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:07.729">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:55:07.728" status="PASS" endtime="20161110 21:55:07.729"></status>
</kw>
<status starttime="20161110 21:55:07.390" status="PASS" endtime="20161110 21:55:07.729"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:08.022">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:55:08.022">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:07.729" status="PASS" endtime="20161110 21:55:08.022"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:08.024">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:55:08.023" status="PASS" endtime="20161110 21:55:08.024"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:08.025">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:55:08.025" status="PASS" endtime="20161110 21:55:08.026"></status>
</kw>
<status starttime="20161110 21:55:08.024" status="PASS" endtime="20161110 21:55:08.026"></status>
</kw>
<status starttime="20161110 21:55:08.022" status="PASS" endtime="20161110 21:55:08.026"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:55:08.026">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:07.381" status="PASS" endtime="20161110 21:55:08.026"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:55:08.027">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:07.379" status="PASS" endtime="20161110 21:55:08.027"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:08.027">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:55:08.027" status="PASS" endtime="20161110 21:55:08.028"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:08.028">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:55:08.028">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:55:08.029">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:55:08.028" status="PASS" endtime="20161110 21:55:08.029"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:55:08.029">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:55:07.376" status="PASS" endtime="20161110 21:55:08.029"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:55:08.030">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:55:08.030" status="FAIL" endtime="20161110 21:55:08.030"></status>
</kw>
<status starttime="20161110 21:55:07.376" status="FAIL" endtime="20161110 21:55:08.030"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:18.033">@{arglist} = [ ]</msg>
<status starttime="20161110 21:55:18.032" status="PASS" endtime="20161110 21:55:18.033"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:18.034">${args} = {u'data': []}</msg>
<status starttime="20161110 21:55:18.033" status="PASS" endtime="20161110 21:55:18.034"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:18.036">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:55:18.035" status="PASS" endtime="20161110 21:55:18.036"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:18.037">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:55:18.037" status="PASS" endtime="20161110 21:55:18.038"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:18.039">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:55:18.039" status="PASS" endtime="20161110 21:55:18.039"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:55:18.040" status="PASS" endtime="20161110 21:55:18.041"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:18.043">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:55:18.042" status="PASS" endtime="20161110 21:55:18.043"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:18.044">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:55:18.044" status="PASS" endtime="20161110 21:55:18.044"></status>
</kw>
<status starttime="20161110 21:55:18.043" status="PASS" endtime="20161110 21:55:18.044"></status>
</kw>
<status starttime="20161110 21:55:18.041" status="PASS" endtime="20161110 21:55:18.044"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:18.045">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:55:18.045" status="PASS" endtime="20161110 21:55:18.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:18.047">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:55:18.047" status="PASS" endtime="20161110 21:55:18.047"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:18.048">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:55:18.048" status="PASS" endtime="20161110 21:55:18.049"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:18.049">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:55:18.049" status="PASS" endtime="20161110 21:55:18.049"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:18.530">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:55:18.530">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:18.049" status="PASS" endtime="20161110 21:55:18.530"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:18.531">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:55:18.530" status="PASS" endtime="20161110 21:55:18.531"></status>
</kw>
<status starttime="20161110 21:55:18.044" status="PASS" endtime="20161110 21:55:18.531"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:18.814">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:55:18.814">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:18.531" status="PASS" endtime="20161110 21:55:18.814"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:18.815">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:55:18.815" status="PASS" endtime="20161110 21:55:18.815"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:18.816">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:55:18.816" status="PASS" endtime="20161110 21:55:18.816"></status>
</kw>
<status starttime="20161110 21:55:18.816" status="PASS" endtime="20161110 21:55:18.816"></status>
</kw>
<status starttime="20161110 21:55:18.814" status="PASS" endtime="20161110 21:55:18.817"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:55:18.817">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:18.036" status="PASS" endtime="20161110 21:55:18.817"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:55:18.817">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:18.034" status="PASS" endtime="20161110 21:55:18.817"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:18.817">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:55:18.817" status="PASS" endtime="20161110 21:55:18.818"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:18.818">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:55:18.818">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:55:18.818">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:55:18.818" status="PASS" endtime="20161110 21:55:18.818"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:55:18.818">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:55:18.032" status="PASS" endtime="20161110 21:55:18.818"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:55:18.819">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:55:18.819" status="FAIL" endtime="20161110 21:55:18.819"></status>
</kw>
<status starttime="20161110 21:55:18.031" status="FAIL" endtime="20161110 21:55:18.819"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:28.821">@{arglist} = [ ]</msg>
<status starttime="20161110 21:55:28.821" status="PASS" endtime="20161110 21:55:28.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:28.823">${args} = {u'data': []}</msg>
<status starttime="20161110 21:55:28.822" status="PASS" endtime="20161110 21:55:28.823"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:28.825">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:55:28.824" status="PASS" endtime="20161110 21:55:28.825"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:28.827">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:55:28.826" status="PASS" endtime="20161110 21:55:28.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:28.828">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:55:28.827" status="PASS" endtime="20161110 21:55:28.828"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:55:28.828" status="PASS" endtime="20161110 21:55:28.853"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:28.855">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:55:28.854" status="PASS" endtime="20161110 21:55:28.855"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:28.856">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:55:28.856" status="PASS" endtime="20161110 21:55:28.856"></status>
</kw>
<status starttime="20161110 21:55:28.855" status="PASS" endtime="20161110 21:55:28.856"></status>
</kw>
<status starttime="20161110 21:55:28.853" status="PASS" endtime="20161110 21:55:28.856"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:28.857">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:55:28.857" status="PASS" endtime="20161110 21:55:28.857"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:28.858">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:55:28.857" status="PASS" endtime="20161110 21:55:28.858"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:28.858">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:55:28.858" status="PASS" endtime="20161110 21:55:28.858"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:28.859">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:55:28.859" status="PASS" endtime="20161110 21:55:28.859"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:29.192">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:55:29.192">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:28.859" status="PASS" endtime="20161110 21:55:29.192"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:29.193">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:55:29.193" status="PASS" endtime="20161110 21:55:29.194"></status>
</kw>
<status starttime="20161110 21:55:28.856" status="PASS" endtime="20161110 21:55:29.194"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:29.471">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:55:29.471">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:29.194" status="PASS" endtime="20161110 21:55:29.472"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:29.473">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:55:29.473" status="PASS" endtime="20161110 21:55:29.474"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:29.475">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:55:29.475" status="PASS" endtime="20161110 21:55:29.475"></status>
</kw>
<status starttime="20161110 21:55:29.474" status="PASS" endtime="20161110 21:55:29.475"></status>
</kw>
<status starttime="20161110 21:55:29.472" status="PASS" endtime="20161110 21:55:29.476"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:55:29.476">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:28.825" status="PASS" endtime="20161110 21:55:29.476"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:55:29.476">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:28.823" status="PASS" endtime="20161110 21:55:29.476"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:29.477">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:55:29.477" status="PASS" endtime="20161110 21:55:29.477"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:29.478">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:55:29.478">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:55:29.478">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:55:29.478" status="PASS" endtime="20161110 21:55:29.478"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:55:29.479">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:55:28.820" status="PASS" endtime="20161110 21:55:29.479"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:55:29.480">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:55:29.479" status="FAIL" endtime="20161110 21:55:29.480"></status>
</kw>
<status starttime="20161110 21:55:28.820" status="FAIL" endtime="20161110 21:55:29.481"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:39.483">@{arglist} = [ ]</msg>
<status starttime="20161110 21:55:39.483" status="PASS" endtime="20161110 21:55:39.483"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:39.484">${args} = {u'data': []}</msg>
<status starttime="20161110 21:55:39.484" status="PASS" endtime="20161110 21:55:39.484"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:39.486">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:55:39.485" status="PASS" endtime="20161110 21:55:39.486"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:39.488">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:55:39.487" status="PASS" endtime="20161110 21:55:39.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:39.489">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:55:39.488" status="PASS" endtime="20161110 21:55:39.489"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:55:39.489" status="PASS" endtime="20161110 21:55:39.490"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:39.492">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:55:39.491" status="PASS" endtime="20161110 21:55:39.492"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:39.493">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:55:39.493" status="PASS" endtime="20161110 21:55:39.494"></status>
</kw>
<status starttime="20161110 21:55:39.492" status="PASS" endtime="20161110 21:55:39.494"></status>
</kw>
<status starttime="20161110 21:55:39.490" status="PASS" endtime="20161110 21:55:39.494"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:39.495">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:55:39.495" status="PASS" endtime="20161110 21:55:39.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:39.496">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:55:39.496" status="PASS" endtime="20161110 21:55:39.496"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:39.496">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:55:39.496" status="PASS" endtime="20161110 21:55:39.497"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:39.497">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:55:39.497" status="PASS" endtime="20161110 21:55:39.497"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:39.840">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:55:39.841">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:39.497" status="PASS" endtime="20161110 21:55:39.841"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:39.841">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:55:39.841" status="PASS" endtime="20161110 21:55:39.841"></status>
</kw>
<status starttime="20161110 21:55:39.494" status="PASS" endtime="20161110 21:55:39.842"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:40.121">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:55:40.121">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:39.842" status="PASS" endtime="20161110 21:55:40.121"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:40.123">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:55:40.122" status="PASS" endtime="20161110 21:55:40.123"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:40.125">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:55:40.124" status="PASS" endtime="20161110 21:55:40.125"></status>
</kw>
<status starttime="20161110 21:55:40.123" status="PASS" endtime="20161110 21:55:40.125"></status>
</kw>
<status starttime="20161110 21:55:40.121" status="PASS" endtime="20161110 21:55:40.125"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:55:40.125">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:39.486" status="PASS" endtime="20161110 21:55:40.125"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:55:40.126">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:39.485" status="PASS" endtime="20161110 21:55:40.126"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:40.127">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:55:40.126" status="PASS" endtime="20161110 21:55:40.127"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:40.127">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:55:40.128">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:55:40.128">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:55:40.127" status="PASS" endtime="20161110 21:55:40.128"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:55:40.128">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:55:39.482" status="PASS" endtime="20161110 21:55:40.128"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:55:40.129">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:55:40.128" status="FAIL" endtime="20161110 21:55:40.129"></status>
</kw>
<status starttime="20161110 21:55:39.481" status="FAIL" endtime="20161110 21:55:40.129"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:50.132">@{arglist} = [ ]</msg>
<status starttime="20161110 21:55:50.131" status="PASS" endtime="20161110 21:55:50.132"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:50.133">${args} = {u'data': []}</msg>
<status starttime="20161110 21:55:50.132" status="PASS" endtime="20161110 21:55:50.133"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:50.134">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:55:50.134" status="PASS" endtime="20161110 21:55:50.135"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:50.137">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:55:50.136" status="PASS" endtime="20161110 21:55:50.137"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:50.138">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:55:50.137" status="PASS" endtime="20161110 21:55:50.138"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:55:50.138" status="PASS" endtime="20161110 21:55:50.139"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:50.141">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:55:50.140" status="PASS" endtime="20161110 21:55:50.141"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:50.143">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:55:50.142" status="PASS" endtime="20161110 21:55:50.143"></status>
</kw>
<status starttime="20161110 21:55:50.141" status="PASS" endtime="20161110 21:55:50.143"></status>
</kw>
<status starttime="20161110 21:55:50.139" status="PASS" endtime="20161110 21:55:50.143"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:50.144">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:55:50.144" status="PASS" endtime="20161110 21:55:50.144"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:50.145">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:55:50.145" status="PASS" endtime="20161110 21:55:50.145"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:50.145">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:55:50.145" status="PASS" endtime="20161110 21:55:50.145"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:50.146">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:55:50.146" status="PASS" endtime="20161110 21:55:50.146"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:54.073">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:55:54.074">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:50.146" status="PASS" endtime="20161110 21:55:54.074"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:54.075">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:55:54.074" status="PASS" endtime="20161110 21:55:54.075"></status>
</kw>
<status starttime="20161110 21:55:50.143" status="PASS" endtime="20161110 21:55:54.075"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:56.080">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:55:56.081">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:54.075" status="PASS" endtime="20161110 21:55:56.081"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:56.083">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:55:56.082" status="PASS" endtime="20161110 21:55:56.083"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:56.085">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:55:56.084" status="PASS" endtime="20161110 21:55:56.085"></status>
</kw>
<status starttime="20161110 21:55:56.083" status="PASS" endtime="20161110 21:55:56.085"></status>
</kw>
<status starttime="20161110 21:55:56.081" status="PASS" endtime="20161110 21:55:56.085"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:55:56.086">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:50.135" status="PASS" endtime="20161110 21:55:56.086"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:55:56.086">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:55:50.133" status="PASS" endtime="20161110 21:55:56.086"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:55:56.087">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:55:56.086" status="PASS" endtime="20161110 21:55:56.087"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:55:56.088">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:55:56.088">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:55:56.088">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:55:56.087" status="PASS" endtime="20161110 21:55:56.088"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:55:56.089">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:55:50.131" status="PASS" endtime="20161110 21:55:56.089"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:55:56.090">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:55:56.089" status="FAIL" endtime="20161110 21:55:56.090"></status>
</kw>
<status starttime="20161110 21:55:50.130" status="FAIL" endtime="20161110 21:55:56.090"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:06.092">@{arglist} = [ ]</msg>
<status starttime="20161110 21:56:06.092" status="PASS" endtime="20161110 21:56:06.093"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:06.094">${args} = {u'data': []}</msg>
<status starttime="20161110 21:56:06.093" status="PASS" endtime="20161110 21:56:06.094"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:06.095">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:56:06.095" status="PASS" endtime="20161110 21:56:06.095"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:06.097">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:56:06.096" status="PASS" endtime="20161110 21:56:06.097"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:06.098">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:56:06.098" status="PASS" endtime="20161110 21:56:06.098"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:56:06.098" status="PASS" endtime="20161110 21:56:06.099"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:06.101">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:56:06.100" status="PASS" endtime="20161110 21:56:06.102"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:06.103">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:56:06.102" status="PASS" endtime="20161110 21:56:06.103"></status>
</kw>
<status starttime="20161110 21:56:06.102" status="PASS" endtime="20161110 21:56:06.103"></status>
</kw>
<status starttime="20161110 21:56:06.099" status="PASS" endtime="20161110 21:56:06.103"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:06.104">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:56:06.104" status="PASS" endtime="20161110 21:56:06.105"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:06.105">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:56:06.105" status="PASS" endtime="20161110 21:56:06.105"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:06.106">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:56:06.105" status="PASS" endtime="20161110 21:56:06.106"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:06.107">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:56:06.106" status="PASS" endtime="20161110 21:56:06.107"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:06.437">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:56:06.437">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:06.107" status="PASS" endtime="20161110 21:56:06.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:06.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:56:06.437" status="PASS" endtime="20161110 21:56:06.438"></status>
</kw>
<status starttime="20161110 21:56:06.104" status="PASS" endtime="20161110 21:56:06.438"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:06.726">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:56:06.726">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:06.438" status="PASS" endtime="20161110 21:56:06.726"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:06.727">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:56:06.726" status="PASS" endtime="20161110 21:56:06.727"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:06.728">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:56:06.728" status="PASS" endtime="20161110 21:56:06.728"></status>
</kw>
<status starttime="20161110 21:56:06.727" status="PASS" endtime="20161110 21:56:06.728"></status>
</kw>
<status starttime="20161110 21:56:06.726" status="PASS" endtime="20161110 21:56:06.728"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:56:06.728">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:06.095" status="PASS" endtime="20161110 21:56:06.728"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:56:06.728">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:06.094" status="PASS" endtime="20161110 21:56:06.729"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:06.729">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:56:06.729" status="PASS" endtime="20161110 21:56:06.729"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:06.730">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:56:06.730">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:56:06.730">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:56:06.729" status="PASS" endtime="20161110 21:56:06.730"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:56:06.730">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:56:06.091" status="PASS" endtime="20161110 21:56:06.730"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:56:06.731">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:56:06.731" status="FAIL" endtime="20161110 21:56:06.731"></status>
</kw>
<status starttime="20161110 21:56:06.091" status="FAIL" endtime="20161110 21:56:06.731"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:16.734">@{arglist} = [ ]</msg>
<status starttime="20161110 21:56:16.733" status="PASS" endtime="20161110 21:56:16.734"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:16.735">${args} = {u'data': []}</msg>
<status starttime="20161110 21:56:16.734" status="PASS" endtime="20161110 21:56:16.735"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:16.736">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:56:16.736" status="PASS" endtime="20161110 21:56:16.737"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:16.739">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:56:16.738" status="PASS" endtime="20161110 21:56:16.739"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:16.740">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:56:16.740" status="PASS" endtime="20161110 21:56:16.741"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:56:16.741" status="PASS" endtime="20161110 21:56:16.742"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:16.746">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:56:16.744" status="PASS" endtime="20161110 21:56:16.746"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:16.747">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:56:16.747" status="PASS" endtime="20161110 21:56:16.748"></status>
</kw>
<status starttime="20161110 21:56:16.746" status="PASS" endtime="20161110 21:56:16.748"></status>
</kw>
<status starttime="20161110 21:56:16.742" status="PASS" endtime="20161110 21:56:16.748"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:16.750">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:56:16.749" status="PASS" endtime="20161110 21:56:16.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:16.751">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:56:16.751" status="PASS" endtime="20161110 21:56:16.751"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:16.752">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:56:16.751" status="PASS" endtime="20161110 21:56:16.752"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:16.753">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:56:16.753" status="PASS" endtime="20161110 21:56:16.754"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:17.097">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:56:17.098">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:16.754" status="PASS" endtime="20161110 21:56:17.098"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:17.099">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:56:17.098" status="PASS" endtime="20161110 21:56:17.099"></status>
</kw>
<status starttime="20161110 21:56:16.748" status="PASS" endtime="20161110 21:56:17.099"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:17.377">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:56:17.377">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:17.099" status="PASS" endtime="20161110 21:56:17.378"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:17.379">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:56:17.379" status="PASS" endtime="20161110 21:56:17.380"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:17.381">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:56:17.380" status="PASS" endtime="20161110 21:56:17.381"></status>
</kw>
<status starttime="20161110 21:56:17.380" status="PASS" endtime="20161110 21:56:17.381"></status>
</kw>
<status starttime="20161110 21:56:17.378" status="PASS" endtime="20161110 21:56:17.381"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:56:17.382">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:16.737" status="PASS" endtime="20161110 21:56:17.382"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:56:17.382">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:16.735" status="PASS" endtime="20161110 21:56:17.382"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:17.383">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:56:17.383" status="PASS" endtime="20161110 21:56:17.383"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:17.384">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:56:17.384">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:56:17.384">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:56:17.384" status="PASS" endtime="20161110 21:56:17.384"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:56:17.384">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:56:16.733" status="PASS" endtime="20161110 21:56:17.385"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:56:17.385">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:56:17.385" status="FAIL" endtime="20161110 21:56:17.385"></status>
</kw>
<status starttime="20161110 21:56:16.732" status="FAIL" endtime="20161110 21:56:17.385"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:27.388">@{arglist} = [ ]</msg>
<status starttime="20161110 21:56:27.388" status="PASS" endtime="20161110 21:56:27.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:27.389">${args} = {u'data': []}</msg>
<status starttime="20161110 21:56:27.389" status="PASS" endtime="20161110 21:56:27.389"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:27.391">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:56:27.391" status="PASS" endtime="20161110 21:56:27.391"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:27.393">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:56:27.393" status="PASS" endtime="20161110 21:56:27.394"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:27.394">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:56:27.394" status="PASS" endtime="20161110 21:56:27.394"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:56:27.395" status="PASS" endtime="20161110 21:56:27.395"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:27.397">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:56:27.396" status="PASS" endtime="20161110 21:56:27.397"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:27.398">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:56:27.398" status="PASS" endtime="20161110 21:56:27.398"></status>
</kw>
<status starttime="20161110 21:56:27.397" status="PASS" endtime="20161110 21:56:27.398"></status>
</kw>
<status starttime="20161110 21:56:27.395" status="PASS" endtime="20161110 21:56:27.399"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:27.400">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:56:27.399" status="PASS" endtime="20161110 21:56:27.400"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:27.401">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:56:27.400" status="PASS" endtime="20161110 21:56:27.401"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:27.402">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:56:27.401" status="PASS" endtime="20161110 21:56:27.402"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:27.402">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:56:27.402" status="PASS" endtime="20161110 21:56:27.402"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:27.738">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:56:27.738">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:27.403" status="PASS" endtime="20161110 21:56:27.738"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:27.739">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:56:27.738" status="PASS" endtime="20161110 21:56:27.739"></status>
</kw>
<status starttime="20161110 21:56:27.399" status="PASS" endtime="20161110 21:56:27.739"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:28.026">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:56:28.027">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:27.739" status="PASS" endtime="20161110 21:56:28.027"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:28.028">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:56:28.028" status="PASS" endtime="20161110 21:56:28.028"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:28.029">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:56:28.029" status="PASS" endtime="20161110 21:56:28.029"></status>
</kw>
<status starttime="20161110 21:56:28.028" status="PASS" endtime="20161110 21:56:28.029"></status>
</kw>
<status starttime="20161110 21:56:28.027" status="PASS" endtime="20161110 21:56:28.029"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:56:28.029">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:27.392" status="PASS" endtime="20161110 21:56:28.029"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:56:28.030">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:27.390" status="PASS" endtime="20161110 21:56:28.030"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:28.030">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:56:28.030" status="PASS" endtime="20161110 21:56:28.030"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:28.031">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:56:28.031">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:56:28.031">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:56:28.030" status="PASS" endtime="20161110 21:56:28.031"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:56:28.031">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:56:27.387" status="PASS" endtime="20161110 21:56:28.031"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:56:28.032">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:56:28.031" status="FAIL" endtime="20161110 21:56:28.032"></status>
</kw>
<status starttime="20161110 21:56:27.386" status="FAIL" endtime="20161110 21:56:28.032"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:38.034">@{arglist} = [ ]</msg>
<status starttime="20161110 21:56:38.034" status="PASS" endtime="20161110 21:56:38.034"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:38.035">${args} = {u'data': []}</msg>
<status starttime="20161110 21:56:38.035" status="PASS" endtime="20161110 21:56:38.036"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:38.037">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:56:38.037" status="PASS" endtime="20161110 21:56:38.037"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:38.039">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:56:38.039" status="PASS" endtime="20161110 21:56:38.039"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:38.040">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:56:38.040" status="PASS" endtime="20161110 21:56:38.040"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:56:38.040" status="PASS" endtime="20161110 21:56:38.041"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:38.043">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:56:38.042" status="PASS" endtime="20161110 21:56:38.043"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:38.046">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:56:38.046" status="PASS" endtime="20161110 21:56:38.046"></status>
</kw>
<status starttime="20161110 21:56:38.044" status="PASS" endtime="20161110 21:56:38.046"></status>
</kw>
<status starttime="20161110 21:56:38.041" status="PASS" endtime="20161110 21:56:38.046"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:38.047">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:56:38.047" status="PASS" endtime="20161110 21:56:38.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:38.048">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:56:38.048" status="PASS" endtime="20161110 21:56:38.048"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:38.048">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:56:38.048" status="PASS" endtime="20161110 21:56:38.048"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:38.049">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:56:38.049" status="PASS" endtime="20161110 21:56:38.049"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:38.410">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:56:38.410">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:38.049" status="PASS" endtime="20161110 21:56:38.410"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:38.411">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:56:38.410" status="PASS" endtime="20161110 21:56:38.411"></status>
</kw>
<status starttime="20161110 21:56:38.046" status="PASS" endtime="20161110 21:56:38.411"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:38.690">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:56:38.690">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:38.411" status="PASS" endtime="20161110 21:56:38.690"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:38.691">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:56:38.691" status="PASS" endtime="20161110 21:56:38.691"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:38.692">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:56:38.692" status="PASS" endtime="20161110 21:56:38.692"></status>
</kw>
<status starttime="20161110 21:56:38.691" status="PASS" endtime="20161110 21:56:38.692"></status>
</kw>
<status starttime="20161110 21:56:38.690" status="PASS" endtime="20161110 21:56:38.692"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:56:38.693">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:38.038" status="PASS" endtime="20161110 21:56:38.693"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:56:38.693">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:38.036" status="PASS" endtime="20161110 21:56:38.693"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:38.693">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:56:38.693" status="PASS" endtime="20161110 21:56:38.693"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:38.695">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:56:38.695">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:56:38.695">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:56:38.694" status="PASS" endtime="20161110 21:56:38.695"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:56:38.695">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:56:38.033" status="PASS" endtime="20161110 21:56:38.695"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:56:38.696">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:56:38.696" status="FAIL" endtime="20161110 21:56:38.696"></status>
</kw>
<status starttime="20161110 21:56:38.032" status="FAIL" endtime="20161110 21:56:38.696"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:48.699">@{arglist} = [ ]</msg>
<status starttime="20161110 21:56:48.698" status="PASS" endtime="20161110 21:56:48.699"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:48.700">${args} = {u'data': []}</msg>
<status starttime="20161110 21:56:48.699" status="PASS" endtime="20161110 21:56:48.700"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:48.702">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:56:48.702" status="PASS" endtime="20161110 21:56:48.702"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:48.705">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:56:48.704" status="PASS" endtime="20161110 21:56:48.705"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:48.706">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:56:48.705" status="PASS" endtime="20161110 21:56:48.706"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:56:48.706" status="PASS" endtime="20161110 21:56:48.707"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:48.710">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:56:48.708" status="PASS" endtime="20161110 21:56:48.710"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:48.711">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:56:48.711" status="PASS" endtime="20161110 21:56:48.712"></status>
</kw>
<status starttime="20161110 21:56:48.710" status="PASS" endtime="20161110 21:56:48.712"></status>
</kw>
<status starttime="20161110 21:56:48.707" status="PASS" endtime="20161110 21:56:48.712"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:48.713">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:56:48.713" status="PASS" endtime="20161110 21:56:48.714"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:48.715">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:56:48.714" status="PASS" endtime="20161110 21:56:48.715"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:48.716">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:56:48.715" status="PASS" endtime="20161110 21:56:48.716"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:48.716">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:56:48.716" status="PASS" endtime="20161110 21:56:48.716"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:49.049">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:56:49.049">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:48.716" status="PASS" endtime="20161110 21:56:49.049"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:49.050">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:56:49.050" status="PASS" endtime="20161110 21:56:49.051"></status>
</kw>
<status starttime="20161110 21:56:48.712" status="PASS" endtime="20161110 21:56:49.051"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:49.334">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:56:49.334">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:49.051" status="PASS" endtime="20161110 21:56:49.334"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:49.336">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:56:49.336" status="PASS" endtime="20161110 21:56:49.337"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:49.338">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:56:49.337" status="PASS" endtime="20161110 21:56:49.338"></status>
</kw>
<status starttime="20161110 21:56:49.337" status="PASS" endtime="20161110 21:56:49.338"></status>
</kw>
<status starttime="20161110 21:56:49.335" status="PASS" endtime="20161110 21:56:49.338"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:56:49.339">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:48.703" status="PASS" endtime="20161110 21:56:49.339"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:56:49.339">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:48.700" status="PASS" endtime="20161110 21:56:49.339"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:49.340">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:56:49.340" status="PASS" endtime="20161110 21:56:49.340"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:49.341">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:56:49.341">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:56:49.341">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:56:49.340" status="PASS" endtime="20161110 21:56:49.341"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:56:49.342">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:56:48.698" status="PASS" endtime="20161110 21:56:49.342"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:56:49.342">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:56:49.342" status="FAIL" endtime="20161110 21:56:49.343"></status>
</kw>
<status starttime="20161110 21:56:48.697" status="FAIL" endtime="20161110 21:56:49.343"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:59.345">@{arglist} = [ ]</msg>
<status starttime="20161110 21:56:59.345" status="PASS" endtime="20161110 21:56:59.345"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:59.346">${args} = {u'data': []}</msg>
<status starttime="20161110 21:56:59.346" status="PASS" endtime="20161110 21:56:59.346"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:59.348">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:56:59.348" status="PASS" endtime="20161110 21:56:59.348"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:59.350">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:56:59.349" status="PASS" endtime="20161110 21:56:59.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:59.351">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:56:59.350" status="PASS" endtime="20161110 21:56:59.351"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:56:59.351" status="PASS" endtime="20161110 21:56:59.351"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:59.355">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:56:59.353" status="PASS" endtime="20161110 21:56:59.355"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:59.356">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:56:59.355" status="PASS" endtime="20161110 21:56:59.356"></status>
</kw>
<status starttime="20161110 21:56:59.355" status="PASS" endtime="20161110 21:56:59.356"></status>
</kw>
<status starttime="20161110 21:56:59.352" status="PASS" endtime="20161110 21:56:59.356"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:56:59.357">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:56:59.357" status="PASS" endtime="20161110 21:56:59.359"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:59.360">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:56:59.359" status="PASS" endtime="20161110 21:56:59.360"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:59.360">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:56:59.360" status="PASS" endtime="20161110 21:56:59.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:56:59.361">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:56:59.360" status="PASS" endtime="20161110 21:56:59.361"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:03.257">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:57:03.257">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:59.361" status="PASS" endtime="20161110 21:57:03.257"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:03.258">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:57:03.258" status="PASS" endtime="20161110 21:57:03.258"></status>
</kw>
<status starttime="20161110 21:56:59.356" status="PASS" endtime="20161110 21:57:03.259"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:04.555">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:57:04.555">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:03.259" status="PASS" endtime="20161110 21:57:04.555"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:04.557">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:57:04.557" status="PASS" endtime="20161110 21:57:04.558"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:04.559">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:57:04.559" status="PASS" endtime="20161110 21:57:04.559"></status>
</kw>
<status starttime="20161110 21:57:04.558" status="PASS" endtime="20161110 21:57:04.559"></status>
</kw>
<status starttime="20161110 21:57:04.556" status="PASS" endtime="20161110 21:57:04.559"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:57:04.560">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:59.348" status="PASS" endtime="20161110 21:57:04.560"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:57:04.560">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:56:59.347" status="PASS" endtime="20161110 21:57:04.560"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:04.561">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:57:04.561" status="PASS" endtime="20161110 21:57:04.561"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:04.562">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:57:04.562">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:57:04.562">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:57:04.562" status="PASS" endtime="20161110 21:57:04.562"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:57:04.563">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:56:59.344" status="PASS" endtime="20161110 21:57:04.563"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:57:04.564">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:57:04.563" status="FAIL" endtime="20161110 21:57:04.564"></status>
</kw>
<status starttime="20161110 21:56:59.343" status="FAIL" endtime="20161110 21:57:04.564"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:14.567">@{arglist} = [ ]</msg>
<status starttime="20161110 21:57:14.566" status="PASS" endtime="20161110 21:57:14.567"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:14.568">${args} = {u'data': []}</msg>
<status starttime="20161110 21:57:14.567" status="PASS" endtime="20161110 21:57:14.568"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:14.570">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:57:14.569" status="PASS" endtime="20161110 21:57:14.570"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:14.572">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:57:14.571" status="PASS" endtime="20161110 21:57:14.572"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:14.573">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:57:14.572" status="PASS" endtime="20161110 21:57:14.573"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:57:14.573" status="PASS" endtime="20161110 21:57:14.574"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:14.576">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:57:14.575" status="PASS" endtime="20161110 21:57:14.576"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:14.577">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:57:14.577" status="PASS" endtime="20161110 21:57:14.577"></status>
</kw>
<status starttime="20161110 21:57:14.576" status="PASS" endtime="20161110 21:57:14.577"></status>
</kw>
<status starttime="20161110 21:57:14.574" status="PASS" endtime="20161110 21:57:14.577"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:14.578">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:57:14.578" status="PASS" endtime="20161110 21:57:14.578"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:14.579">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:57:14.578" status="PASS" endtime="20161110 21:57:14.579"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:14.579">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:57:14.579" status="PASS" endtime="20161110 21:57:14.579"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:14.580">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:57:14.580" status="PASS" endtime="20161110 21:57:14.580"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:14.910">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:57:14.910">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:14.580" status="PASS" endtime="20161110 21:57:14.910"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:14.910">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:57:14.910" status="PASS" endtime="20161110 21:57:14.911"></status>
</kw>
<status starttime="20161110 21:57:14.577" status="PASS" endtime="20161110 21:57:14.911"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:15.194">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:57:15.195">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:14.911" status="PASS" endtime="20161110 21:57:15.195"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:15.197">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:57:15.196" status="PASS" endtime="20161110 21:57:15.197"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:15.198">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:57:15.197" status="PASS" endtime="20161110 21:57:15.198"></status>
</kw>
<status starttime="20161110 21:57:15.197" status="PASS" endtime="20161110 21:57:15.198"></status>
</kw>
<status starttime="20161110 21:57:15.195" status="PASS" endtime="20161110 21:57:15.198"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:57:15.199">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:14.570" status="PASS" endtime="20161110 21:57:15.199"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:57:15.199">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:14.568" status="PASS" endtime="20161110 21:57:15.199"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:15.200">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:57:15.199" status="PASS" endtime="20161110 21:57:15.200"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:15.201">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:57:15.201">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:57:15.201">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:57:15.200" status="PASS" endtime="20161110 21:57:15.201"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:57:15.201">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:57:14.566" status="PASS" endtime="20161110 21:57:15.201"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:57:15.203">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:57:15.202" status="FAIL" endtime="20161110 21:57:15.203"></status>
</kw>
<status starttime="20161110 21:57:14.565" status="FAIL" endtime="20161110 21:57:15.203"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:25.206">@{arglist} = [ ]</msg>
<status starttime="20161110 21:57:25.206" status="PASS" endtime="20161110 21:57:25.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:25.207">${args} = {u'data': []}</msg>
<status starttime="20161110 21:57:25.206" status="PASS" endtime="20161110 21:57:25.207"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:25.209">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:57:25.208" status="PASS" endtime="20161110 21:57:25.209"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:25.211">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:57:25.210" status="PASS" endtime="20161110 21:57:25.211"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:25.212">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:57:25.211" status="PASS" endtime="20161110 21:57:25.212"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:57:25.212" status="PASS" endtime="20161110 21:57:25.213"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:25.216">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:57:25.214" status="PASS" endtime="20161110 21:57:25.216"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:25.217">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:57:25.216" status="PASS" endtime="20161110 21:57:25.217"></status>
</kw>
<status starttime="20161110 21:57:25.216" status="PASS" endtime="20161110 21:57:25.217"></status>
</kw>
<status starttime="20161110 21:57:25.213" status="PASS" endtime="20161110 21:57:25.217"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:25.218">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:57:25.218" status="PASS" endtime="20161110 21:57:25.218"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:25.219">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:57:25.218" status="PASS" endtime="20161110 21:57:25.219"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:25.219">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:57:25.219" status="PASS" endtime="20161110 21:57:25.219"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:25.220">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:57:25.220" status="PASS" endtime="20161110 21:57:25.220"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:25.552">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:57:25.552">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:25.220" status="PASS" endtime="20161110 21:57:25.552"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:25.552">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:57:25.552" status="PASS" endtime="20161110 21:57:25.552"></status>
</kw>
<status starttime="20161110 21:57:25.217" status="PASS" endtime="20161110 21:57:25.553"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:25.887">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:57:25.887">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:25.553" status="PASS" endtime="20161110 21:57:25.887"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:25.888">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:57:25.888" status="PASS" endtime="20161110 21:57:25.888"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:25.889">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:57:25.889" status="PASS" endtime="20161110 21:57:25.889"></status>
</kw>
<status starttime="20161110 21:57:25.889" status="PASS" endtime="20161110 21:57:25.889"></status>
</kw>
<status starttime="20161110 21:57:25.887" status="PASS" endtime="20161110 21:57:25.889"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:57:25.890">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:25.209" status="PASS" endtime="20161110 21:57:25.890"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:57:25.890">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:25.207" status="PASS" endtime="20161110 21:57:25.890"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:25.890">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:57:25.890" status="PASS" endtime="20161110 21:57:25.890"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:25.891">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:57:25.891">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:57:25.891">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:57:25.891" status="PASS" endtime="20161110 21:57:25.891"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:57:25.891">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:57:25.205" status="PASS" endtime="20161110 21:57:25.891"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:57:25.892">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:57:25.892" status="FAIL" endtime="20161110 21:57:25.892"></status>
</kw>
<status starttime="20161110 21:57:25.204" status="FAIL" endtime="20161110 21:57:25.892"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:35.895">@{arglist} = [ ]</msg>
<status starttime="20161110 21:57:35.894" status="PASS" endtime="20161110 21:57:35.895"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:35.896">${args} = {u'data': []}</msg>
<status starttime="20161110 21:57:35.895" status="PASS" endtime="20161110 21:57:35.896"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:35.898">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:57:35.897" status="PASS" endtime="20161110 21:57:35.898"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:35.900">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:57:35.899" status="PASS" endtime="20161110 21:57:35.900"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:35.900">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:57:35.900" status="PASS" endtime="20161110 21:57:35.900"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:57:35.901" status="PASS" endtime="20161110 21:57:35.901"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:35.904">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:57:35.902" status="PASS" endtime="20161110 21:57:35.904"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:35.905">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:57:35.905" status="PASS" endtime="20161110 21:57:35.905"></status>
</kw>
<status starttime="20161110 21:57:35.904" status="PASS" endtime="20161110 21:57:35.905"></status>
</kw>
<status starttime="20161110 21:57:35.901" status="PASS" endtime="20161110 21:57:35.906"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:35.907">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:57:35.906" status="PASS" endtime="20161110 21:57:35.907"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:35.908">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:57:35.907" status="PASS" endtime="20161110 21:57:35.908"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:35.908">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:57:35.908" status="PASS" endtime="20161110 21:57:35.908"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:35.909">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:57:35.908" status="PASS" endtime="20161110 21:57:35.909"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:36.325">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:57:36.325">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:35.909" status="PASS" endtime="20161110 21:57:36.325"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:36.326">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:57:36.325" status="PASS" endtime="20161110 21:57:36.326"></status>
</kw>
<status starttime="20161110 21:57:35.906" status="PASS" endtime="20161110 21:57:36.327"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:36.606">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:57:36.606">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:36.327" status="PASS" endtime="20161110 21:57:36.606"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:36.608">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:57:36.607" status="PASS" endtime="20161110 21:57:36.608"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:36.609">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:57:36.609" status="PASS" endtime="20161110 21:57:36.610"></status>
</kw>
<status starttime="20161110 21:57:36.608" status="PASS" endtime="20161110 21:57:36.610"></status>
</kw>
<status starttime="20161110 21:57:36.606" status="PASS" endtime="20161110 21:57:36.610"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:57:36.610">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:35.898" status="PASS" endtime="20161110 21:57:36.610"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:57:36.611">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:35.896" status="PASS" endtime="20161110 21:57:36.611"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:36.611">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:57:36.611" status="PASS" endtime="20161110 21:57:36.612"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:36.612">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:57:36.612">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:57:36.613">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:57:36.612" status="PASS" endtime="20161110 21:57:36.613"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:57:36.613">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:57:35.894" status="PASS" endtime="20161110 21:57:36.613"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:57:36.614">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:57:36.613" status="FAIL" endtime="20161110 21:57:36.614"></status>
</kw>
<status starttime="20161110 21:57:35.893" status="FAIL" endtime="20161110 21:57:36.614"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:46.617">@{arglist} = [ ]</msg>
<status starttime="20161110 21:57:46.617" status="PASS" endtime="20161110 21:57:46.617"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:46.619">${args} = {u'data': []}</msg>
<status starttime="20161110 21:57:46.618" status="PASS" endtime="20161110 21:57:46.619"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:46.621">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:57:46.620" status="PASS" endtime="20161110 21:57:46.621"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:46.623">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:57:46.622" status="PASS" endtime="20161110 21:57:46.623"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:46.624">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:57:46.623" status="PASS" endtime="20161110 21:57:46.624"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:57:46.624" status="PASS" endtime="20161110 21:57:46.624"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:46.627">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:57:46.625" status="PASS" endtime="20161110 21:57:46.627"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:46.628">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:57:46.627" status="PASS" endtime="20161110 21:57:46.628"></status>
</kw>
<status starttime="20161110 21:57:46.627" status="PASS" endtime="20161110 21:57:46.628"></status>
</kw>
<status starttime="20161110 21:57:46.625" status="PASS" endtime="20161110 21:57:46.628"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:46.629">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:57:46.628" status="PASS" endtime="20161110 21:57:46.629"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:46.630">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:57:46.629" status="PASS" endtime="20161110 21:57:46.630"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:46.630">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:57:46.630" status="PASS" endtime="20161110 21:57:46.630"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:46.631">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:57:46.630" status="PASS" endtime="20161110 21:57:46.631"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:46.999">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:57:47.000">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:46.631" status="PASS" endtime="20161110 21:57:47.000"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:47.001">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:57:47.000" status="PASS" endtime="20161110 21:57:47.001"></status>
</kw>
<status starttime="20161110 21:57:46.628" status="PASS" endtime="20161110 21:57:47.001"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:47.276">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:57:47.276">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:47.001" status="PASS" endtime="20161110 21:57:47.277"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:47.278">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:57:47.278" status="PASS" endtime="20161110 21:57:47.278"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:47.280">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:57:47.279" status="PASS" endtime="20161110 21:57:47.280"></status>
</kw>
<status starttime="20161110 21:57:47.279" status="PASS" endtime="20161110 21:57:47.280"></status>
</kw>
<status starttime="20161110 21:57:47.277" status="PASS" endtime="20161110 21:57:47.280"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:57:47.281">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:46.621" status="PASS" endtime="20161110 21:57:47.281"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:57:47.281">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:46.619" status="PASS" endtime="20161110 21:57:47.281"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:47.282">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:57:47.281" status="PASS" endtime="20161110 21:57:47.282"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:47.283">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:57:47.283">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:57:47.283">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:57:47.282" status="PASS" endtime="20161110 21:57:47.283"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:57:47.284">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:57:46.616" status="PASS" endtime="20161110 21:57:47.284"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:57:47.285">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:57:47.284" status="FAIL" endtime="20161110 21:57:47.285"></status>
</kw>
<status starttime="20161110 21:57:46.615" status="FAIL" endtime="20161110 21:57:47.285"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:57.288">@{arglist} = [ ]</msg>
<status starttime="20161110 21:57:57.288" status="PASS" endtime="20161110 21:57:57.288"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:57.289">${args} = {u'data': []}</msg>
<status starttime="20161110 21:57:57.289" status="PASS" endtime="20161110 21:57:57.289"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:57.291">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:57:57.291" status="PASS" endtime="20161110 21:57:57.291"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:57.293">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:57:57.293" status="PASS" endtime="20161110 21:57:57.293"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:57.294">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:57:57.294" status="PASS" endtime="20161110 21:57:57.294"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:57:57.294" status="PASS" endtime="20161110 21:57:57.295"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:57.297">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:57:57.296" status="PASS" endtime="20161110 21:57:57.297"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:57.298">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:57:57.298" status="PASS" endtime="20161110 21:57:57.298"></status>
</kw>
<status starttime="20161110 21:57:57.297" status="PASS" endtime="20161110 21:57:57.298"></status>
</kw>
<status starttime="20161110 21:57:57.295" status="PASS" endtime="20161110 21:57:57.298"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:57.299">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:57:57.299" status="PASS" endtime="20161110 21:57:57.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:57.300">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:57:57.300" status="PASS" endtime="20161110 21:57:57.301"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:57.301">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:57:57.301" status="PASS" endtime="20161110 21:57:57.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:57.302">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:57:57.301" status="PASS" endtime="20161110 21:57:57.302"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:57.641">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:57:57.641">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:57.302" status="PASS" endtime="20161110 21:57:57.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:57.642">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:57:57.641" status="PASS" endtime="20161110 21:57:57.642"></status>
</kw>
<status starttime="20161110 21:57:57.299" status="PASS" endtime="20161110 21:57:57.642"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:57.919">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:57:57.919">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:57.642" status="PASS" endtime="20161110 21:57:57.919"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:57.921">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:57:57.920" status="PASS" endtime="20161110 21:57:57.921"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:57.921">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:57:57.921" status="PASS" endtime="20161110 21:57:57.922"></status>
</kw>
<status starttime="20161110 21:57:57.921" status="PASS" endtime="20161110 21:57:57.922"></status>
</kw>
<status starttime="20161110 21:57:57.920" status="PASS" endtime="20161110 21:57:57.922"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:57:57.922">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:57.291" status="PASS" endtime="20161110 21:57:57.922"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:57:57.922">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:57:57.290" status="PASS" endtime="20161110 21:57:57.922"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:57:57.923">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:57:57.922" status="PASS" endtime="20161110 21:57:57.923"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:57:57.923">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:57:57.923">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:57:57.923">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:57:57.923" status="PASS" endtime="20161110 21:57:57.923"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:57:57.924">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:57:57.287" status="PASS" endtime="20161110 21:57:57.924"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:57:57.924">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:57:57.924" status="FAIL" endtime="20161110 21:57:57.924"></status>
</kw>
<status starttime="20161110 21:57:57.286" status="FAIL" endtime="20161110 21:57:57.924"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:07.926">@{arglist} = [ ]</msg>
<status starttime="20161110 21:58:07.926" status="PASS" endtime="20161110 21:58:07.927"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:07.927">${args} = {u'data': []}</msg>
<status starttime="20161110 21:58:07.927" status="PASS" endtime="20161110 21:58:07.927"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:07.928">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:58:07.928" status="PASS" endtime="20161110 21:58:07.928"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:07.929">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:58:07.929" status="PASS" endtime="20161110 21:58:07.929"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:07.930">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:58:07.930" status="PASS" endtime="20161110 21:58:07.930"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:58:07.931" status="PASS" endtime="20161110 21:58:07.931"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:07.932">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:58:07.932" status="PASS" endtime="20161110 21:58:07.932"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:07.933">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:58:07.933" status="PASS" endtime="20161110 21:58:07.933"></status>
</kw>
<status starttime="20161110 21:58:07.933" status="PASS" endtime="20161110 21:58:07.933"></status>
</kw>
<status starttime="20161110 21:58:07.931" status="PASS" endtime="20161110 21:58:07.934"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:07.934">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:58:07.934" status="PASS" endtime="20161110 21:58:07.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:07.935">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:58:07.935" status="PASS" endtime="20161110 21:58:07.935"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:07.936">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:58:07.936" status="PASS" endtime="20161110 21:58:07.936"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:07.936">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:58:07.936" status="PASS" endtime="20161110 21:58:07.936"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:16.354">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:58:16.354">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:07.937" status="PASS" endtime="20161110 21:58:16.354"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:16.355">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:58:16.354" status="PASS" endtime="20161110 21:58:16.355"></status>
</kw>
<status starttime="20161110 21:58:07.934" status="PASS" endtime="20161110 21:58:16.356"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:16.639">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:58:16.639">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:16.356" status="PASS" endtime="20161110 21:58:16.639"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:16.641">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:58:16.640" status="PASS" endtime="20161110 21:58:16.641"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:16.643">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:58:16.643" status="PASS" endtime="20161110 21:58:16.643"></status>
</kw>
<status starttime="20161110 21:58:16.642" status="PASS" endtime="20161110 21:58:16.644"></status>
</kw>
<status starttime="20161110 21:58:16.640" status="PASS" endtime="20161110 21:58:16.644"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:58:16.644">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:07.928" status="PASS" endtime="20161110 21:58:16.644"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:58:16.644">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:07.927" status="PASS" endtime="20161110 21:58:16.644"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:16.645">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:58:16.645" status="PASS" endtime="20161110 21:58:16.645"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:16.646">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:58:16.646">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:58:16.647">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:58:16.646" status="PASS" endtime="20161110 21:58:16.647"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:58:16.647">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:58:07.926" status="PASS" endtime="20161110 21:58:16.647"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:58:16.648">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:58:16.648" status="FAIL" endtime="20161110 21:58:16.648"></status>
</kw>
<status starttime="20161110 21:58:07.925" status="FAIL" endtime="20161110 21:58:16.649"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:26.651">@{arglist} = [ ]</msg>
<status starttime="20161110 21:58:26.651" status="PASS" endtime="20161110 21:58:26.651"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:26.652">${args} = {u'data': []}</msg>
<status starttime="20161110 21:58:26.652" status="PASS" endtime="20161110 21:58:26.652"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:26.654">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:58:26.653" status="PASS" endtime="20161110 21:58:26.654"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:26.656">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:58:26.655" status="PASS" endtime="20161110 21:58:26.656"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:26.657">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:58:26.656" status="PASS" endtime="20161110 21:58:26.657"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:58:26.657" status="PASS" endtime="20161110 21:58:26.657"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:26.660">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:58:26.659" status="PASS" endtime="20161110 21:58:26.660"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:26.661">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:58:26.661" status="PASS" endtime="20161110 21:58:26.661"></status>
</kw>
<status starttime="20161110 21:58:26.660" status="PASS" endtime="20161110 21:58:26.662"></status>
</kw>
<status starttime="20161110 21:58:26.658" status="PASS" endtime="20161110 21:58:26.662"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:26.663">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:58:26.663" status="PASS" endtime="20161110 21:58:26.664"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:26.665">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:58:26.664" status="PASS" endtime="20161110 21:58:26.665"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:26.666">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:58:26.665" status="PASS" endtime="20161110 21:58:26.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:26.667">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:58:26.666" status="PASS" endtime="20161110 21:58:26.667"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:27.001">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:58:27.001">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:26.667" status="PASS" endtime="20161110 21:58:27.001"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:27.003">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:58:27.002" status="PASS" endtime="20161110 21:58:27.003"></status>
</kw>
<status starttime="20161110 21:58:26.662" status="PASS" endtime="20161110 21:58:27.003"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:27.433">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:58:27.433">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:27.003" status="PASS" endtime="20161110 21:58:27.433"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:27.435">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:58:27.434" status="PASS" endtime="20161110 21:58:27.435"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:27.436">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:58:27.436" status="PASS" endtime="20161110 21:58:27.437"></status>
</kw>
<status starttime="20161110 21:58:27.435" status="PASS" endtime="20161110 21:58:27.437"></status>
</kw>
<status starttime="20161110 21:58:27.433" status="PASS" endtime="20161110 21:58:27.437"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:58:27.437">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:26.654" status="PASS" endtime="20161110 21:58:27.437"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:58:27.438">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:26.652" status="PASS" endtime="20161110 21:58:27.438"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:27.439">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:58:27.438" status="PASS" endtime="20161110 21:58:27.439"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:27.440">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:58:27.440">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:58:27.440">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:58:27.439" status="PASS" endtime="20161110 21:58:27.440"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:58:27.441">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:58:26.650" status="PASS" endtime="20161110 21:58:27.441"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:58:27.441">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:58:27.441" status="FAIL" endtime="20161110 21:58:27.442"></status>
</kw>
<status starttime="20161110 21:58:26.649" status="FAIL" endtime="20161110 21:58:27.442"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:37.444">@{arglist} = [ ]</msg>
<status starttime="20161110 21:58:37.443" status="PASS" endtime="20161110 21:58:37.444"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:37.444">${args} = {u'data': []}</msg>
<status starttime="20161110 21:58:37.444" status="PASS" endtime="20161110 21:58:37.444"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:37.445">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:58:37.445" status="PASS" endtime="20161110 21:58:37.445"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:37.447">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:58:37.446" status="PASS" endtime="20161110 21:58:37.447"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:37.447">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:58:37.447" status="PASS" endtime="20161110 21:58:37.447"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:58:37.447" status="PASS" endtime="20161110 21:58:37.448"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:37.450">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:58:37.449" status="PASS" endtime="20161110 21:58:37.450"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:37.450">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:58:37.450" status="PASS" endtime="20161110 21:58:37.451"></status>
</kw>
<status starttime="20161110 21:58:37.450" status="PASS" endtime="20161110 21:58:37.451"></status>
</kw>
<status starttime="20161110 21:58:37.448" status="PASS" endtime="20161110 21:58:37.451"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:37.452">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:58:37.451" status="PASS" endtime="20161110 21:58:37.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:37.452">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:58:37.452" status="PASS" endtime="20161110 21:58:37.452"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:37.453">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:58:37.453" status="PASS" endtime="20161110 21:58:37.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:37.454">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:58:37.453" status="PASS" endtime="20161110 21:58:37.454"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:37.782">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:58:37.782">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:37.454" status="PASS" endtime="20161110 21:58:37.783"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:37.783">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:58:37.783" status="PASS" endtime="20161110 21:58:37.783"></status>
</kw>
<status starttime="20161110 21:58:37.451" status="PASS" endtime="20161110 21:58:37.783"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:38.070">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:58:38.070">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:37.784" status="PASS" endtime="20161110 21:58:38.070"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:38.072">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:58:38.071" status="PASS" endtime="20161110 21:58:38.072"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:38.073">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:58:38.073" status="PASS" endtime="20161110 21:58:38.074"></status>
</kw>
<status starttime="20161110 21:58:38.072" status="PASS" endtime="20161110 21:58:38.074"></status>
</kw>
<status starttime="20161110 21:58:38.070" status="PASS" endtime="20161110 21:58:38.074"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:58:38.074">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:37.446" status="PASS" endtime="20161110 21:58:38.074"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:58:38.074">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:37.444" status="PASS" endtime="20161110 21:58:38.074"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:38.076">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:58:38.075" status="PASS" endtime="20161110 21:58:38.076"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:38.076">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:58:38.076">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:58:38.077">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:58:38.076" status="PASS" endtime="20161110 21:58:38.077"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:58:38.077">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:58:37.443" status="PASS" endtime="20161110 21:58:38.077"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:58:38.078">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:58:38.077" status="FAIL" endtime="20161110 21:58:38.078"></status>
</kw>
<status starttime="20161110 21:58:37.442" status="FAIL" endtime="20161110 21:58:38.078"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:48.084">@{arglist} = [ ]</msg>
<status starttime="20161110 21:58:48.081" status="PASS" endtime="20161110 21:58:48.084"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:48.085">${args} = {u'data': []}</msg>
<status starttime="20161110 21:58:48.084" status="PASS" endtime="20161110 21:58:48.085"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:48.087">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:58:48.086" status="PASS" endtime="20161110 21:58:48.087"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:48.089">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:58:48.088" status="PASS" endtime="20161110 21:58:48.089"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:48.090">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:58:48.089" status="PASS" endtime="20161110 21:58:48.090"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:58:48.090" status="PASS" endtime="20161110 21:58:48.091"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:48.093">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:58:48.092" status="PASS" endtime="20161110 21:58:48.093"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:48.094">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:58:48.094" status="PASS" endtime="20161110 21:58:48.094"></status>
</kw>
<status starttime="20161110 21:58:48.093" status="PASS" endtime="20161110 21:58:48.094"></status>
</kw>
<status starttime="20161110 21:58:48.091" status="PASS" endtime="20161110 21:58:48.094"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:48.096">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:58:48.095" status="PASS" endtime="20161110 21:58:48.096"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:48.097">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:58:48.097" status="PASS" endtime="20161110 21:58:48.097"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:48.098">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:58:48.097" status="PASS" endtime="20161110 21:58:48.098"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:48.099">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:58:48.098" status="PASS" endtime="20161110 21:58:48.099"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:48.429">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:58:48.429">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:48.099" status="PASS" endtime="20161110 21:58:48.429"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:48.431">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:58:48.430" status="PASS" endtime="20161110 21:58:48.431"></status>
</kw>
<status starttime="20161110 21:58:48.095" status="PASS" endtime="20161110 21:58:48.431"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:48.712">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:58:48.713">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:48.431" status="PASS" endtime="20161110 21:58:48.713"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:48.714">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:58:48.713" status="PASS" endtime="20161110 21:58:48.714"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:48.715">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:58:48.714" status="PASS" endtime="20161110 21:58:48.715"></status>
</kw>
<status starttime="20161110 21:58:48.714" status="PASS" endtime="20161110 21:58:48.715"></status>
</kw>
<status starttime="20161110 21:58:48.713" status="PASS" endtime="20161110 21:58:48.715"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:58:48.715">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:48.087" status="PASS" endtime="20161110 21:58:48.715"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:58:48.715">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:48.085" status="PASS" endtime="20161110 21:58:48.715"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:48.716">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:58:48.716" status="PASS" endtime="20161110 21:58:48.716"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:48.716">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:58:48.716">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:58:48.717">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:58:48.716" status="PASS" endtime="20161110 21:58:48.717"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:58:48.717">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:58:48.080" status="PASS" endtime="20161110 21:58:48.717"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:58:48.717">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:58:48.717" status="FAIL" endtime="20161110 21:58:48.717"></status>
</kw>
<status starttime="20161110 21:58:48.079" status="FAIL" endtime="20161110 21:58:48.718"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:58.719">@{arglist} = [ ]</msg>
<status starttime="20161110 21:58:58.719" status="PASS" endtime="20161110 21:58:58.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:58.720">${args} = {u'data': []}</msg>
<status starttime="20161110 21:58:58.720" status="PASS" endtime="20161110 21:58:58.720"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:58.721">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:58:58.721" status="PASS" endtime="20161110 21:58:58.721"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:58.722">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:58:58.722" status="PASS" endtime="20161110 21:58:58.722"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:58.723">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:58:58.723" status="PASS" endtime="20161110 21:58:58.723"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:58:58.723" status="PASS" endtime="20161110 21:58:58.723"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:58.725">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:58:58.724" status="PASS" endtime="20161110 21:58:58.725"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:58.726">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:58:58.726" status="PASS" endtime="20161110 21:58:58.726"></status>
</kw>
<status starttime="20161110 21:58:58.725" status="PASS" endtime="20161110 21:58:58.726"></status>
</kw>
<status starttime="20161110 21:58:58.723" status="PASS" endtime="20161110 21:58:58.726"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:58.727">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:58:58.727" status="PASS" endtime="20161110 21:58:58.728"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:58.728">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:58:58.728" status="PASS" endtime="20161110 21:58:58.728"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:58.729">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:58:58.728" status="PASS" endtime="20161110 21:58:58.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:58.729">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:58:58.729" status="PASS" endtime="20161110 21:58:58.729"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:59.063">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:58:59.063">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:58.730" status="PASS" endtime="20161110 21:58:59.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:59.064">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:58:59.064" status="PASS" endtime="20161110 21:58:59.064"></status>
</kw>
<status starttime="20161110 21:58:58.726" status="PASS" endtime="20161110 21:58:59.065"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:59.351">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:58:59.351">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:59.065" status="PASS" endtime="20161110 21:58:59.351"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:59.353">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:58:59.352" status="PASS" endtime="20161110 21:58:59.353"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:59.354">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:58:59.354" status="PASS" endtime="20161110 21:58:59.355"></status>
</kw>
<status starttime="20161110 21:58:59.353" status="PASS" endtime="20161110 21:58:59.355"></status>
</kw>
<status starttime="20161110 21:58:59.351" status="PASS" endtime="20161110 21:58:59.355"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:58:59.355">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:58.721" status="PASS" endtime="20161110 21:58:59.355"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:58:59.356">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:58:58.720" status="PASS" endtime="20161110 21:58:59.356"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:58:59.357">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:58:59.356" status="PASS" endtime="20161110 21:58:59.357"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:58:59.358">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:58:59.358">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:58:59.358">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:58:59.357" status="PASS" endtime="20161110 21:58:59.358"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:58:59.358">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:58:58.719" status="PASS" endtime="20161110 21:58:59.358"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:58:59.360">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:58:59.360" status="FAIL" endtime="20161110 21:58:59.360"></status>
</kw>
<status starttime="20161110 21:58:58.718" status="FAIL" endtime="20161110 21:58:59.360"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:09.363">@{arglist} = [ ]</msg>
<status starttime="20161110 21:59:09.362" status="PASS" endtime="20161110 21:59:09.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:09.364">${args} = {u'data': []}</msg>
<status starttime="20161110 21:59:09.363" status="PASS" endtime="20161110 21:59:09.364"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:09.366">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:59:09.365" status="PASS" endtime="20161110 21:59:09.366"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:09.368">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:59:09.368" status="PASS" endtime="20161110 21:59:09.368"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:09.369">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:59:09.369" status="PASS" endtime="20161110 21:59:09.369"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:59:09.370" status="PASS" endtime="20161110 21:59:09.370"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:09.372">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:59:09.371" status="PASS" endtime="20161110 21:59:09.372"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:09.373">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:59:09.372" status="PASS" endtime="20161110 21:59:09.373"></status>
</kw>
<status starttime="20161110 21:59:09.372" status="PASS" endtime="20161110 21:59:09.373"></status>
</kw>
<status starttime="20161110 21:59:09.370" status="PASS" endtime="20161110 21:59:09.373"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:09.374">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:59:09.374" status="PASS" endtime="20161110 21:59:09.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:09.375">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:59:09.375" status="PASS" endtime="20161110 21:59:09.375"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:09.376">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:59:09.376" status="PASS" endtime="20161110 21:59:09.376"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:09.377">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:59:09.376" status="PASS" endtime="20161110 21:59:09.377"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:09.708">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:59:09.708">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:09.377" status="PASS" endtime="20161110 21:59:09.709"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:09.709">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:59:09.709" status="PASS" endtime="20161110 21:59:09.709"></status>
</kw>
<status starttime="20161110 21:59:09.373" status="PASS" endtime="20161110 21:59:09.710"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:09.990">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:59:09.990">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:09.710" status="PASS" endtime="20161110 21:59:09.990"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:09.993">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:59:09.991" status="PASS" endtime="20161110 21:59:09.993"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:09.994">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:59:09.994" status="PASS" endtime="20161110 21:59:09.994"></status>
</kw>
<status starttime="20161110 21:59:09.993" status="PASS" endtime="20161110 21:59:09.994"></status>
</kw>
<status starttime="20161110 21:59:09.991" status="PASS" endtime="20161110 21:59:09.994"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:59:09.995">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:09.366" status="PASS" endtime="20161110 21:59:09.995"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:59:09.995">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:09.364" status="PASS" endtime="20161110 21:59:09.995"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:09.996">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:59:09.996" status="PASS" endtime="20161110 21:59:09.996"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:09.997">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:59:09.997">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:59:09.997">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:59:09.997" status="PASS" endtime="20161110 21:59:09.997"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:59:09.998">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:59:09.362" status="PASS" endtime="20161110 21:59:09.998"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:59:09.999">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:59:09.998" status="FAIL" endtime="20161110 21:59:09.999"></status>
</kw>
<status starttime="20161110 21:59:09.361" status="FAIL" endtime="20161110 21:59:09.999"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:20.002">@{arglist} = [ ]</msg>
<status starttime="20161110 21:59:20.001" status="PASS" endtime="20161110 21:59:20.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:20.003">${args} = {u'data': []}</msg>
<status starttime="20161110 21:59:20.002" status="PASS" endtime="20161110 21:59:20.003"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:20.005">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:59:20.004" status="PASS" endtime="20161110 21:59:20.005"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:20.007">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:59:20.006" status="PASS" endtime="20161110 21:59:20.007"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:20.008">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:59:20.007" status="PASS" endtime="20161110 21:59:20.008"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:59:20.008" status="PASS" endtime="20161110 21:59:20.009"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:20.010">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:59:20.010" status="PASS" endtime="20161110 21:59:20.011"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:20.011">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:59:20.011" status="PASS" endtime="20161110 21:59:20.011"></status>
</kw>
<status starttime="20161110 21:59:20.011" status="PASS" endtime="20161110 21:59:20.012"></status>
</kw>
<status starttime="20161110 21:59:20.009" status="PASS" endtime="20161110 21:59:20.012"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:20.013">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:59:20.012" status="PASS" endtime="20161110 21:59:20.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:20.013">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:59:20.013" status="PASS" endtime="20161110 21:59:20.013"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:20.014">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:59:20.014" status="PASS" endtime="20161110 21:59:20.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:20.014">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:59:20.014" status="PASS" endtime="20161110 21:59:20.015"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:24.478">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:59:24.479">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:20.015" status="PASS" endtime="20161110 21:59:24.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:24.480">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:59:24.479" status="PASS" endtime="20161110 21:59:24.481"></status>
</kw>
<status starttime="20161110 21:59:20.012" status="PASS" endtime="20161110 21:59:24.481"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:25.697">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:59:25.697">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:24.481" status="PASS" endtime="20161110 21:59:25.698"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:25.700">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:59:25.699" status="PASS" endtime="20161110 21:59:25.700"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:25.701">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:59:25.701" status="PASS" endtime="20161110 21:59:25.701"></status>
</kw>
<status starttime="20161110 21:59:25.700" status="PASS" endtime="20161110 21:59:25.702"></status>
</kw>
<status starttime="20161110 21:59:25.698" status="PASS" endtime="20161110 21:59:25.702"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:59:25.702">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:20.005" status="PASS" endtime="20161110 21:59:25.702"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:59:25.703">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:20.003" status="PASS" endtime="20161110 21:59:25.703"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:25.703">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:59:25.703" status="PASS" endtime="20161110 21:59:25.704"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:25.704">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:59:25.704">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:59:25.704">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:59:25.704" status="PASS" endtime="20161110 21:59:25.705"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:59:25.705">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:59:20.001" status="PASS" endtime="20161110 21:59:25.705"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:59:25.706">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:59:25.705" status="FAIL" endtime="20161110 21:59:25.706"></status>
</kw>
<status starttime="20161110 21:59:20.000" status="FAIL" endtime="20161110 21:59:25.706"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:35.709">@{arglist} = [ ]</msg>
<status starttime="20161110 21:59:35.709" status="PASS" endtime="20161110 21:59:35.709"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:35.710">${args} = {u'data': []}</msg>
<status starttime="20161110 21:59:35.709" status="PASS" endtime="20161110 21:59:35.710"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:35.712">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:59:35.711" status="PASS" endtime="20161110 21:59:35.712"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:35.714">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:59:35.713" status="PASS" endtime="20161110 21:59:35.714"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:35.715">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:59:35.714" status="PASS" endtime="20161110 21:59:35.715"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:59:35.715" status="PASS" endtime="20161110 21:59:35.716"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:35.719">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:59:35.717" status="PASS" endtime="20161110 21:59:35.719"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:35.720">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:59:35.720" status="PASS" endtime="20161110 21:59:35.721"></status>
</kw>
<status starttime="20161110 21:59:35.719" status="PASS" endtime="20161110 21:59:35.721"></status>
</kw>
<status starttime="20161110 21:59:35.716" status="PASS" endtime="20161110 21:59:35.721"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:35.722">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:59:35.721" status="PASS" endtime="20161110 21:59:35.722"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:35.722">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:59:35.722" status="PASS" endtime="20161110 21:59:35.722"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:35.723">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:59:35.723" status="PASS" endtime="20161110 21:59:35.723"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:35.724">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:59:35.723" status="PASS" endtime="20161110 21:59:35.724"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:36.061">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:59:36.061">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:35.724" status="PASS" endtime="20161110 21:59:36.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:36.063">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:59:36.062" status="PASS" endtime="20161110 21:59:36.063"></status>
</kw>
<status starttime="20161110 21:59:35.721" status="PASS" endtime="20161110 21:59:36.063"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:36.343">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:59:36.343">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:36.063" status="PASS" endtime="20161110 21:59:36.343"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:36.345">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:59:36.344" status="PASS" endtime="20161110 21:59:36.346"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:36.347">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:59:36.347" status="PASS" endtime="20161110 21:59:36.348"></status>
</kw>
<status starttime="20161110 21:59:36.346" status="PASS" endtime="20161110 21:59:36.348"></status>
</kw>
<status starttime="20161110 21:59:36.343" status="PASS" endtime="20161110 21:59:36.348"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:59:36.349">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:35.712" status="PASS" endtime="20161110 21:59:36.349"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:59:36.349">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:35.711" status="PASS" endtime="20161110 21:59:36.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:36.351">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:59:36.350" status="PASS" endtime="20161110 21:59:36.351"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:36.352">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:59:36.352">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:59:36.352">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:59:36.351" status="PASS" endtime="20161110 21:59:36.352"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:59:36.353">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:59:35.708" status="PASS" endtime="20161110 21:59:36.353"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:59:36.354">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:59:36.353" status="FAIL" endtime="20161110 21:59:36.354"></status>
</kw>
<status starttime="20161110 21:59:35.707" status="FAIL" endtime="20161110 21:59:36.355"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:46.358">@{arglist} = [ ]</msg>
<status starttime="20161110 21:59:46.357" status="PASS" endtime="20161110 21:59:46.358"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:46.359">${args} = {u'data': []}</msg>
<status starttime="20161110 21:59:46.359" status="PASS" endtime="20161110 21:59:46.359"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:46.361">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:59:46.361" status="PASS" endtime="20161110 21:59:46.361"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:46.364">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:59:46.363" status="PASS" endtime="20161110 21:59:46.364"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:46.365">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:59:46.364" status="PASS" endtime="20161110 21:59:46.365"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:59:46.366" status="PASS" endtime="20161110 21:59:46.366"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:46.369">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:59:46.368" status="PASS" endtime="20161110 21:59:46.370"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:46.371">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:59:46.371" status="PASS" endtime="20161110 21:59:46.371"></status>
</kw>
<status starttime="20161110 21:59:46.370" status="PASS" endtime="20161110 21:59:46.371"></status>
</kw>
<status starttime="20161110 21:59:46.367" status="PASS" endtime="20161110 21:59:46.371"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:46.372">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:59:46.372" status="PASS" endtime="20161110 21:59:46.372"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:46.373">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:59:46.373" status="PASS" endtime="20161110 21:59:46.373"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:46.374">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:59:46.374" status="PASS" endtime="20161110 21:59:46.374"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:46.375">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:59:46.374" status="PASS" endtime="20161110 21:59:46.375"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:46.709">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:59:46.709">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:46.375" status="PASS" endtime="20161110 21:59:46.709"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:46.710">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:59:46.709" status="PASS" endtime="20161110 21:59:46.710"></status>
</kw>
<status starttime="20161110 21:59:46.371" status="PASS" endtime="20161110 21:59:46.710"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:46.991">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:59:46.991">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:46.710" status="PASS" endtime="20161110 21:59:46.991"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:46.993">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:59:46.992" status="PASS" endtime="20161110 21:59:46.993"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:46.994">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:59:46.994" status="PASS" endtime="20161110 21:59:46.994"></status>
</kw>
<status starttime="20161110 21:59:46.993" status="PASS" endtime="20161110 21:59:46.995"></status>
</kw>
<status starttime="20161110 21:59:46.991" status="PASS" endtime="20161110 21:59:46.995"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:59:46.995">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:46.362" status="PASS" endtime="20161110 21:59:46.995"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:59:46.996">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:46.360" status="PASS" endtime="20161110 21:59:46.996"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:46.996">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:59:46.996" status="PASS" endtime="20161110 21:59:46.997"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:46.997">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:59:46.997">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:59:46.998">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:59:46.997" status="PASS" endtime="20161110 21:59:46.998"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:59:46.998">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:59:46.356" status="PASS" endtime="20161110 21:59:46.998"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:59:46.999">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:59:46.999" status="FAIL" endtime="20161110 21:59:46.999"></status>
</kw>
<status starttime="20161110 21:59:46.355" status="FAIL" endtime="20161110 21:59:47.000"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:57.002">@{arglist} = [ ]</msg>
<status starttime="20161110 21:59:57.002" status="PASS" endtime="20161110 21:59:57.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:57.003">${args} = {u'data': []}</msg>
<status starttime="20161110 21:59:57.003" status="PASS" endtime="20161110 21:59:57.004"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:57.005">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 21:59:57.005" status="PASS" endtime="20161110 21:59:57.005"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:57.007">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 21:59:57.007" status="PASS" endtime="20161110 21:59:57.007"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:57.008">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:59:57.008" status="PASS" endtime="20161110 21:59:57.009"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 21:59:57.009" status="PASS" endtime="20161110 21:59:57.009"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:57.011">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:59:57.011" status="PASS" endtime="20161110 21:59:57.012"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:57.012">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 21:59:57.012" status="PASS" endtime="20161110 21:59:57.013"></status>
</kw>
<status starttime="20161110 21:59:57.012" status="PASS" endtime="20161110 21:59:57.013"></status>
</kw>
<status starttime="20161110 21:59:57.010" status="PASS" endtime="20161110 21:59:57.013"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:57.014">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 21:59:57.013" status="PASS" endtime="20161110 21:59:57.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:57.015">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 21:59:57.014" status="PASS" endtime="20161110 21:59:57.015"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:57.015">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 21:59:57.015" status="PASS" endtime="20161110 21:59:57.015"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:57.016">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 21:59:57.015" status="PASS" endtime="20161110 21:59:57.016"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:57.347">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:59:57.347">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:57.016" status="PASS" endtime="20161110 21:59:57.347"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:57.348">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:59:57.347" status="PASS" endtime="20161110 21:59:57.348"></status>
</kw>
<status starttime="20161110 21:59:57.013" status="PASS" endtime="20161110 21:59:57.349"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:57.637">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 21:59:57.637">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:57.349" status="PASS" endtime="20161110 21:59:57.637"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:57.638">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:59:57.638" status="PASS" endtime="20161110 21:59:57.638"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:57.639">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 21:59:57.639" status="PASS" endtime="20161110 21:59:57.639"></status>
</kw>
<status starttime="20161110 21:59:57.638" status="PASS" endtime="20161110 21:59:57.639"></status>
</kw>
<status starttime="20161110 21:59:57.637" status="PASS" endtime="20161110 21:59:57.639"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:59:57.640">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:57.006" status="PASS" endtime="20161110 21:59:57.640"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:59:57.640">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 21:59:57.004" status="PASS" endtime="20161110 21:59:57.640"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 21:59:57.640">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 21:59:57.640" status="PASS" endtime="20161110 21:59:57.640"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 21:59:57.641">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 21:59:57.641">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 21:59:57.641">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 21:59:57.641" status="PASS" endtime="20161110 21:59:57.641"></status>
</kw>
<msg level="INFO" timestamp="20161110 21:59:57.641">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 21:59:57.001" status="PASS" endtime="20161110 21:59:57.641"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 21:59:57.642">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:59:57.642" status="FAIL" endtime="20161110 21:59:57.642"></status>
</kw>
<status starttime="20161110 21:59:57.000" status="FAIL" endtime="20161110 21:59:57.642"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:07.644">@{arglist} = [ ]</msg>
<status starttime="20161110 22:00:07.644" status="PASS" endtime="20161110 22:00:07.644"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:07.645">${args} = {u'data': []}</msg>
<status starttime="20161110 22:00:07.645" status="PASS" endtime="20161110 22:00:07.645"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:07.648">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:00:07.647" status="PASS" endtime="20161110 22:00:07.648"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:07.650">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:00:07.649" status="PASS" endtime="20161110 22:00:07.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:07.651">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:00:07.650" status="PASS" endtime="20161110 22:00:07.651"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:00:07.651" status="PASS" endtime="20161110 22:00:07.652"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:07.654">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:00:07.653" status="PASS" endtime="20161110 22:00:07.654"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:07.655">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:00:07.655" status="PASS" endtime="20161110 22:00:07.656"></status>
</kw>
<status starttime="20161110 22:00:07.654" status="PASS" endtime="20161110 22:00:07.656"></status>
</kw>
<status starttime="20161110 22:00:07.652" status="PASS" endtime="20161110 22:00:07.656"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:07.657">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:00:07.657" status="PASS" endtime="20161110 22:00:07.658"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:07.659">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:00:07.658" status="PASS" endtime="20161110 22:00:07.659"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:07.660">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:00:07.659" status="PASS" endtime="20161110 22:00:07.660"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:07.660">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:00:07.660" status="PASS" endtime="20161110 22:00:07.661"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:07.997">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:00:07.997">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:07.661" status="PASS" endtime="20161110 22:00:07.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:07.998">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:00:07.997" status="PASS" endtime="20161110 22:00:07.998"></status>
</kw>
<status starttime="20161110 22:00:07.656" status="PASS" endtime="20161110 22:00:07.998"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:08.278">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:00:08.278">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:07.998" status="PASS" endtime="20161110 22:00:08.278"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:08.280">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:00:08.279" status="PASS" endtime="20161110 22:00:08.280"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:08.280">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:00:08.280" status="PASS" endtime="20161110 22:00:08.280"></status>
</kw>
<status starttime="20161110 22:00:08.280" status="PASS" endtime="20161110 22:00:08.281"></status>
</kw>
<status starttime="20161110 22:00:08.279" status="PASS" endtime="20161110 22:00:08.281"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:00:08.281">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:07.648" status="PASS" endtime="20161110 22:00:08.281"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:00:08.281">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:07.646" status="PASS" endtime="20161110 22:00:08.281"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:08.282">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:00:08.281" status="PASS" endtime="20161110 22:00:08.282"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:08.283">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:00:08.283">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:00:08.283">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:00:08.282" status="PASS" endtime="20161110 22:00:08.283"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:00:08.284">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:00:07.643" status="PASS" endtime="20161110 22:00:08.284"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:00:08.285">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:00:08.284" status="FAIL" endtime="20161110 22:00:08.285"></status>
</kw>
<status starttime="20161110 22:00:07.643" status="FAIL" endtime="20161110 22:00:08.285"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:18.288">@{arglist} = [ ]</msg>
<status starttime="20161110 22:00:18.288" status="PASS" endtime="20161110 22:00:18.288"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:18.289">${args} = {u'data': []}</msg>
<status starttime="20161110 22:00:18.289" status="PASS" endtime="20161110 22:00:18.289"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:18.292">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:00:18.291" status="PASS" endtime="20161110 22:00:18.292"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:18.294">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:00:18.293" status="PASS" endtime="20161110 22:00:18.294"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:18.295">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:00:18.294" status="PASS" endtime="20161110 22:00:18.295"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:00:18.295" status="PASS" endtime="20161110 22:00:18.295"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:18.298">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:00:18.297" status="PASS" endtime="20161110 22:00:18.298"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:18.299">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:00:18.299" status="PASS" endtime="20161110 22:00:18.299"></status>
</kw>
<status starttime="20161110 22:00:18.298" status="PASS" endtime="20161110 22:00:18.299"></status>
</kw>
<status starttime="20161110 22:00:18.296" status="PASS" endtime="20161110 22:00:18.300"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:18.301">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:00:18.300" status="PASS" endtime="20161110 22:00:18.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:18.303">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:00:18.303" status="PASS" endtime="20161110 22:00:18.303"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:18.304">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:00:18.303" status="PASS" endtime="20161110 22:00:18.304"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:18.304">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:00:18.304" status="PASS" endtime="20161110 22:00:18.304"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:18.635">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:00:18.635">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:18.305" status="PASS" endtime="20161110 22:00:18.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:18.636">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:00:18.636" status="PASS" endtime="20161110 22:00:18.636"></status>
</kw>
<status starttime="20161110 22:00:18.300" status="PASS" endtime="20161110 22:00:18.636"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:18.925">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:00:18.925">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:18.637" status="PASS" endtime="20161110 22:00:18.925"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:18.926">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:00:18.925" status="PASS" endtime="20161110 22:00:18.926"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:18.927">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:00:18.926" status="PASS" endtime="20161110 22:00:18.927"></status>
</kw>
<status starttime="20161110 22:00:18.926" status="PASS" endtime="20161110 22:00:18.927"></status>
</kw>
<status starttime="20161110 22:00:18.925" status="PASS" endtime="20161110 22:00:18.927"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:00:18.927">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:18.292" status="PASS" endtime="20161110 22:00:18.927"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:00:18.927">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:18.290" status="PASS" endtime="20161110 22:00:18.927"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:18.928">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:00:18.928" status="PASS" endtime="20161110 22:00:18.928"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:18.929">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:00:18.929">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:00:18.929">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:00:18.928" status="PASS" endtime="20161110 22:00:18.929"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:00:18.929">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:00:18.287" status="PASS" endtime="20161110 22:00:18.929"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:00:18.930">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:00:18.929" status="FAIL" endtime="20161110 22:00:18.930"></status>
</kw>
<status starttime="20161110 22:00:18.286" status="FAIL" endtime="20161110 22:00:18.930"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:28.932">@{arglist} = [ ]</msg>
<status starttime="20161110 22:00:28.931" status="PASS" endtime="20161110 22:00:28.932"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:28.933">${args} = {u'data': []}</msg>
<status starttime="20161110 22:00:28.932" status="PASS" endtime="20161110 22:00:28.933"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:28.935">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:00:28.934" status="PASS" endtime="20161110 22:00:28.936"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:28.938">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:00:28.938" status="PASS" endtime="20161110 22:00:28.938"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:28.940">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:00:28.939" status="PASS" endtime="20161110 22:00:28.940"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:00:28.940" status="PASS" endtime="20161110 22:00:28.941"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:28.944">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:00:28.943" status="PASS" endtime="20161110 22:00:28.944"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:28.944">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:00:28.944" status="PASS" endtime="20161110 22:00:28.945"></status>
</kw>
<status starttime="20161110 22:00:28.944" status="PASS" endtime="20161110 22:00:28.945"></status>
</kw>
<status starttime="20161110 22:00:28.942" status="PASS" endtime="20161110 22:00:28.945"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:28.946">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:00:28.945" status="PASS" endtime="20161110 22:00:28.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:28.946">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:00:28.946" status="PASS" endtime="20161110 22:00:28.946"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:28.947">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:00:28.947" status="PASS" endtime="20161110 22:00:28.947"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:28.948">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:00:28.947" status="PASS" endtime="20161110 22:00:28.948"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:37.082">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:00:37.082">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:28.948" status="PASS" endtime="20161110 22:00:37.082"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:37.083">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:00:37.083" status="PASS" endtime="20161110 22:00:37.083"></status>
</kw>
<status starttime="20161110 22:00:28.945" status="PASS" endtime="20161110 22:00:37.084"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:37.360">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:00:37.361">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:37.084" status="PASS" endtime="20161110 22:00:37.361"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:37.363">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:00:37.362" status="PASS" endtime="20161110 22:00:37.363"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:37.364">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:00:37.364" status="PASS" endtime="20161110 22:00:37.364"></status>
</kw>
<status starttime="20161110 22:00:37.363" status="PASS" endtime="20161110 22:00:37.364"></status>
</kw>
<status starttime="20161110 22:00:37.361" status="PASS" endtime="20161110 22:00:37.364"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:00:37.365">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:28.936" status="PASS" endtime="20161110 22:00:37.365"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:00:37.365">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:28.933" status="PASS" endtime="20161110 22:00:37.365"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:37.366">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:00:37.366" status="PASS" endtime="20161110 22:00:37.366"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:37.367">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:00:37.367">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:00:37.367">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:00:37.367" status="PASS" endtime="20161110 22:00:37.367"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:00:37.368">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:00:28.931" status="PASS" endtime="20161110 22:00:37.368"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:00:37.369">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:00:37.368" status="FAIL" endtime="20161110 22:00:37.369"></status>
</kw>
<status starttime="20161110 22:00:28.930" status="FAIL" endtime="20161110 22:00:37.370"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:47.372">@{arglist} = [ ]</msg>
<status starttime="20161110 22:00:47.372" status="PASS" endtime="20161110 22:00:47.372"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:47.373">${args} = {u'data': []}</msg>
<status starttime="20161110 22:00:47.373" status="PASS" endtime="20161110 22:00:47.373"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:47.375">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:00:47.375" status="PASS" endtime="20161110 22:00:47.375"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:47.377">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:00:47.377" status="PASS" endtime="20161110 22:00:47.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:47.378">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:00:47.378" status="PASS" endtime="20161110 22:00:47.378"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:00:47.379" status="PASS" endtime="20161110 22:00:47.379"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:47.381">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:00:47.380" status="PASS" endtime="20161110 22:00:47.382"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:47.383">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:00:47.383" status="PASS" endtime="20161110 22:00:47.383"></status>
</kw>
<status starttime="20161110 22:00:47.382" status="PASS" endtime="20161110 22:00:47.383"></status>
</kw>
<status starttime="20161110 22:00:47.379" status="PASS" endtime="20161110 22:00:47.383"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:47.384">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:00:47.384" status="PASS" endtime="20161110 22:00:47.385"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:47.385">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:00:47.385" status="PASS" endtime="20161110 22:00:47.385"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:47.386">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:00:47.386" status="PASS" endtime="20161110 22:00:47.386"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:47.387">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:00:47.386" status="PASS" endtime="20161110 22:00:47.387"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:47.858">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:00:47.859">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:47.387" status="PASS" endtime="20161110 22:00:47.859"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:47.859">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:00:47.859" status="PASS" endtime="20161110 22:00:47.860"></status>
</kw>
<status starttime="20161110 22:00:47.383" status="PASS" endtime="20161110 22:00:47.860"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:48.149">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:00:48.149">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:47.860" status="PASS" endtime="20161110 22:00:48.149"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:48.151">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:00:48.150" status="PASS" endtime="20161110 22:00:48.151"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:48.151">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:00:48.151" status="PASS" endtime="20161110 22:00:48.152"></status>
</kw>
<status starttime="20161110 22:00:48.151" status="PASS" endtime="20161110 22:00:48.152"></status>
</kw>
<status starttime="20161110 22:00:48.150" status="PASS" endtime="20161110 22:00:48.152"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:00:48.152">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:47.376" status="PASS" endtime="20161110 22:00:48.152"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:00:48.152">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:47.374" status="PASS" endtime="20161110 22:00:48.152"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:48.153">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:00:48.153" status="PASS" endtime="20161110 22:00:48.153"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:48.154">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:00:48.154">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:00:48.154">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:00:48.153" status="PASS" endtime="20161110 22:00:48.154"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:00:48.155">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:00:47.371" status="PASS" endtime="20161110 22:00:48.155"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:00:48.156">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:00:48.155" status="FAIL" endtime="20161110 22:00:48.156"></status>
</kw>
<status starttime="20161110 22:00:47.370" status="FAIL" endtime="20161110 22:00:48.156"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:58.159">@{arglist} = [ ]</msg>
<status starttime="20161110 22:00:58.159" status="PASS" endtime="20161110 22:00:58.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:58.160">${args} = {u'data': []}</msg>
<status starttime="20161110 22:00:58.159" status="PASS" endtime="20161110 22:00:58.160"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:58.162">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:00:58.161" status="PASS" endtime="20161110 22:00:58.162"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:58.164">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:00:58.163" status="PASS" endtime="20161110 22:00:58.164"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:58.165">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:00:58.164" status="PASS" endtime="20161110 22:00:58.165"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:00:58.165" status="PASS" endtime="20161110 22:00:58.166"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:58.168">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:00:58.167" status="PASS" endtime="20161110 22:00:58.168"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:58.170">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:00:58.169" status="PASS" endtime="20161110 22:00:58.170"></status>
</kw>
<status starttime="20161110 22:00:58.168" status="PASS" endtime="20161110 22:00:58.170"></status>
</kw>
<status starttime="20161110 22:00:58.166" status="PASS" endtime="20161110 22:00:58.170"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:58.172">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:00:58.171" status="PASS" endtime="20161110 22:00:58.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:58.173">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:00:58.173" status="PASS" endtime="20161110 22:00:58.173"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:58.174">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:00:58.173" status="PASS" endtime="20161110 22:00:58.174"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:58.174">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:00:58.174" status="PASS" endtime="20161110 22:00:58.174"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:58.503">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:00:58.504">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:58.174" status="PASS" endtime="20161110 22:00:58.504"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:58.504">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:00:58.504" status="PASS" endtime="20161110 22:00:58.504"></status>
</kw>
<status starttime="20161110 22:00:58.171" status="PASS" endtime="20161110 22:00:58.505"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:58.785">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:00:58.785">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:58.505" status="PASS" endtime="20161110 22:00:58.785"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:58.786">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:00:58.786" status="PASS" endtime="20161110 22:00:58.786"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:58.787">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:00:58.787" status="PASS" endtime="20161110 22:00:58.787"></status>
</kw>
<status starttime="20161110 22:00:58.786" status="PASS" endtime="20161110 22:00:58.787"></status>
</kw>
<status starttime="20161110 22:00:58.785" status="PASS" endtime="20161110 22:00:58.787"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:00:58.788">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:58.162" status="PASS" endtime="20161110 22:00:58.788"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:00:58.788">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:00:58.160" status="PASS" endtime="20161110 22:00:58.788"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:00:58.788">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:00:58.788" status="PASS" endtime="20161110 22:00:58.788"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:00:58.789">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:00:58.789">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:00:58.789">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:00:58.789" status="PASS" endtime="20161110 22:00:58.789"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:00:58.789">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:00:58.158" status="PASS" endtime="20161110 22:00:58.789"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:00:58.790">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:00:58.789" status="FAIL" endtime="20161110 22:00:58.790"></status>
</kw>
<status starttime="20161110 22:00:58.157" status="FAIL" endtime="20161110 22:00:58.790"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:08.792">@{arglist} = [ ]</msg>
<status starttime="20161110 22:01:08.792" status="PASS" endtime="20161110 22:01:08.792"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:08.794">${args} = {u'data': []}</msg>
<status starttime="20161110 22:01:08.793" status="PASS" endtime="20161110 22:01:08.794"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:08.796">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:01:08.795" status="PASS" endtime="20161110 22:01:08.796"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:08.798">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:01:08.797" status="PASS" endtime="20161110 22:01:08.798"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:08.799">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:01:08.798" status="PASS" endtime="20161110 22:01:08.799"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:01:08.799" status="PASS" endtime="20161110 22:01:08.800"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:08.802">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:01:08.801" status="PASS" endtime="20161110 22:01:08.802"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:08.803">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:01:08.803" status="PASS" endtime="20161110 22:01:08.803"></status>
</kw>
<status starttime="20161110 22:01:08.802" status="PASS" endtime="20161110 22:01:08.804"></status>
</kw>
<status starttime="20161110 22:01:08.800" status="PASS" endtime="20161110 22:01:08.804"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:08.805">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:01:08.804" status="PASS" endtime="20161110 22:01:08.805"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:08.805">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:01:08.805" status="PASS" endtime="20161110 22:01:08.805"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:08.806">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:01:08.806" status="PASS" endtime="20161110 22:01:08.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:08.807">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:01:08.806" status="PASS" endtime="20161110 22:01:08.807"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:09.137">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:01:09.138">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:08.807" status="PASS" endtime="20161110 22:01:09.138"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:09.139">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:01:09.138" status="PASS" endtime="20161110 22:01:09.139"></status>
</kw>
<status starttime="20161110 22:01:08.804" status="PASS" endtime="20161110 22:01:09.139"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:09.424">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:01:09.425">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:09.139" status="PASS" endtime="20161110 22:01:09.425"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:09.426">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:01:09.426" status="PASS" endtime="20161110 22:01:09.426"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:09.428">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:01:09.428" status="PASS" endtime="20161110 22:01:09.428"></status>
</kw>
<status starttime="20161110 22:01:09.427" status="PASS" endtime="20161110 22:01:09.428"></status>
</kw>
<status starttime="20161110 22:01:09.425" status="PASS" endtime="20161110 22:01:09.429"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:01:09.429">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:08.796" status="PASS" endtime="20161110 22:01:09.429"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:01:09.429">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:08.794" status="PASS" endtime="20161110 22:01:09.429"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:09.430">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:01:09.430" status="PASS" endtime="20161110 22:01:09.430"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:09.431">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:01:09.431">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:01:09.431">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:01:09.431" status="PASS" endtime="20161110 22:01:09.431"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:01:09.432">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:01:08.791" status="PASS" endtime="20161110 22:01:09.432"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:01:09.433">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:01:09.432" status="FAIL" endtime="20161110 22:01:09.433"></status>
</kw>
<status starttime="20161110 22:01:08.791" status="FAIL" endtime="20161110 22:01:09.434"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:19.436">@{arglist} = [ ]</msg>
<status starttime="20161110 22:01:19.436" status="PASS" endtime="20161110 22:01:19.436"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:19.437">${args} = {u'data': []}</msg>
<status starttime="20161110 22:01:19.437" status="PASS" endtime="20161110 22:01:19.438"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:19.439">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:01:19.439" status="PASS" endtime="20161110 22:01:19.439"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:19.441">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:01:19.441" status="PASS" endtime="20161110 22:01:19.442"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:19.442">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:01:19.442" status="PASS" endtime="20161110 22:01:19.442"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:01:19.443" status="PASS" endtime="20161110 22:01:19.443"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:19.446">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:01:19.444" status="PASS" endtime="20161110 22:01:19.446"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:19.448">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:01:19.447" status="PASS" endtime="20161110 22:01:19.448"></status>
</kw>
<status starttime="20161110 22:01:19.447" status="PASS" endtime="20161110 22:01:19.448"></status>
</kw>
<status starttime="20161110 22:01:19.444" status="PASS" endtime="20161110 22:01:19.448"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:19.450">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:01:19.449" status="PASS" endtime="20161110 22:01:19.451"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:19.452">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:01:19.451" status="PASS" endtime="20161110 22:01:19.452"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:19.453">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:01:19.452" status="PASS" endtime="20161110 22:01:19.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:19.454">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:01:19.453" status="PASS" endtime="20161110 22:01:19.454"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:19.791">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:01:19.791">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:19.454" status="PASS" endtime="20161110 22:01:19.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:19.792">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:01:19.792" status="PASS" endtime="20161110 22:01:19.792"></status>
</kw>
<status starttime="20161110 22:01:19.449" status="PASS" endtime="20161110 22:01:19.792"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:20.072">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:01:20.072">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:19.793" status="PASS" endtime="20161110 22:01:20.072"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:20.073">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:01:20.073" status="PASS" endtime="20161110 22:01:20.073"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:20.074">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:01:20.074" status="PASS" endtime="20161110 22:01:20.075"></status>
</kw>
<status starttime="20161110 22:01:20.074" status="PASS" endtime="20161110 22:01:20.075"></status>
</kw>
<status starttime="20161110 22:01:20.072" status="PASS" endtime="20161110 22:01:20.075"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:01:20.075">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:19.439" status="PASS" endtime="20161110 22:01:20.076"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:01:20.076">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:19.438" status="PASS" endtime="20161110 22:01:20.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:20.077">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:01:20.076" status="PASS" endtime="20161110 22:01:20.077"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:20.078">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:01:20.078">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:01:20.078">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:01:20.077" status="PASS" endtime="20161110 22:01:20.078"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:01:20.078">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:01:19.435" status="PASS" endtime="20161110 22:01:20.078"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:01:20.079">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:01:20.079" status="FAIL" endtime="20161110 22:01:20.080"></status>
</kw>
<status starttime="20161110 22:01:19.434" status="FAIL" endtime="20161110 22:01:20.080"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:30.082">@{arglist} = [ ]</msg>
<status starttime="20161110 22:01:30.082" status="PASS" endtime="20161110 22:01:30.082"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:30.084">${args} = {u'data': []}</msg>
<status starttime="20161110 22:01:30.083" status="PASS" endtime="20161110 22:01:30.084"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:30.085">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:01:30.085" status="PASS" endtime="20161110 22:01:30.085"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:30.088">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:01:30.087" status="PASS" endtime="20161110 22:01:30.088"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:30.089">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:01:30.088" status="PASS" endtime="20161110 22:01:30.089"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:01:30.089" status="PASS" endtime="20161110 22:01:30.090"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:30.093">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:01:30.091" status="PASS" endtime="20161110 22:01:30.093"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:30.094">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:01:30.094" status="PASS" endtime="20161110 22:01:30.094"></status>
</kw>
<status starttime="20161110 22:01:30.093" status="PASS" endtime="20161110 22:01:30.094"></status>
</kw>
<status starttime="20161110 22:01:30.090" status="PASS" endtime="20161110 22:01:30.094"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:30.095">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:01:30.095" status="PASS" endtime="20161110 22:01:30.096"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:30.096">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:01:30.096" status="PASS" endtime="20161110 22:01:30.096"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:30.097">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:01:30.096" status="PASS" endtime="20161110 22:01:30.097"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:30.098">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:01:30.097" status="PASS" endtime="20161110 22:01:30.098"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:30.433">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:01:30.433">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:30.098" status="PASS" endtime="20161110 22:01:30.433"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:30.434">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:01:30.433" status="PASS" endtime="20161110 22:01:30.434"></status>
</kw>
<status starttime="20161110 22:01:30.094" status="PASS" endtime="20161110 22:01:30.435"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:30.714">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:01:30.715">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:30.435" status="PASS" endtime="20161110 22:01:30.715"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:30.716">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:01:30.715" status="PASS" endtime="20161110 22:01:30.716"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:30.717">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:01:30.717" status="PASS" endtime="20161110 22:01:30.717"></status>
</kw>
<status starttime="20161110 22:01:30.716" status="PASS" endtime="20161110 22:01:30.717"></status>
</kw>
<status starttime="20161110 22:01:30.715" status="PASS" endtime="20161110 22:01:30.717"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:01:30.718">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:30.086" status="PASS" endtime="20161110 22:01:30.718"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:01:30.718">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:30.084" status="PASS" endtime="20161110 22:01:30.718"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:30.718">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:01:30.718" status="PASS" endtime="20161110 22:01:30.718"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:30.719">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:01:30.719">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:01:30.719">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:01:30.719" status="PASS" endtime="20161110 22:01:30.719"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:01:30.719">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:01:30.081" status="PASS" endtime="20161110 22:01:30.719"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:01:30.720">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:01:30.720" status="FAIL" endtime="20161110 22:01:30.720"></status>
</kw>
<status starttime="20161110 22:01:30.080" status="FAIL" endtime="20161110 22:01:30.720"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:40.723">@{arglist} = [ ]</msg>
<status starttime="20161110 22:01:40.722" status="PASS" endtime="20161110 22:01:40.723"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:40.724">${args} = {u'data': []}</msg>
<status starttime="20161110 22:01:40.723" status="PASS" endtime="20161110 22:01:40.724"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:40.726">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:01:40.725" status="PASS" endtime="20161110 22:01:40.726"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:40.728">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:01:40.727" status="PASS" endtime="20161110 22:01:40.728"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:40.729">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:01:40.728" status="PASS" endtime="20161110 22:01:40.729"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:01:40.729" status="PASS" endtime="20161110 22:01:40.730"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:40.732">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:01:40.731" status="PASS" endtime="20161110 22:01:40.732"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:40.733">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:01:40.733" status="PASS" endtime="20161110 22:01:40.733"></status>
</kw>
<status starttime="20161110 22:01:40.732" status="PASS" endtime="20161110 22:01:40.734"></status>
</kw>
<status starttime="20161110 22:01:40.730" status="PASS" endtime="20161110 22:01:40.734"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:40.735">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:01:40.734" status="PASS" endtime="20161110 22:01:40.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:40.736">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:01:40.735" status="PASS" endtime="20161110 22:01:40.736"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:40.736">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:01:40.736" status="PASS" endtime="20161110 22:01:40.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:40.737">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:01:40.736" status="PASS" endtime="20161110 22:01:40.737"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:45.319">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:01:45.319">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:40.737" status="PASS" endtime="20161110 22:01:45.319"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:45.320">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:01:45.319" status="PASS" endtime="20161110 22:01:45.320"></status>
</kw>
<status starttime="20161110 22:01:40.734" status="PASS" endtime="20161110 22:01:45.321"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:45.597">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:01:45.597">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:45.321" status="PASS" endtime="20161110 22:01:45.597"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:45.599">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:01:45.598" status="PASS" endtime="20161110 22:01:45.599"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:45.601">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:01:45.600" status="PASS" endtime="20161110 22:01:45.601"></status>
</kw>
<status starttime="20161110 22:01:45.599" status="PASS" endtime="20161110 22:01:45.601"></status>
</kw>
<status starttime="20161110 22:01:45.598" status="PASS" endtime="20161110 22:01:45.601"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:01:45.602">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:40.726" status="PASS" endtime="20161110 22:01:45.602"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:01:45.602">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:40.724" status="PASS" endtime="20161110 22:01:45.602"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:45.603">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:01:45.602" status="PASS" endtime="20161110 22:01:45.603"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:45.604">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:01:45.604">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:01:45.604">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:01:45.603" status="PASS" endtime="20161110 22:01:45.604"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:01:45.605">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:01:40.722" status="PASS" endtime="20161110 22:01:45.605"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:01:45.606">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:01:45.605" status="FAIL" endtime="20161110 22:01:45.606"></status>
</kw>
<status starttime="20161110 22:01:40.721" status="FAIL" endtime="20161110 22:01:45.606"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:55.609">@{arglist} = [ ]</msg>
<status starttime="20161110 22:01:55.608" status="PASS" endtime="20161110 22:01:55.609"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:55.610">${args} = {u'data': []}</msg>
<status starttime="20161110 22:01:55.609" status="PASS" endtime="20161110 22:01:55.610"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:55.611">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:01:55.611" status="PASS" endtime="20161110 22:01:55.611"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:55.613">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:01:55.613" status="PASS" endtime="20161110 22:01:55.613"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:55.614">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:01:55.614" status="PASS" endtime="20161110 22:01:55.614"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:01:55.615" status="PASS" endtime="20161110 22:01:55.615"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:55.618">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:01:55.617" status="PASS" endtime="20161110 22:01:55.618"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:55.620">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:01:55.619" status="PASS" endtime="20161110 22:01:55.620"></status>
</kw>
<status starttime="20161110 22:01:55.618" status="PASS" endtime="20161110 22:01:55.620"></status>
</kw>
<status starttime="20161110 22:01:55.616" status="PASS" endtime="20161110 22:01:55.620"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:55.621">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:01:55.621" status="PASS" endtime="20161110 22:01:55.622"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:55.623">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:01:55.622" status="PASS" endtime="20161110 22:01:55.623"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:55.624">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:01:55.623" status="PASS" endtime="20161110 22:01:55.624"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:55.625">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:01:55.624" status="PASS" endtime="20161110 22:01:55.625"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:55.953">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:01:55.953">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:55.625" status="PASS" endtime="20161110 22:01:55.953"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:55.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:01:55.954" status="PASS" endtime="20161110 22:01:55.955"></status>
</kw>
<status starttime="20161110 22:01:55.620" status="PASS" endtime="20161110 22:01:55.955"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:56.238">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:01:56.238">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:55.955" status="PASS" endtime="20161110 22:01:56.238"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:56.240">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:01:56.239" status="PASS" endtime="20161110 22:01:56.240"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:56.242">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:01:56.241" status="PASS" endtime="20161110 22:01:56.242"></status>
</kw>
<status starttime="20161110 22:01:56.240" status="PASS" endtime="20161110 22:01:56.242"></status>
</kw>
<status starttime="20161110 22:01:56.239" status="PASS" endtime="20161110 22:01:56.242"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:01:56.243">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:55.612" status="PASS" endtime="20161110 22:01:56.243"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:01:56.243">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:01:55.610" status="PASS" endtime="20161110 22:01:56.243"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:01:56.244">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:01:56.243" status="PASS" endtime="20161110 22:01:56.244"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:01:56.245">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:01:56.245">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:01:56.245">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:01:56.244" status="PASS" endtime="20161110 22:01:56.245"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:01:56.246">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:01:55.608" status="PASS" endtime="20161110 22:01:56.246"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:01:56.246">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:01:56.246" status="FAIL" endtime="20161110 22:01:56.247"></status>
</kw>
<status starttime="20161110 22:01:55.607" status="FAIL" endtime="20161110 22:01:56.247"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:06.253">@{arglist} = [ ]</msg>
<status starttime="20161110 22:02:06.249" status="PASS" endtime="20161110 22:02:06.253"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:06.254">${args} = {u'data': []}</msg>
<status starttime="20161110 22:02:06.253" status="PASS" endtime="20161110 22:02:06.254"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:06.256">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:02:06.255" status="PASS" endtime="20161110 22:02:06.256"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:06.258">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:02:06.257" status="PASS" endtime="20161110 22:02:06.258"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:06.259">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:02:06.258" status="PASS" endtime="20161110 22:02:06.259"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:02:06.259" status="PASS" endtime="20161110 22:02:06.260"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:06.263">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:02:06.261" status="PASS" endtime="20161110 22:02:06.263"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:06.264">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:02:06.264" status="PASS" endtime="20161110 22:02:06.264"></status>
</kw>
<status starttime="20161110 22:02:06.263" status="PASS" endtime="20161110 22:02:06.264"></status>
</kw>
<status starttime="20161110 22:02:06.260" status="PASS" endtime="20161110 22:02:06.265"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:06.266">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:02:06.265" status="PASS" endtime="20161110 22:02:06.266"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:06.266">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:02:06.266" status="PASS" endtime="20161110 22:02:06.266"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:06.267">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:02:06.267" status="PASS" endtime="20161110 22:02:06.267"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:06.268">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:02:06.267" status="PASS" endtime="20161110 22:02:06.268"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:06.597">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:02:06.597">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:06.268" status="PASS" endtime="20161110 22:02:06.597"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:06.598">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:02:06.597" status="PASS" endtime="20161110 22:02:06.598"></status>
</kw>
<status starttime="20161110 22:02:06.265" status="PASS" endtime="20161110 22:02:06.598"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:06.884">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:02:06.884">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:06.599" status="PASS" endtime="20161110 22:02:06.884"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:06.885">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:02:06.885" status="PASS" endtime="20161110 22:02:06.886"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:06.886">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:02:06.886" status="PASS" endtime="20161110 22:02:06.886"></status>
</kw>
<status starttime="20161110 22:02:06.886" status="PASS" endtime="20161110 22:02:06.887"></status>
</kw>
<status starttime="20161110 22:02:06.885" status="PASS" endtime="20161110 22:02:06.887"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:02:06.887">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:06.256" status="PASS" endtime="20161110 22:02:06.887"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:02:06.887">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:06.254" status="PASS" endtime="20161110 22:02:06.887"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:06.888">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:02:06.887" status="PASS" endtime="20161110 22:02:06.888"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:06.888">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:02:06.888">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:02:06.888">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:02:06.888" status="PASS" endtime="20161110 22:02:06.888"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:02:06.889">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:02:06.249" status="PASS" endtime="20161110 22:02:06.889"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:02:06.889">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:02:06.889" status="FAIL" endtime="20161110 22:02:06.889"></status>
</kw>
<status starttime="20161110 22:02:06.248" status="FAIL" endtime="20161110 22:02:06.889"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:16.907">@{arglist} = [ ]</msg>
<status starttime="20161110 22:02:16.906" status="PASS" endtime="20161110 22:02:16.907"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:16.909">${args} = {u'data': []}</msg>
<status starttime="20161110 22:02:16.908" status="PASS" endtime="20161110 22:02:16.909"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:16.911">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:02:16.910" status="PASS" endtime="20161110 22:02:16.911"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:16.914">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:02:16.913" status="PASS" endtime="20161110 22:02:16.914"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:16.916">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:02:16.915" status="PASS" endtime="20161110 22:02:16.916"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:02:16.916" status="PASS" endtime="20161110 22:02:16.917"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:16.919">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:02:16.918" status="PASS" endtime="20161110 22:02:16.919"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:16.920">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:02:16.920" status="PASS" endtime="20161110 22:02:16.921"></status>
</kw>
<status starttime="20161110 22:02:16.919" status="PASS" endtime="20161110 22:02:16.921"></status>
</kw>
<status starttime="20161110 22:02:16.917" status="PASS" endtime="20161110 22:02:16.921"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:16.923">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:02:16.922" status="PASS" endtime="20161110 22:02:16.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:16.924">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:02:16.924" status="PASS" endtime="20161110 22:02:16.924"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:16.925">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:02:16.925" status="PASS" endtime="20161110 22:02:16.925"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:16.926">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:02:16.926" status="PASS" endtime="20161110 22:02:16.926"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:17.266">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:02:17.266">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:16.926" status="PASS" endtime="20161110 22:02:17.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:17.267">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:02:17.266" status="PASS" endtime="20161110 22:02:17.268"></status>
</kw>
<status starttime="20161110 22:02:16.921" status="PASS" endtime="20161110 22:02:17.268"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:17.546">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:02:17.546">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:17.268" status="PASS" endtime="20161110 22:02:17.546"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:17.548">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:02:17.547" status="PASS" endtime="20161110 22:02:17.548"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:17.549">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:02:17.549" status="PASS" endtime="20161110 22:02:17.550"></status>
</kw>
<status starttime="20161110 22:02:17.548" status="PASS" endtime="20161110 22:02:17.550"></status>
</kw>
<status starttime="20161110 22:02:17.546" status="PASS" endtime="20161110 22:02:17.550"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:02:17.550">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:16.912" status="PASS" endtime="20161110 22:02:17.550"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:02:17.551">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:16.909" status="PASS" endtime="20161110 22:02:17.551"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:17.552">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:02:17.551" status="PASS" endtime="20161110 22:02:17.552"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:17.552">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:02:17.552">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:02:17.553">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:02:17.552" status="PASS" endtime="20161110 22:02:17.553"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:02:17.553">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:02:16.906" status="PASS" endtime="20161110 22:02:17.553"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:02:17.554">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:02:17.554" status="FAIL" endtime="20161110 22:02:17.554"></status>
</kw>
<status starttime="20161110 22:02:16.890" status="FAIL" endtime="20161110 22:02:17.554"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:27.556">@{arglist} = [ ]</msg>
<status starttime="20161110 22:02:27.556" status="PASS" endtime="20161110 22:02:27.556"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:27.557">${args} = {u'data': []}</msg>
<status starttime="20161110 22:02:27.557" status="PASS" endtime="20161110 22:02:27.557"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:27.558">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:02:27.558" status="PASS" endtime="20161110 22:02:27.558"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:27.559">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:02:27.559" status="PASS" endtime="20161110 22:02:27.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:27.560">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:02:27.560" status="PASS" endtime="20161110 22:02:27.560"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:02:27.560" status="PASS" endtime="20161110 22:02:27.560"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:27.562">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:02:27.561" status="PASS" endtime="20161110 22:02:27.562"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:27.563">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:02:27.563" status="PASS" endtime="20161110 22:02:27.563"></status>
</kw>
<status starttime="20161110 22:02:27.562" status="PASS" endtime="20161110 22:02:27.563"></status>
</kw>
<status starttime="20161110 22:02:27.561" status="PASS" endtime="20161110 22:02:27.563"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:27.564">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:02:27.564" status="PASS" endtime="20161110 22:02:27.564"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:27.565">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:02:27.565" status="PASS" endtime="20161110 22:02:27.565"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:27.565">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:02:27.565" status="PASS" endtime="20161110 22:02:27.565"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:27.566">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:02:27.566" status="PASS" endtime="20161110 22:02:27.566"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:27.895">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:02:27.896">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:27.566" status="PASS" endtime="20161110 22:02:27.896"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:27.896">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:02:27.896" status="PASS" endtime="20161110 22:02:27.897"></status>
</kw>
<status starttime="20161110 22:02:27.563" status="PASS" endtime="20161110 22:02:27.897"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:28.182">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:02:28.182">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:27.897" status="PASS" endtime="20161110 22:02:28.182"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:28.184">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:02:28.183" status="PASS" endtime="20161110 22:02:28.184"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:28.186">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:02:28.185" status="PASS" endtime="20161110 22:02:28.186"></status>
</kw>
<status starttime="20161110 22:02:28.185" status="PASS" endtime="20161110 22:02:28.186"></status>
</kw>
<status starttime="20161110 22:02:28.182" status="PASS" endtime="20161110 22:02:28.186"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:02:28.186">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:27.558" status="PASS" endtime="20161110 22:02:28.186"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:02:28.187">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:27.557" status="PASS" endtime="20161110 22:02:28.187"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:28.187">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:02:28.187" status="PASS" endtime="20161110 22:02:28.188"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:28.188">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:02:28.188">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:02:28.188">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:02:28.188" status="PASS" endtime="20161110 22:02:28.188"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:02:28.189">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:02:27.556" status="PASS" endtime="20161110 22:02:28.189"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:02:28.189">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:02:28.189" status="FAIL" endtime="20161110 22:02:28.189"></status>
</kw>
<status starttime="20161110 22:02:27.555" status="FAIL" endtime="20161110 22:02:28.190"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:38.192">@{arglist} = [ ]</msg>
<status starttime="20161110 22:02:38.192" status="PASS" endtime="20161110 22:02:38.192"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:38.193">${args} = {u'data': []}</msg>
<status starttime="20161110 22:02:38.192" status="PASS" endtime="20161110 22:02:38.193"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:38.195">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:02:38.194" status="PASS" endtime="20161110 22:02:38.195"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:38.197">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:02:38.196" status="PASS" endtime="20161110 22:02:38.197"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:38.198">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:02:38.197" status="PASS" endtime="20161110 22:02:38.198"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:02:38.198" status="PASS" endtime="20161110 22:02:38.199"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:38.201">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:02:38.200" status="PASS" endtime="20161110 22:02:38.201"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:38.203">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:02:38.202" status="PASS" endtime="20161110 22:02:38.203"></status>
</kw>
<status starttime="20161110 22:02:38.201" status="PASS" endtime="20161110 22:02:38.203"></status>
</kw>
<status starttime="20161110 22:02:38.199" status="PASS" endtime="20161110 22:02:38.203"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:38.205">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:02:38.204" status="PASS" endtime="20161110 22:02:38.205"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:38.206">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:02:38.206" status="PASS" endtime="20161110 22:02:38.206"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:38.207">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:02:38.206" status="PASS" endtime="20161110 22:02:38.207"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:38.207">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:02:38.207" status="PASS" endtime="20161110 22:02:38.207"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:38.628">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:02:38.629">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:38.208" status="PASS" endtime="20161110 22:02:38.629"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:38.629">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:02:38.629" status="PASS" endtime="20161110 22:02:38.629"></status>
</kw>
<status starttime="20161110 22:02:38.203" status="PASS" endtime="20161110 22:02:38.630"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:38.968">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:02:38.968">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:38.630" status="PASS" endtime="20161110 22:02:38.968"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:38.970">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:02:38.969" status="PASS" endtime="20161110 22:02:38.970"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:38.971">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:02:38.971" status="PASS" endtime="20161110 22:02:38.971"></status>
</kw>
<status starttime="20161110 22:02:38.970" status="PASS" endtime="20161110 22:02:38.972"></status>
</kw>
<status starttime="20161110 22:02:38.968" status="PASS" endtime="20161110 22:02:38.972"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:02:38.972">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:38.195" status="PASS" endtime="20161110 22:02:38.972"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:02:38.973">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:38.193" status="PASS" endtime="20161110 22:02:38.973"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:38.974">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:02:38.973" status="PASS" endtime="20161110 22:02:38.974"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:38.975">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:02:38.975">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:02:38.975">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:02:38.974" status="PASS" endtime="20161110 22:02:38.975"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:02:38.975">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:02:38.191" status="PASS" endtime="20161110 22:02:38.975"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:02:38.976">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:02:38.976" status="FAIL" endtime="20161110 22:02:38.976"></status>
</kw>
<status starttime="20161110 22:02:38.190" status="FAIL" endtime="20161110 22:02:38.976"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:48.979">@{arglist} = [ ]</msg>
<status starttime="20161110 22:02:48.978" status="PASS" endtime="20161110 22:02:48.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:48.980">${args} = {u'data': []}</msg>
<status starttime="20161110 22:02:48.979" status="PASS" endtime="20161110 22:02:48.980"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:48.981">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:02:48.981" status="PASS" endtime="20161110 22:02:48.981"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:48.983">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:02:48.983" status="PASS" endtime="20161110 22:02:48.983"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:48.984">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:02:48.984" status="PASS" endtime="20161110 22:02:48.984"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:02:48.985" status="PASS" endtime="20161110 22:02:48.985"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:48.988">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:02:48.986" status="PASS" endtime="20161110 22:02:48.988"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:48.989">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:02:48.989" status="PASS" endtime="20161110 22:02:48.990"></status>
</kw>
<status starttime="20161110 22:02:48.988" status="PASS" endtime="20161110 22:02:48.990"></status>
</kw>
<status starttime="20161110 22:02:48.985" status="PASS" endtime="20161110 22:02:48.990"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:48.991">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:02:48.991" status="PASS" endtime="20161110 22:02:48.992"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:48.993">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:02:48.992" status="PASS" endtime="20161110 22:02:48.993"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:48.994">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:02:48.993" status="PASS" endtime="20161110 22:02:48.994"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:48.995">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:02:48.994" status="PASS" endtime="20161110 22:02:48.995"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:57.137">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:02:57.137">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:48.995" status="PASS" endtime="20161110 22:02:57.137"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:57.138">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:02:57.137" status="PASS" endtime="20161110 22:02:57.138"></status>
</kw>
<status starttime="20161110 22:02:48.990" status="PASS" endtime="20161110 22:02:57.138"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:57.956">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:02:57.957">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:57.139" status="PASS" endtime="20161110 22:02:57.957"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:57.959">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:02:57.958" status="PASS" endtime="20161110 22:02:57.959"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:57.960">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:02:57.960" status="PASS" endtime="20161110 22:02:57.960"></status>
</kw>
<status starttime="20161110 22:02:57.959" status="PASS" endtime="20161110 22:02:57.960"></status>
</kw>
<status starttime="20161110 22:02:57.957" status="PASS" endtime="20161110 22:02:57.961"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:02:57.961">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:48.982" status="PASS" endtime="20161110 22:02:57.961"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:02:57.962">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:02:48.980" status="PASS" endtime="20161110 22:02:57.962"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:02:57.962">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:02:57.962" status="PASS" endtime="20161110 22:02:57.963"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:02:57.963">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:02:57.963">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:02:57.964">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:02:57.963" status="PASS" endtime="20161110 22:02:57.964"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:02:57.964">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:02:48.978" status="PASS" endtime="20161110 22:02:57.964"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:02:57.965">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:02:57.965" status="FAIL" endtime="20161110 22:02:57.965"></status>
</kw>
<status starttime="20161110 22:02:48.977" status="FAIL" endtime="20161110 22:02:57.966"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:07.969">@{arglist} = [ ]</msg>
<status starttime="20161110 22:03:07.968" status="PASS" endtime="20161110 22:03:07.969"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:07.970">${args} = {u'data': []}</msg>
<status starttime="20161110 22:03:07.969" status="PASS" endtime="20161110 22:03:07.970"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:07.971">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:03:07.971" status="PASS" endtime="20161110 22:03:07.972"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:07.973">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:03:07.973" status="PASS" endtime="20161110 22:03:07.974"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:07.974">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:03:07.974" status="PASS" endtime="20161110 22:03:07.974"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:03:07.975" status="PASS" endtime="20161110 22:03:07.975"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:07.977">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:03:07.977" status="PASS" endtime="20161110 22:03:07.977"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:07.978">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:03:07.978" status="PASS" endtime="20161110 22:03:07.978"></status>
</kw>
<status starttime="20161110 22:03:07.978" status="PASS" endtime="20161110 22:03:07.978"></status>
</kw>
<status starttime="20161110 22:03:07.976" status="PASS" endtime="20161110 22:03:07.979"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:07.979">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:03:07.979" status="PASS" endtime="20161110 22:03:07.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:07.980">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:03:07.980" status="PASS" endtime="20161110 22:03:07.980"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:07.981">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:03:07.981" status="PASS" endtime="20161110 22:03:07.981"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:07.981">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:03:07.981" status="PASS" endtime="20161110 22:03:07.981"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:08.350">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:03:08.350">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:07.982" status="PASS" endtime="20161110 22:03:08.350"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:08.352">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:03:08.350" status="PASS" endtime="20161110 22:03:08.352"></status>
</kw>
<status starttime="20161110 22:03:07.979" status="PASS" endtime="20161110 22:03:08.352"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:08.634">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:03:08.634">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:08.353" status="PASS" endtime="20161110 22:03:08.634"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:08.636">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:03:08.635" status="PASS" endtime="20161110 22:03:08.636"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:08.637">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:03:08.637" status="PASS" endtime="20161110 22:03:08.637"></status>
</kw>
<status starttime="20161110 22:03:08.636" status="PASS" endtime="20161110 22:03:08.637"></status>
</kw>
<status starttime="20161110 22:03:08.634" status="PASS" endtime="20161110 22:03:08.638"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:03:08.638">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:07.972" status="PASS" endtime="20161110 22:03:08.638"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:03:08.638">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:07.970" status="PASS" endtime="20161110 22:03:08.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:08.639">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:03:08.639" status="PASS" endtime="20161110 22:03:08.639"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:08.640">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:03:08.640">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:03:08.640">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:03:08.640" status="PASS" endtime="20161110 22:03:08.640"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:03:08.641">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:03:07.967" status="PASS" endtime="20161110 22:03:08.641"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:03:08.642">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:03:08.641" status="FAIL" endtime="20161110 22:03:08.642"></status>
</kw>
<status starttime="20161110 22:03:07.966" status="FAIL" endtime="20161110 22:03:08.642"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:18.645">@{arglist} = [ ]</msg>
<status starttime="20161110 22:03:18.644" status="PASS" endtime="20161110 22:03:18.645"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:18.646">${args} = {u'data': []}</msg>
<status starttime="20161110 22:03:18.645" status="PASS" endtime="20161110 22:03:18.646"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:18.648">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:03:18.647" status="PASS" endtime="20161110 22:03:18.648"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:18.650">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:03:18.649" status="PASS" endtime="20161110 22:03:18.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:18.651">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:03:18.650" status="PASS" endtime="20161110 22:03:18.651"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:03:18.651" status="PASS" endtime="20161110 22:03:18.652"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:18.654">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:03:18.653" status="PASS" endtime="20161110 22:03:18.654"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:18.656">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:03:18.656" status="PASS" endtime="20161110 22:03:18.657"></status>
</kw>
<status starttime="20161110 22:03:18.655" status="PASS" endtime="20161110 22:03:18.657"></status>
</kw>
<status starttime="20161110 22:03:18.652" status="PASS" endtime="20161110 22:03:18.657"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:18.658">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:03:18.658" status="PASS" endtime="20161110 22:03:18.658"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:18.659">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:03:18.658" status="PASS" endtime="20161110 22:03:18.659"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:18.659">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:03:18.659" status="PASS" endtime="20161110 22:03:18.659"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:18.660">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:03:18.660" status="PASS" endtime="20161110 22:03:18.660"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:19.023">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:03:19.024">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:18.660" status="PASS" endtime="20161110 22:03:19.024"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:19.025">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:03:19.024" status="PASS" endtime="20161110 22:03:19.025"></status>
</kw>
<status starttime="20161110 22:03:18.657" status="PASS" endtime="20161110 22:03:19.025"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:19.418">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:03:19.418">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:19.025" status="PASS" endtime="20161110 22:03:19.418"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:19.420">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:03:19.419" status="PASS" endtime="20161110 22:03:19.420"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:19.422">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:03:19.421" status="PASS" endtime="20161110 22:03:19.422"></status>
</kw>
<status starttime="20161110 22:03:19.421" status="PASS" endtime="20161110 22:03:19.422"></status>
</kw>
<status starttime="20161110 22:03:19.419" status="PASS" endtime="20161110 22:03:19.422"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:03:19.423">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:18.648" status="PASS" endtime="20161110 22:03:19.423"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:03:19.423">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:18.646" status="PASS" endtime="20161110 22:03:19.423"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:19.424">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:03:19.423" status="PASS" endtime="20161110 22:03:19.424"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:19.425">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:03:19.425">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:03:19.425">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:03:19.424" status="PASS" endtime="20161110 22:03:19.425"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:03:19.426">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:03:18.643" status="PASS" endtime="20161110 22:03:19.426"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:03:19.427">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:03:19.426" status="FAIL" endtime="20161110 22:03:19.427"></status>
</kw>
<status starttime="20161110 22:03:18.643" status="FAIL" endtime="20161110 22:03:19.427"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:29.429">@{arglist} = [ ]</msg>
<status starttime="20161110 22:03:29.429" status="PASS" endtime="20161110 22:03:29.429"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:29.430">${args} = {u'data': []}</msg>
<status starttime="20161110 22:03:29.429" status="PASS" endtime="20161110 22:03:29.430"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:29.431">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:03:29.431" status="PASS" endtime="20161110 22:03:29.431"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:29.432">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:03:29.432" status="PASS" endtime="20161110 22:03:29.432"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:29.433">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:03:29.432" status="PASS" endtime="20161110 22:03:29.433"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:03:29.433" status="PASS" endtime="20161110 22:03:29.433"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:29.435">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:03:29.434" status="PASS" endtime="20161110 22:03:29.435"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:29.436">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:03:29.435" status="PASS" endtime="20161110 22:03:29.436"></status>
</kw>
<status starttime="20161110 22:03:29.435" status="PASS" endtime="20161110 22:03:29.436"></status>
</kw>
<status starttime="20161110 22:03:29.433" status="PASS" endtime="20161110 22:03:29.436"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:29.437">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:03:29.437" status="PASS" endtime="20161110 22:03:29.437"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:29.438">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:03:29.438" status="PASS" endtime="20161110 22:03:29.438"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:29.439">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:03:29.438" status="PASS" endtime="20161110 22:03:29.439"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:29.439">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:03:29.439" status="PASS" endtime="20161110 22:03:29.439"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:29.777">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:03:29.777">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:29.440" status="PASS" endtime="20161110 22:03:29.777"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:29.778">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:03:29.778" status="PASS" endtime="20161110 22:03:29.778"></status>
</kw>
<status starttime="20161110 22:03:29.436" status="PASS" endtime="20161110 22:03:29.778"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:30.059">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:03:30.059">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:29.778" status="PASS" endtime="20161110 22:03:30.059"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:30.061">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:03:30.060" status="PASS" endtime="20161110 22:03:30.061"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:30.063">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:03:30.063" status="PASS" endtime="20161110 22:03:30.063"></status>
</kw>
<status starttime="20161110 22:03:30.061" status="PASS" endtime="20161110 22:03:30.063"></status>
</kw>
<status starttime="20161110 22:03:30.060" status="PASS" endtime="20161110 22:03:30.063"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:03:30.064">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:29.431" status="PASS" endtime="20161110 22:03:30.064"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:03:30.064">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:29.430" status="PASS" endtime="20161110 22:03:30.064"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:30.065">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:03:30.064" status="PASS" endtime="20161110 22:03:30.065"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:30.065">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:03:30.066">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:03:30.066">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:03:30.065" status="PASS" endtime="20161110 22:03:30.066"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:03:30.066">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:03:29.428" status="PASS" endtime="20161110 22:03:30.066"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:03:30.067">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:03:30.066" status="FAIL" endtime="20161110 22:03:30.067"></status>
</kw>
<status starttime="20161110 22:03:29.428" status="FAIL" endtime="20161110 22:03:30.067"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:40.069">@{arglist} = [ ]</msg>
<status starttime="20161110 22:03:40.068" status="PASS" endtime="20161110 22:03:40.069"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:40.069">${args} = {u'data': []}</msg>
<status starttime="20161110 22:03:40.069" status="PASS" endtime="20161110 22:03:40.069"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:40.070">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:03:40.070" status="PASS" endtime="20161110 22:03:40.070"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:40.071">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:03:40.071" status="PASS" endtime="20161110 22:03:40.071"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:40.072">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:03:40.072" status="PASS" endtime="20161110 22:03:40.072"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:03:40.072" status="PASS" endtime="20161110 22:03:40.072"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:40.074">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:03:40.073" status="PASS" endtime="20161110 22:03:40.074"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:40.075">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:03:40.075" status="PASS" endtime="20161110 22:03:40.075"></status>
</kw>
<status starttime="20161110 22:03:40.074" status="PASS" endtime="20161110 22:03:40.075"></status>
</kw>
<status starttime="20161110 22:03:40.073" status="PASS" endtime="20161110 22:03:40.075"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:40.076">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:03:40.076" status="PASS" endtime="20161110 22:03:40.078"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:40.078">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:03:40.078" status="PASS" endtime="20161110 22:03:40.078"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:40.079">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:03:40.078" status="PASS" endtime="20161110 22:03:40.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:40.079">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:03:40.079" status="PASS" endtime="20161110 22:03:40.079"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:40.413">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:03:40.413">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:40.080" status="PASS" endtime="20161110 22:03:40.413"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:40.414">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:03:40.413" status="PASS" endtime="20161110 22:03:40.414"></status>
</kw>
<status starttime="20161110 22:03:40.075" status="PASS" endtime="20161110 22:03:40.414"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:40.698">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:03:40.698">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:40.414" status="PASS" endtime="20161110 22:03:40.698"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:40.699">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:03:40.699" status="PASS" endtime="20161110 22:03:40.699"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:40.700">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:03:40.700" status="PASS" endtime="20161110 22:03:40.700"></status>
</kw>
<status starttime="20161110 22:03:40.699" status="PASS" endtime="20161110 22:03:40.700"></status>
</kw>
<status starttime="20161110 22:03:40.698" status="PASS" endtime="20161110 22:03:40.700"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:03:40.700">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:40.070" status="PASS" endtime="20161110 22:03:40.701"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:03:40.701">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:40.069" status="PASS" endtime="20161110 22:03:40.701"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:40.701">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:03:40.701" status="PASS" endtime="20161110 22:03:40.701"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:40.702">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:03:40.702">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:03:40.702">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:03:40.702" status="PASS" endtime="20161110 22:03:40.702"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:03:40.702">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:03:40.068" status="PASS" endtime="20161110 22:03:40.702"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:03:40.703">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:03:40.702" status="FAIL" endtime="20161110 22:03:40.703"></status>
</kw>
<status starttime="20161110 22:03:40.067" status="FAIL" endtime="20161110 22:03:40.703"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:50.706">@{arglist} = [ ]</msg>
<status starttime="20161110 22:03:50.705" status="PASS" endtime="20161110 22:03:50.706"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:50.707">${args} = {u'data': []}</msg>
<status starttime="20161110 22:03:50.706" status="PASS" endtime="20161110 22:03:50.707"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:50.709">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:03:50.708" status="PASS" endtime="20161110 22:03:50.709"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:50.711">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:03:50.710" status="PASS" endtime="20161110 22:03:50.711"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:50.712">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:03:50.711" status="PASS" endtime="20161110 22:03:50.712"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:03:50.712" status="PASS" endtime="20161110 22:03:50.713"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:50.715">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:03:50.714" status="PASS" endtime="20161110 22:03:50.715"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:50.717">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:03:50.717" status="PASS" endtime="20161110 22:03:50.717"></status>
</kw>
<status starttime="20161110 22:03:50.716" status="PASS" endtime="20161110 22:03:50.717"></status>
</kw>
<status starttime="20161110 22:03:50.713" status="PASS" endtime="20161110 22:03:50.717"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:50.719">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:03:50.718" status="PASS" endtime="20161110 22:03:50.719"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:50.719">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:03:50.719" status="PASS" endtime="20161110 22:03:50.720"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:50.720">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:03:50.720" status="PASS" endtime="20161110 22:03:50.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:50.721">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:03:50.720" status="PASS" endtime="20161110 22:03:50.721"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:51.135">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:03:51.135">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:50.721" status="PASS" endtime="20161110 22:03:51.135"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:51.136">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:03:51.135" status="PASS" endtime="20161110 22:03:51.136"></status>
</kw>
<status starttime="20161110 22:03:50.718" status="PASS" endtime="20161110 22:03:51.136"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:51.419">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:03:51.420">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:51.136" status="PASS" endtime="20161110 22:03:51.420"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:51.422">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:03:51.421" status="PASS" endtime="20161110 22:03:51.422"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:51.423">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:03:51.423" status="PASS" endtime="20161110 22:03:51.423"></status>
</kw>
<status starttime="20161110 22:03:51.422" status="PASS" endtime="20161110 22:03:51.423"></status>
</kw>
<status starttime="20161110 22:03:51.420" status="PASS" endtime="20161110 22:03:51.424"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:03:51.424">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:50.709" status="PASS" endtime="20161110 22:03:51.424"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:03:51.424">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:03:50.707" status="PASS" endtime="20161110 22:03:51.424"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:03:51.425">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:03:51.425" status="PASS" endtime="20161110 22:03:51.425"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:03:51.426">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:03:51.426">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:03:51.426">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:03:51.426" status="PASS" endtime="20161110 22:03:51.426"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:03:51.427">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:03:50.705" status="PASS" endtime="20161110 22:03:51.427"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:03:51.428">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:03:51.427" status="FAIL" endtime="20161110 22:03:51.428"></status>
</kw>
<status starttime="20161110 22:03:50.704" status="FAIL" endtime="20161110 22:03:51.429"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:01.432">@{arglist} = [ ]</msg>
<status starttime="20161110 22:04:01.431" status="PASS" endtime="20161110 22:04:01.432"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:01.433">${args} = {u'data': []}</msg>
<status starttime="20161110 22:04:01.432" status="PASS" endtime="20161110 22:04:01.433"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:01.435">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:04:01.434" status="PASS" endtime="20161110 22:04:01.435"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:01.437">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:04:01.436" status="PASS" endtime="20161110 22:04:01.437"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:01.438">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:04:01.437" status="PASS" endtime="20161110 22:04:01.438"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:04:01.438" status="PASS" endtime="20161110 22:04:01.439"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:01.441">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:04:01.440" status="PASS" endtime="20161110 22:04:01.442"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:01.443">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:04:01.442" status="PASS" endtime="20161110 22:04:01.443"></status>
</kw>
<status starttime="20161110 22:04:01.442" status="PASS" endtime="20161110 22:04:01.443"></status>
</kw>
<status starttime="20161110 22:04:01.439" status="PASS" endtime="20161110 22:04:01.443"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:01.445">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:04:01.444" status="PASS" endtime="20161110 22:04:01.446"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:01.447">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:04:01.446" status="PASS" endtime="20161110 22:04:01.447"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:01.448">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:04:01.447" status="PASS" endtime="20161110 22:04:01.448"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:01.449">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:04:01.449" status="PASS" endtime="20161110 22:04:01.449"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:05.334">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:04:05.335">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:01.449" status="PASS" endtime="20161110 22:04:05.335"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:05.336">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:04:05.335" status="PASS" endtime="20161110 22:04:05.336"></status>
</kw>
<status starttime="20161110 22:04:01.444" status="PASS" endtime="20161110 22:04:05.336"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:07.166">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:04:07.166">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:05.337" status="PASS" endtime="20161110 22:04:07.166"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:07.169">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:04:07.168" status="PASS" endtime="20161110 22:04:07.169"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:07.171">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:04:07.170" status="PASS" endtime="20161110 22:04:07.171"></status>
</kw>
<status starttime="20161110 22:04:07.169" status="PASS" endtime="20161110 22:04:07.171"></status>
</kw>
<status starttime="20161110 22:04:07.167" status="PASS" endtime="20161110 22:04:07.171"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:04:07.171">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:01.435" status="PASS" endtime="20161110 22:04:07.171"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:04:07.172">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:01.433" status="PASS" endtime="20161110 22:04:07.172"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:07.173">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:04:07.172" status="PASS" endtime="20161110 22:04:07.173"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:07.174">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:04:07.174">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:04:07.174">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:04:07.173" status="PASS" endtime="20161110 22:04:07.174"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:04:07.174">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:04:01.430" status="PASS" endtime="20161110 22:04:07.174"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:04:07.175">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:04:07.175" status="FAIL" endtime="20161110 22:04:07.176"></status>
</kw>
<status starttime="20161110 22:04:01.430" status="FAIL" endtime="20161110 22:04:07.176"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:17.178">@{arglist} = [ ]</msg>
<status starttime="20161110 22:04:17.178" status="PASS" endtime="20161110 22:04:17.178"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:17.180">${args} = {u'data': []}</msg>
<status starttime="20161110 22:04:17.179" status="PASS" endtime="20161110 22:04:17.180"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:17.181">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:04:17.181" status="PASS" endtime="20161110 22:04:17.181"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:17.183">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:04:17.183" status="PASS" endtime="20161110 22:04:17.183"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:17.184">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:04:17.184" status="PASS" endtime="20161110 22:04:17.184"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:04:17.185" status="PASS" endtime="20161110 22:04:17.185"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:17.188">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:04:17.187" status="PASS" endtime="20161110 22:04:17.188"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:17.190">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:04:17.190" status="PASS" endtime="20161110 22:04:17.190"></status>
</kw>
<status starttime="20161110 22:04:17.189" status="PASS" endtime="20161110 22:04:17.190"></status>
</kw>
<status starttime="20161110 22:04:17.185" status="PASS" endtime="20161110 22:04:17.190"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:17.191">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:04:17.191" status="PASS" endtime="20161110 22:04:17.192"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:17.192">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:04:17.192" status="PASS" endtime="20161110 22:04:17.192"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:17.193">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:04:17.192" status="PASS" endtime="20161110 22:04:17.193"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:17.193">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:04:17.193" status="PASS" endtime="20161110 22:04:17.193"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:17.526">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:04:17.526">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:17.193" status="PASS" endtime="20161110 22:04:17.526"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:17.527">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:04:17.526" status="PASS" endtime="20161110 22:04:17.527"></status>
</kw>
<status starttime="20161110 22:04:17.190" status="PASS" endtime="20161110 22:04:17.527"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:17.815">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:04:17.815">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:17.527" status="PASS" endtime="20161110 22:04:17.815"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:17.816">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:04:17.816" status="PASS" endtime="20161110 22:04:17.816"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:17.817">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:04:17.817" status="PASS" endtime="20161110 22:04:17.817"></status>
</kw>
<status starttime="20161110 22:04:17.816" status="PASS" endtime="20161110 22:04:17.817"></status>
</kw>
<status starttime="20161110 22:04:17.815" status="PASS" endtime="20161110 22:04:17.817"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:04:17.818">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:17.182" status="PASS" endtime="20161110 22:04:17.818"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:04:17.818">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:17.180" status="PASS" endtime="20161110 22:04:17.818"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:17.818">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:04:17.818" status="PASS" endtime="20161110 22:04:17.818"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:17.819">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:04:17.819">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:04:17.819">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:04:17.819" status="PASS" endtime="20161110 22:04:17.819"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:04:17.819">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:04:17.177" status="PASS" endtime="20161110 22:04:17.819"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:04:17.820">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:04:17.820" status="FAIL" endtime="20161110 22:04:17.820"></status>
</kw>
<status starttime="20161110 22:04:17.177" status="FAIL" endtime="20161110 22:04:17.820"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:27.823">@{arglist} = [ ]</msg>
<status starttime="20161110 22:04:27.822" status="PASS" endtime="20161110 22:04:27.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:27.825">${args} = {u'data': []}</msg>
<status starttime="20161110 22:04:27.823" status="PASS" endtime="20161110 22:04:27.825"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:27.826">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:04:27.826" status="PASS" endtime="20161110 22:04:27.827"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:27.828">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:04:27.828" status="PASS" endtime="20161110 22:04:27.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:27.830">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:04:27.829" status="PASS" endtime="20161110 22:04:27.830"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:04:27.830" status="PASS" endtime="20161110 22:04:27.831"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:27.833">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:04:27.832" status="PASS" endtime="20161110 22:04:27.833"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:27.835">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:04:27.834" status="PASS" endtime="20161110 22:04:27.835"></status>
</kw>
<status starttime="20161110 22:04:27.833" status="PASS" endtime="20161110 22:04:27.835"></status>
</kw>
<status starttime="20161110 22:04:27.831" status="PASS" endtime="20161110 22:04:27.835"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:27.837">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:04:27.836" status="PASS" endtime="20161110 22:04:27.837"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:27.838">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:04:27.838" status="PASS" endtime="20161110 22:04:27.838"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:27.839">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:04:27.838" status="PASS" endtime="20161110 22:04:27.839"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:27.840">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:04:27.839" status="PASS" endtime="20161110 22:04:27.840"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:28.178">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:04:28.179">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:27.840" status="PASS" endtime="20161110 22:04:28.179"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:28.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:04:28.179" status="PASS" endtime="20161110 22:04:28.180"></status>
</kw>
<status starttime="20161110 22:04:27.835" status="PASS" endtime="20161110 22:04:28.180"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:28.459">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:04:28.459">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:28.181" status="PASS" endtime="20161110 22:04:28.459"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:28.461">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:04:28.460" status="PASS" endtime="20161110 22:04:28.461"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:28.463">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:04:28.462" status="PASS" endtime="20161110 22:04:28.463"></status>
</kw>
<status starttime="20161110 22:04:28.462" status="PASS" endtime="20161110 22:04:28.463"></status>
</kw>
<status starttime="20161110 22:04:28.460" status="PASS" endtime="20161110 22:04:28.463"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:04:28.463">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:27.827" status="PASS" endtime="20161110 22:04:28.463"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:04:28.464">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:27.825" status="PASS" endtime="20161110 22:04:28.464"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:28.465">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:04:28.464" status="PASS" endtime="20161110 22:04:28.465"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:28.465">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:04:28.466">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:04:28.466">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:04:28.465" status="PASS" endtime="20161110 22:04:28.466"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:04:28.466">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:04:27.822" status="PASS" endtime="20161110 22:04:28.466"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:04:28.467">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:04:28.467" status="FAIL" endtime="20161110 22:04:28.467"></status>
</kw>
<status starttime="20161110 22:04:27.821" status="FAIL" endtime="20161110 22:04:28.467"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:38.470">@{arglist} = [ ]</msg>
<status starttime="20161110 22:04:38.470" status="PASS" endtime="20161110 22:04:38.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:38.472">${args} = {u'data': []}</msg>
<status starttime="20161110 22:04:38.471" status="PASS" endtime="20161110 22:04:38.472"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:38.473">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:04:38.473" status="PASS" endtime="20161110 22:04:38.473"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:38.475">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:04:38.475" status="PASS" endtime="20161110 22:04:38.475"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:38.476">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:04:38.476" status="PASS" endtime="20161110 22:04:38.476"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:04:38.477" status="PASS" endtime="20161110 22:04:38.477"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:38.480">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:04:38.478" status="PASS" endtime="20161110 22:04:38.480"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:38.480">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:04:38.480" status="PASS" endtime="20161110 22:04:38.481"></status>
</kw>
<status starttime="20161110 22:04:38.480" status="PASS" endtime="20161110 22:04:38.481"></status>
</kw>
<status starttime="20161110 22:04:38.477" status="PASS" endtime="20161110 22:04:38.481"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:38.482">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:04:38.481" status="PASS" endtime="20161110 22:04:38.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:38.483">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:04:38.482" status="PASS" endtime="20161110 22:04:38.483"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:38.483">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:04:38.483" status="PASS" endtime="20161110 22:04:38.483"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:38.484">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:04:38.484" status="PASS" endtime="20161110 22:04:38.484"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:38.815">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:04:38.815">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:38.484" status="PASS" endtime="20161110 22:04:38.815"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:38.816">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:04:38.815" status="PASS" endtime="20161110 22:04:38.816"></status>
</kw>
<status starttime="20161110 22:04:38.481" status="PASS" endtime="20161110 22:04:38.816"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:39.100">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:04:39.100">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:38.816" status="PASS" endtime="20161110 22:04:39.100"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:39.102">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:04:39.101" status="PASS" endtime="20161110 22:04:39.102"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:39.103">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:04:39.103" status="PASS" endtime="20161110 22:04:39.103"></status>
</kw>
<status starttime="20161110 22:04:39.102" status="PASS" endtime="20161110 22:04:39.104"></status>
</kw>
<status starttime="20161110 22:04:39.100" status="PASS" endtime="20161110 22:04:39.104"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:04:39.104">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:38.474" status="PASS" endtime="20161110 22:04:39.104"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:04:39.104">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:38.472" status="PASS" endtime="20161110 22:04:39.105"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:39.106">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:04:39.105" status="PASS" endtime="20161110 22:04:39.106"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:39.106">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:04:39.107">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:04:39.107">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:04:39.106" status="PASS" endtime="20161110 22:04:39.107"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:04:39.107">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:04:38.469" status="PASS" endtime="20161110 22:04:39.107"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:04:39.108">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:04:39.108" status="FAIL" endtime="20161110 22:04:39.108"></status>
</kw>
<status starttime="20161110 22:04:38.468" status="FAIL" endtime="20161110 22:04:39.108"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:49.112">@{arglist} = [ ]</msg>
<status starttime="20161110 22:04:49.111" status="PASS" endtime="20161110 22:04:49.112"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:49.113">${args} = {u'data': []}</msg>
<status starttime="20161110 22:04:49.112" status="PASS" endtime="20161110 22:04:49.113"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:49.115">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:04:49.114" status="PASS" endtime="20161110 22:04:49.115"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:49.117">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:04:49.117" status="PASS" endtime="20161110 22:04:49.117"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:49.119">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:04:49.117" status="PASS" endtime="20161110 22:04:49.119"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:04:49.119" status="PASS" endtime="20161110 22:04:49.120"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:49.121">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:04:49.120" status="PASS" endtime="20161110 22:04:49.121"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:49.122">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:04:49.122" status="PASS" endtime="20161110 22:04:49.122"></status>
</kw>
<status starttime="20161110 22:04:49.121" status="PASS" endtime="20161110 22:04:49.122"></status>
</kw>
<status starttime="20161110 22:04:49.120" status="PASS" endtime="20161110 22:04:49.122"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:49.123">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:04:49.123" status="PASS" endtime="20161110 22:04:49.124"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:49.124">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:04:49.124" status="PASS" endtime="20161110 22:04:49.124"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:49.125">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:04:49.124" status="PASS" endtime="20161110 22:04:49.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:49.125">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:04:49.125" status="PASS" endtime="20161110 22:04:49.125"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:49.453">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:04:49.453">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:49.125" status="PASS" endtime="20161110 22:04:49.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:49.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:04:49.454" status="PASS" endtime="20161110 22:04:49.454"></status>
</kw>
<status starttime="20161110 22:04:49.122" status="PASS" endtime="20161110 22:04:49.454"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:49.879">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:04:49.879">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:49.455" status="PASS" endtime="20161110 22:04:49.879"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:49.880">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:04:49.879" status="PASS" endtime="20161110 22:04:49.880"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:49.881">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:04:49.881" status="PASS" endtime="20161110 22:04:49.881"></status>
</kw>
<status starttime="20161110 22:04:49.880" status="PASS" endtime="20161110 22:04:49.881"></status>
</kw>
<status starttime="20161110 22:04:49.879" status="PASS" endtime="20161110 22:04:49.881"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:04:49.882">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:49.115" status="PASS" endtime="20161110 22:04:49.882"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:04:49.882">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:49.113" status="PASS" endtime="20161110 22:04:49.882"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:49.882">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:04:49.882" status="PASS" endtime="20161110 22:04:49.882"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:49.883">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:04:49.883">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:04:49.883">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:04:49.883" status="PASS" endtime="20161110 22:04:49.883"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:04:49.883">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:04:49.110" status="PASS" endtime="20161110 22:04:49.883"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:04:49.884">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:04:49.883" status="FAIL" endtime="20161110 22:04:49.884"></status>
</kw>
<status starttime="20161110 22:04:49.109" status="FAIL" endtime="20161110 22:04:49.884"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:59.886">@{arglist} = [ ]</msg>
<status starttime="20161110 22:04:59.886" status="PASS" endtime="20161110 22:04:59.886"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:59.887">${args} = {u'data': []}</msg>
<status starttime="20161110 22:04:59.887" status="PASS" endtime="20161110 22:04:59.887"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:59.889">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:04:59.889" status="PASS" endtime="20161110 22:04:59.889"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:59.891">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:04:59.891" status="PASS" endtime="20161110 22:04:59.891"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:59.892">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:04:59.892" status="PASS" endtime="20161110 22:04:59.892"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:04:59.893" status="PASS" endtime="20161110 22:04:59.893"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:59.895">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:04:59.894" status="PASS" endtime="20161110 22:04:59.895"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:59.897">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:04:59.896" status="PASS" endtime="20161110 22:04:59.897"></status>
</kw>
<status starttime="20161110 22:04:59.896" status="PASS" endtime="20161110 22:04:59.897"></status>
</kw>
<status starttime="20161110 22:04:59.893" status="PASS" endtime="20161110 22:04:59.897"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:04:59.899">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:04:59.898" status="PASS" endtime="20161110 22:04:59.899"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:59.900">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:04:59.900" status="PASS" endtime="20161110 22:04:59.900"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:59.901">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:04:59.900" status="PASS" endtime="20161110 22:04:59.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:04:59.901">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:04:59.901" status="PASS" endtime="20161110 22:04:59.901"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:00.232">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:05:00.232">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:59.902" status="PASS" endtime="20161110 22:05:00.232"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:00.233">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:00.233" status="PASS" endtime="20161110 22:05:00.233"></status>
</kw>
<status starttime="20161110 22:04:59.898" status="PASS" endtime="20161110 22:05:00.234"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:00.522">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:05:00.522">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:00.234" status="PASS" endtime="20161110 22:05:00.522"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:00.524">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:05:00.523" status="PASS" endtime="20161110 22:05:00.524"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:00.525">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:05:00.525" status="PASS" endtime="20161110 22:05:00.525"></status>
</kw>
<status starttime="20161110 22:05:00.524" status="PASS" endtime="20161110 22:05:00.526"></status>
</kw>
<status starttime="20161110 22:05:00.522" status="PASS" endtime="20161110 22:05:00.526"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:00.526">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:59.889" status="PASS" endtime="20161110 22:05:00.526"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:00.526">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:04:59.888" status="PASS" endtime="20161110 22:05:00.526"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:00.527">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:00.527" status="PASS" endtime="20161110 22:05:00.527"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:00.528">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:05:00.528">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:05:00.528">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:05:00.528" status="PASS" endtime="20161110 22:05:00.529"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:00.529">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:04:59.885" status="PASS" endtime="20161110 22:05:00.529"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:05:00.530">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:05:00.529" status="FAIL" endtime="20161110 22:05:00.530"></status>
</kw>
<status starttime="20161110 22:04:59.885" status="FAIL" endtime="20161110 22:05:00.530"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:10.533">@{arglist} = [ ]</msg>
<status starttime="20161110 22:05:10.532" status="PASS" endtime="20161110 22:05:10.533"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:10.534">${args} = {u'data': []}</msg>
<status starttime="20161110 22:05:10.533" status="PASS" endtime="20161110 22:05:10.534"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:10.536">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 22:05:10.535" status="PASS" endtime="20161110 22:05:10.536"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:10.538">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 22:05:10.537" status="PASS" endtime="20161110 22:05:10.538"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:10.539">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:05:10.538" status="PASS" endtime="20161110 22:05:10.539"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:05:10.539" status="PASS" endtime="20161110 22:05:10.540"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:10.543">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:05:10.541" status="PASS" endtime="20161110 22:05:10.543"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:10.545">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:05:10.544" status="PASS" endtime="20161110 22:05:10.545"></status>
</kw>
<status starttime="20161110 22:05:10.544" status="PASS" endtime="20161110 22:05:10.545"></status>
</kw>
<status starttime="20161110 22:05:10.540" status="PASS" endtime="20161110 22:05:10.545"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:10.547">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:05:10.546" status="PASS" endtime="20161110 22:05:10.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:10.548">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:05:10.548" status="PASS" endtime="20161110 22:05:10.548"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:10.549">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:05:10.549" status="PASS" endtime="20161110 22:05:10.549"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:10.551">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:05:10.550" status="PASS" endtime="20161110 22:05:10.551"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:15.860">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:05:15.860">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:10.551" status="PASS" endtime="20161110 22:05:15.860"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:15.862">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:15.861" status="PASS" endtime="20161110 22:05:15.862"></status>
</kw>
<status starttime="20161110 22:05:10.545" status="PASS" endtime="20161110 22:05:15.862"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:17.243">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:05:17.243">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:15.862" status="PASS" endtime="20161110 22:05:17.243"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:17.245">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:05:17.244" status="PASS" endtime="20161110 22:05:17.245"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.247">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:05:17.246" status="PASS" endtime="20161110 22:05:17.247"></status>
</kw>
<status starttime="20161110 22:05:17.245" status="PASS" endtime="20161110 22:05:17.247"></status>
</kw>
<status starttime="20161110 22:05:17.243" status="PASS" endtime="20161110 22:05:17.247"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:17.247">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:10.536" status="PASS" endtime="20161110 22:05:17.248"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:17.248">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:10.534" status="PASS" endtime="20161110 22:05:17.248"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.249">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:17.248" status="PASS" endtime="20161110 22:05:17.249"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:17.250">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:05:17.250">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:05:17.250">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:05:17.249" status="PASS" endtime="20161110 22:05:17.250"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:17.251">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 22:05:10.532" status="PASS" endtime="20161110 22:05:17.251"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:05:17.252">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 22:05:17.251" status="FAIL" endtime="20161110 22:05:17.252"></status>
</kw>
<status starttime="20161110 22:05:10.531" status="FAIL" endtime="20161110 22:05:17.252"></status>
</kw>
<msg level="FAIL" timestamp="20161110 22:05:17.252">Keyword 'Is Host Booted' failed after retrying for 15 minutes. The last error was: 'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 21:50:02.000" status="FAIL" endtime="20161110 22:05:17.252"></status>
</kw>
<status starttime="20161110 21:50:01.999" status="FAIL" endtime="20161110 22:05:17.253"></status>
</kw>
<status starttime="20161110 21:49:43.596" status="FAIL" endtime="20161110 22:05:17.253"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Log FFDC if failed and collect SOL</doc>
<kw name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<kw name="Log FFDC If Test Case Failed" library="openbmc_ffdc">
<doc>Main entry point to gather logs on Test case failure</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:17.263">${cur_time} = 2016-11-10 22:05:17:263052</msg>
<status starttime="20161110 22:05:17.263" status="PASS" endtime="20161110 22:05:17.263"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:17.264">${cur_time} = 20161110220517263052</msg>
<status starttime="20161110 22:05:17.264" status="PASS" endtime="20161110 22:05:17.264"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:17.264">${cur_time} = 20161110220517263052</msg>
<status starttime="20161110 22:05:17.263" status="PASS" endtime="20161110 22:05:17.264"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.267">${FFDC_TIME} = 20161110220517263052</msg>
<status starttime="20161110 22:05:17.264" status="PASS" endtime="20161110 22:05:17.267"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${\n}FFDC Collection Started \t: ${cur_time}</arg>
</arguments>
<status starttime="20161110 22:05:17.267" status="PASS" endtime="20161110 22:05:17.267"></status>
</kw>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<assign>
<var>${suitename}</var>
<var>${testname}</var>
</assign>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:17.268">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20161110 22:05:17.268" status="PASS" endtime="20161110 22:05:17.268"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:17.269">${suite_name} = 20161110220517263052_TestsTestBasicPoweron</msg>
<status starttime="20161110 22:05:17.268" status="PASS" endtime="20161110 22:05:17.269"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:17.269">${test_name} = powerontest</msg>
<status starttime="20161110 22:05:17.269" status="PASS" endtime="20161110 22:05:17.269"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:17.270">${test_name} = 20161110220517263052_powerontest</msg>
<status starttime="20161110 22:05:17.269" status="PASS" endtime="20161110 22:05:17.270"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:17.270">${suitename} = 20161110220517263052_TestsTestBasicPoweron</msg>
<msg level="INFO" timestamp="20161110 22:05:17.270">${testname} = 20161110220517263052_powerontest</msg>
<status starttime="20161110 22:05:17.268" status="PASS" endtime="20161110 22:05:17.270"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${FFDC_LOG_PATH}${suitename}${/}${testname}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.273">${FFDC_DIR_PATH} = /tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest</msg>
<status starttime="20161110 22:05:17.270" status="PASS" endtime="20161110 22:05:17.273"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_DIR_PATH}${/}</arg>
<arg>${FFDC_TIME}_</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:17.274">${prefix} = /tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_</msg>
<status starttime="20161110 22:05:17.273" status="PASS" endtime="20161110 22:05:17.274"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_PREFIX}</arg>
<arg>${prefix}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.276">${LOG_PREFIX} = /tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_</msg>
<status starttime="20161110 22:05:17.274" status="PASS" endtime="20161110 22:05:17.277"></status>
</kw>
<kw name="Create FFDC Directory" library="openbmc_ffdc_utils">
<doc>Creates directory and report file</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.280" html="yes">Created directory '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.277" status="PASS" endtime="20161110 22:05:17.280"></status>
</kw>
<kw name="Create FFDC Report File" library="openbmc_ffdc_utils">
<doc>Create a generic file name for ffdc</doc>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
<arg>${FFDC_DIR_PATH}${/}${FFDC_TIME}_BMC_general.txt</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.284">${FFDC_FILE_PATH} = /tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt</msg>
<status starttime="20161110 22:05:17.281" status="PASS" endtime="20161110 22:05:17.284"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.285" html="yes">Created file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.284" status="PASS" endtime="20161110 22:05:17.285"></status>
</kw>
<status starttime="20161110 22:05:17.281" status="PASS" endtime="20161110 22:05:17.285"></status>
</kw>
<status starttime="20161110 22:05:17.277" status="PASS" endtime="20161110 22:05:17.285"></status>
</kw>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.286" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.286" status="PASS" endtime="20161110 22:05:17.287"></status>
</kw>
<status starttime="20161110 22:05:17.285" status="PASS" endtime="20161110 22:05:17.287"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.288" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.287" status="PASS" endtime="20161110 22:05:17.288"></status>
</kw>
<status starttime="20161110 22:05:17.287" status="PASS" endtime="20161110 22:05:17.289"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.290" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.290" status="PASS" endtime="20161110 22:05:17.290"></status>
</kw>
<status starttime="20161110 22:05:17.289" status="PASS" endtime="20161110 22:05:17.290"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.291" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.291" status="PASS" endtime="20161110 22:05:17.291"></status>
</kw>
<status starttime="20161110 22:05:17.290" status="PASS" endtime="20161110 22:05:17.291"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.292" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.292" status="PASS" endtime="20161110 22:05:17.292"></status>
</kw>
<status starttime="20161110 22:05:17.291" status="PASS" endtime="20161110 22:05:17.292"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.293" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.293" status="PASS" endtime="20161110 22:05:17.293"></status>
</kw>
<status starttime="20161110 22:05:17.293" status="PASS" endtime="20161110 22:05:17.294"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.295" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.295" status="PASS" endtime="20161110 22:05:17.295"></status>
</kw>
<status starttime="20161110 22:05:17.294" status="PASS" endtime="20161110 22:05:17.295"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.296" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.296" status="PASS" endtime="20161110 22:05:17.297"></status>
</kw>
<status starttime="20161110 22:05:17.296" status="PASS" endtime="20161110 22:05:17.297"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.298" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.297" status="PASS" endtime="20161110 22:05:17.298"></status>
</kw>
<status starttime="20161110 22:05:17.297" status="PASS" endtime="20161110 22:05:17.298"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.299" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.299" status="PASS" endtime="20161110 22:05:17.299"></status>
</kw>
<status starttime="20161110 22:05:17.299" status="PASS" endtime="20161110 22:05:17.300"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.300" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.300" status="PASS" endtime="20161110 22:05:17.301"></status>
</kw>
<status starttime="20161110 22:05:17.300" status="PASS" endtime="20161110 22:05:17.301"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.302" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.301" status="PASS" endtime="20161110 22:05:17.302"></status>
</kw>
<status starttime="20161110 22:05:17.301" status="PASS" endtime="20161110 22:05:17.302"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.303" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.303" status="PASS" endtime="20161110 22:05:17.303"></status>
</kw>
<status starttime="20161110 22:05:17.302" status="PASS" endtime="20161110 22:05:17.303"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${OPENBMC_MODEL.replace('./data/','').replace('.py','')}${\n}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.304" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.304" status="PASS" endtime="20161110 22:05:17.304"></status>
</kw>
<status starttime="20161110 22:05:17.303" status="PASS" endtime="20161110 22:05:17.305"></status>
</kw>
<status starttime="20161110 22:05:17.298" status="PASS" endtime="20161110 22:05:17.305"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.306" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.305" status="PASS" endtime="20161110 22:05:17.306"></status>
</kw>
<status starttime="20161110 22:05:17.305" status="PASS" endtime="20161110 22:05:17.306"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:17.306">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20161110 22:05:17.306" status="PASS" endtime="20161110 22:05:17.306"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.307" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.307" status="PASS" endtime="20161110 22:05:17.308"></status>
</kw>
<status starttime="20161110 22:05:17.307" status="PASS" endtime="20161110 22:05:17.308"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.309" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.308" status="PASS" endtime="20161110 22:05:17.309"></status>
</kw>
<status starttime="20161110 22:05:17.308" status="PASS" endtime="20161110 22:05:17.309"></status>
</kw>
<status starttime="20161110 22:05:17.307" status="PASS" endtime="20161110 22:05:17.309"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.310" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.310" status="PASS" endtime="20161110 22:05:17.310"></status>
</kw>
<status starttime="20161110 22:05:17.309" status="PASS" endtime="20161110 22:05:17.310"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.311" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.311" status="PASS" endtime="20161110 22:05:17.311"></status>
</kw>
<status starttime="20161110 22:05:17.310" status="PASS" endtime="20161110 22:05:17.311"></status>
</kw>
<status starttime="20161110 22:05:17.309" status="PASS" endtime="20161110 22:05:17.311"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.312" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.312" status="PASS" endtime="20161110 22:05:17.312"></status>
</kw>
<status starttime="20161110 22:05:17.311" status="PASS" endtime="20161110 22:05:17.313"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.313" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.313" status="PASS" endtime="20161110 22:05:17.314"></status>
</kw>
<status starttime="20161110 22:05:17.313" status="PASS" endtime="20161110 22:05:17.314"></status>
</kw>
<status starttime="20161110 22:05:17.311" status="PASS" endtime="20161110 22:05:17.314"></status>
</kw>
<status starttime="20161110 22:05:17.306" status="PASS" endtime="20161110 22:05:17.314"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.315" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:17.314" status="PASS" endtime="20161110 22:05:17.315"></status>
</kw>
<status starttime="20161110 22:05:17.314" status="PASS" endtime="20161110 22:05:17.315"></status>
</kw>
<status starttime="20161110 22:05:17.285" status="PASS" endtime="20161110 22:05:17.315"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:17.316">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20161110 22:05:17.315" status="PASS" endtime="20161110 22:05:17.316"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:17.317">@{method_list} = [ ('OS FFDC', 'OS FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('BMC Specific Files', 'BMC FFDC Files') ]</msg>
<status starttime="20161110 22:05:17.317" status="PASS" endtime="20161110 22:05:17.317"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.321">Returning from the enclosing user keyword.</msg>
<status starttime="20161110 22:05:17.319" status="PASS" endtime="20161110 22:05:17.322"></status>
</kw>
<status starttime="20161110 22:05:17.318" status="PASS" endtime="20161110 22:05:17.322"></status>
</kw>
<status starttime="20161110 22:05:17.318" status="PASS" endtime="20161110 22:05:17.322"></status>
</kw>
<status starttime="20161110 22:05:17.317" status="PASS" endtime="20161110 22:05:17.322"></status>
</kw>
<status starttime="20161110 22:05:17.317" status="PASS" endtime="20161110 22:05:17.322"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:05:17.324">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 22:05:17.324" status="FAIL" endtime="20161110 22:05:17.324"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:17.325">${has_host} = False</msg>
<status starttime="20161110 22:05:17.324" status="PASS" endtime="20161110 22:05:17.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 22:05:17.327" status="PASS" endtime="20161110 22:05:17.328"></status>
</kw>
<status starttime="20161110 22:05:17.325" status="PASS" endtime="20161110 22:05:17.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:17.332">${port_num} = 22</msg>
<status starttime="20161110 22:05:17.332" status="PASS" endtime="20161110 22:05:17.332"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:17.333">${SSH_PORT} = 22</msg>
<status starttime="20161110 22:05:17.333" status="PASS" endtime="20161110 22:05:17.333"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:17.333">${https_num} = 443</msg>
<status starttime="20161110 22:05:17.333" status="PASS" endtime="20161110 22:05:17.333"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.334">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 22:05:17.334" status="PASS" endtime="20161110 22:05:17.334"></status>
</kw>
<status starttime="20161110 22:05:17.332" status="PASS" endtime="20161110 22:05:17.335"></status>
</kw>
<status starttime="20161110 22:05:17.328" status="PASS" endtime="20161110 22:05:17.335"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:05:17.335">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 22:05:17.335" status="FAIL" endtime="20161110 22:05:17.335"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:17.336">${has_port} = False</msg>
<status starttime="20161110 22:05:17.335" status="PASS" endtime="20161110 22:05:17.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 22:05:17.339" status="PASS" endtime="20161110 22:05:17.339"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 22:05:17.340" status="PASS" endtime="20161110 22:05:17.340"></status>
</kw>
<status starttime="20161110 22:05:17.339" status="PASS" endtime="20161110 22:05:17.340"></status>
</kw>
<status starttime="20161110 22:05:17.336" status="PASS" endtime="20161110 22:05:17.340"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:17.341">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 22:05:21.430">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 22:05:17.340" status="PASS" endtime="20161110 22:05:21.430"></status>
</kw>
<status starttime="20161110 22:05:17.323" status="PASS" endtime="20161110 22:05:21.431"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:21.432">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20161110 22:05:21.431" status="PASS" endtime="20161110 22:05:21.432"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:21.434">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20161110 22:05:21.433" status="PASS" endtime="20161110 22:05:21.434"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:21.439">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20161110 22:05:21.434" status="PASS" endtime="20161110 22:05:21.439"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:21.445" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:21.445" status="PASS" endtime="20161110 22:05:21.445"></status>
</kw>
<status starttime="20161110 22:05:21.444" status="PASS" endtime="20161110 22:05:21.445"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:21.446" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:21.446" status="PASS" endtime="20161110 22:05:21.447"></status>
</kw>
<status starttime="20161110 22:05:21.446" status="PASS" endtime="20161110 22:05:21.447"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:21.448" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:21.447" status="PASS" endtime="20161110 22:05:21.448"></status>
</kw>
<status starttime="20161110 22:05:21.447" status="PASS" endtime="20161110 22:05:21.448"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:21.449" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:21.448" status="PASS" endtime="20161110 22:05:21.449"></status>
</kw>
<status starttime="20161110 22:05:21.448" status="PASS" endtime="20161110 22:05:21.449"></status>
</kw>
<status starttime="20161110 22:05:21.444" status="PASS" endtime="20161110 22:05:21.449"></status>
</kw>
<status starttime="20161110 22:05:21.441" status="PASS" endtime="20161110 22:05:21.449"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:21.450">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20161110 22:05:21.580">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 22:05:21.580">${stdout} = 20161109203916</msg>
<msg level="INFO" timestamp="20161110 22:05:21.580">${stderr} = </msg>
<status starttime="20161110 22:05:21.449" status="PASS" endtime="20161110 22:05:21.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:21.585" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:21.584" status="PASS" endtime="20161110 22:05:21.585"></status>
</kw>
<status starttime="20161110 22:05:21.584" status="PASS" endtime="20161110 22:05:21.585"></status>
</kw>
<status starttime="20161110 22:05:21.581" status="PASS" endtime="20161110 22:05:21.585"></status>
</kw>
<status starttime="20161110 22:05:21.440" status="PASS" endtime="20161110 22:05:21.585"></status>
</kw>
<status starttime="20161110 22:05:21.439" status="PASS" endtime="20161110 22:05:21.585"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:21.590" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:21.590" status="PASS" endtime="20161110 22:05:21.590"></status>
</kw>
<status starttime="20161110 22:05:21.589" status="PASS" endtime="20161110 22:05:21.590"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:21.591" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:21.591" status="PASS" endtime="20161110 22:05:21.592"></status>
</kw>
<status starttime="20161110 22:05:21.591" status="PASS" endtime="20161110 22:05:21.592"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:21.593" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:21.592" status="PASS" endtime="20161110 22:05:21.593"></status>
</kw>
<status starttime="20161110 22:05:21.592" status="PASS" endtime="20161110 22:05:21.593"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:21.594" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:21.594" status="PASS" endtime="20161110 22:05:21.594"></status>
</kw>
<status starttime="20161110 22:05:21.593" status="PASS" endtime="20161110 22:05:21.594"></status>
</kw>
<status starttime="20161110 22:05:21.589" status="PASS" endtime="20161110 22:05:21.595"></status>
</kw>
<status starttime="20161110 22:05:21.586" status="PASS" endtime="20161110 22:05:21.595"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:21.595">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20161110 22:05:21.860">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 22:05:21.860">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.0-213"
VERSION_ID="v1.99.0-213-g17b02f3-dirty"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC ...</msg>
<msg level="INFO" timestamp="20161110 22:05:21.860">${stderr} = </msg>
<status starttime="20161110 22:05:21.595" status="PASS" endtime="20161110 22:05:21.860"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:21.865" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:21.864" status="PASS" endtime="20161110 22:05:21.865"></status>
</kw>
<status starttime="20161110 22:05:21.864" status="PASS" endtime="20161110 22:05:21.865"></status>
</kw>
<status starttime="20161110 22:05:21.861" status="PASS" endtime="20161110 22:05:21.865"></status>
</kw>
<status starttime="20161110 22:05:21.585" status="PASS" endtime="20161110 22:05:21.865"></status>
</kw>
<status starttime="20161110 22:05:21.585" status="PASS" endtime="20161110 22:05:21.865"></status>
</kw>
<status starttime="20161110 22:05:21.439" status="PASS" endtime="20161110 22:05:21.865"></status>
</kw>
<status starttime="20161110 22:05:21.432" status="PASS" endtime="20161110 22:05:21.865"></status>
</kw>
<status starttime="20161110 22:05:21.432" status="PASS" endtime="20161110 22:05:21.865"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:21.866">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20161110 22:05:21.866" status="PASS" endtime="20161110 22:05:21.866"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:21.867">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20161110 22:05:21.866" status="PASS" endtime="20161110 22:05:21.867"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:21.872" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:21.872" status="PASS" endtime="20161110 22:05:21.872"></status>
</kw>
<status starttime="20161110 22:05:21.871" status="PASS" endtime="20161110 22:05:21.872"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:21.873" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:21.873" status="PASS" endtime="20161110 22:05:21.873"></status>
</kw>
<status starttime="20161110 22:05:21.872" status="PASS" endtime="20161110 22:05:21.873"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:21.874" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:21.874" status="PASS" endtime="20161110 22:05:21.874"></status>
</kw>
<status starttime="20161110 22:05:21.873" status="PASS" endtime="20161110 22:05:21.875"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:21.875" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:21.875" status="PASS" endtime="20161110 22:05:21.876"></status>
</kw>
<status starttime="20161110 22:05:21.875" status="PASS" endtime="20161110 22:05:21.876"></status>
</kw>
<status starttime="20161110 22:05:21.871" status="PASS" endtime="20161110 22:05:21.876"></status>
</kw>
<status starttime="20161110 22:05:21.868" status="PASS" endtime="20161110 22:05:21.876"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:21.876">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20161110 22:05:22.388">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 22:05:22.388">${stdout} =  23:16:40 up  3:19,  load average: 2.02, 1.16, 0.82</msg>
<msg level="INFO" timestamp="20161110 22:05:22.388">${stderr} = </msg>
<status starttime="20161110 22:05:21.876" status="PASS" endtime="20161110 22:05:22.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:22.395" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:22.394" status="PASS" endtime="20161110 22:05:22.395"></status>
</kw>
<status starttime="20161110 22:05:22.393" status="PASS" endtime="20161110 22:05:22.396"></status>
</kw>
<status starttime="20161110 22:05:22.389" status="PASS" endtime="20161110 22:05:22.396"></status>
</kw>
<status starttime="20161110 22:05:21.867" status="PASS" endtime="20161110 22:05:22.396"></status>
</kw>
<status starttime="20161110 22:05:21.867" status="PASS" endtime="20161110 22:05:22.396"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:22.403" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:22.403" status="PASS" endtime="20161110 22:05:22.403"></status>
</kw>
<status starttime="20161110 22:05:22.402" status="PASS" endtime="20161110 22:05:22.403"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:22.404" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:22.404" status="PASS" endtime="20161110 22:05:22.404"></status>
</kw>
<status starttime="20161110 22:05:22.403" status="PASS" endtime="20161110 22:05:22.404"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:22.405" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:22.405" status="PASS" endtime="20161110 22:05:22.405"></status>
</kw>
<status starttime="20161110 22:05:22.405" status="PASS" endtime="20161110 22:05:22.406"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:22.406" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:22.406" status="PASS" endtime="20161110 22:05:22.407"></status>
</kw>
<status starttime="20161110 22:05:22.406" status="PASS" endtime="20161110 22:05:22.407"></status>
</kw>
<status starttime="20161110 22:05:22.401" status="PASS" endtime="20161110 22:05:22.407"></status>
</kw>
<status starttime="20161110 22:05:22.397" status="PASS" endtime="20161110 22:05:22.407"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:22.407">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20161110 22:05:22.690">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 22:05:22.690">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      242.4M         0    242.4M   0% /dev
tmpfs                tmpfs         243.7M     11.9...</msg>
<msg level="INFO" timestamp="20161110 22:05:22.690">${stderr} = </msg>
<status starttime="20161110 22:05:22.407" status="PASS" endtime="20161110 22:05:22.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:22.694" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:22.694" status="PASS" endtime="20161110 22:05:22.694"></status>
</kw>
<status starttime="20161110 22:05:22.693" status="PASS" endtime="20161110 22:05:22.694"></status>
</kw>
<status starttime="20161110 22:05:22.690" status="PASS" endtime="20161110 22:05:22.694"></status>
</kw>
<status starttime="20161110 22:05:22.396" status="PASS" endtime="20161110 22:05:22.695"></status>
</kw>
<status starttime="20161110 22:05:22.396" status="PASS" endtime="20161110 22:05:22.695"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:22.701" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:22.700" status="PASS" endtime="20161110 22:05:22.701"></status>
</kw>
<status starttime="20161110 22:05:22.700" status="PASS" endtime="20161110 22:05:22.701"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:22.702" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:22.702" status="PASS" endtime="20161110 22:05:22.702"></status>
</kw>
<status starttime="20161110 22:05:22.701" status="PASS" endtime="20161110 22:05:22.702"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:22.703" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:22.703" status="PASS" endtime="20161110 22:05:22.703"></status>
</kw>
<status starttime="20161110 22:05:22.702" status="PASS" endtime="20161110 22:05:22.703"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:22.704" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:22.704" status="PASS" endtime="20161110 22:05:22.704"></status>
</kw>
<status starttime="20161110 22:05:22.703" status="PASS" endtime="20161110 22:05:22.705"></status>
</kw>
<status starttime="20161110 22:05:22.699" status="PASS" endtime="20161110 22:05:22.705"></status>
</kw>
<status starttime="20161110 22:05:22.696" status="PASS" endtime="20161110 22:05:22.705"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:22.705">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20161110 22:05:23.083">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 22:05:23.084">${stdout} = Linux barreleye 4.7.10-c5682cbc3542add705e35152329436067bb1f94a #1 Tue Nov 1 05:44:54 UTC 2016 armv5tejl GNU/Linux</msg>
<msg level="INFO" timestamp="20161110 22:05:23.084">${stderr} = </msg>
<status starttime="20161110 22:05:22.705" status="PASS" endtime="20161110 22:05:23.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:23.091" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:23.090" status="PASS" endtime="20161110 22:05:23.091"></status>
</kw>
<status starttime="20161110 22:05:23.089" status="PASS" endtime="20161110 22:05:23.091"></status>
</kw>
<status starttime="20161110 22:05:23.084" status="PASS" endtime="20161110 22:05:23.092"></status>
</kw>
<status starttime="20161110 22:05:22.695" status="PASS" endtime="20161110 22:05:23.092"></status>
</kw>
<status starttime="20161110 22:05:22.695" status="PASS" endtime="20161110 22:05:23.092"></status>
</kw>
<status starttime="20161110 22:05:21.867" status="PASS" endtime="20161110 22:05:23.092"></status>
</kw>
<status starttime="20161110 22:05:21.865" status="PASS" endtime="20161110 22:05:23.092"></status>
</kw>
<status starttime="20161110 22:05:21.865" status="PASS" endtime="20161110 22:05:23.092"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:23.094">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20161110 22:05:23.093" status="PASS" endtime="20161110 22:05:23.094"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:23.095">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20161110 22:05:23.094" status="PASS" endtime="20161110 22:05:23.095"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:23.103" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:23.103" status="PASS" endtime="20161110 22:05:23.103"></status>
</kw>
<status starttime="20161110 22:05:23.102" status="PASS" endtime="20161110 22:05:23.103"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:23.104" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:23.104" status="PASS" endtime="20161110 22:05:23.105"></status>
</kw>
<status starttime="20161110 22:05:23.104" status="PASS" endtime="20161110 22:05:23.105"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:23.106" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:23.105" status="PASS" endtime="20161110 22:05:23.106"></status>
</kw>
<status starttime="20161110 22:05:23.105" status="PASS" endtime="20161110 22:05:23.106"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:23.107" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:23.106" status="PASS" endtime="20161110 22:05:23.107"></status>
</kw>
<status starttime="20161110 22:05:23.106" status="PASS" endtime="20161110 22:05:23.107"></status>
</kw>
<status starttime="20161110 22:05:23.102" status="PASS" endtime="20161110 22:05:23.107"></status>
</kw>
<status starttime="20161110 22:05:23.097" status="PASS" endtime="20161110 22:05:23.107"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:23.107">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20161110 22:05:26.631">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 22:05:26.631">${stdout} =  = HOST_POWERED_ON</msg>
<msg level="INFO" timestamp="20161110 22:05:26.631">${stderr} = </msg>
<status starttime="20161110 22:05:23.107" status="PASS" endtime="20161110 22:05:26.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:26.639" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:26.638" status="PASS" endtime="20161110 22:05:26.639"></status>
</kw>
<status starttime="20161110 22:05:26.637" status="PASS" endtime="20161110 22:05:26.639"></status>
</kw>
<status starttime="20161110 22:05:26.632" status="PASS" endtime="20161110 22:05:26.639"></status>
</kw>
<status starttime="20161110 22:05:23.096" status="PASS" endtime="20161110 22:05:26.640"></status>
</kw>
<status starttime="20161110 22:05:23.095" status="PASS" endtime="20161110 22:05:26.640"></status>
</kw>
<status starttime="20161110 22:05:23.095" status="PASS" endtime="20161110 22:05:26.640"></status>
</kw>
<status starttime="20161110 22:05:23.093" status="PASS" endtime="20161110 22:05:26.640"></status>
</kw>
<status starttime="20161110 22:05:23.092" status="PASS" endtime="20161110 22:05:26.640"></status>
</kw>
<status starttime="20161110 22:05:21.432" status="PASS" endtime="20161110 22:05:26.640"></status>
</kw>
<status starttime="20161110 22:05:17.323" status="PASS" endtime="20161110 22:05:26.640"></status>
</kw>
<status starttime="20161110 22:05:17.323" status="PASS" endtime="20161110 22:05:26.640"></status>
</kw>
<status starttime="20161110 22:05:17.322" status="PASS" endtime="20161110 22:05:26.641"></status>
</kw>
<status starttime="20161110 22:05:17.322" status="PASS" endtime="20161110 22:05:26.641"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:05:26.646">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 22:05:26.645" status="FAIL" endtime="20161110 22:05:26.646"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:26.646">${has_host} = False</msg>
<status starttime="20161110 22:05:26.644" status="PASS" endtime="20161110 22:05:26.646"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 22:05:26.653" status="PASS" endtime="20161110 22:05:26.653"></status>
</kw>
<status starttime="20161110 22:05:26.649" status="PASS" endtime="20161110 22:05:26.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:26.658">${port_num} = 22</msg>
<status starttime="20161110 22:05:26.657" status="PASS" endtime="20161110 22:05:26.658"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:26.658">${SSH_PORT} = 22</msg>
<status starttime="20161110 22:05:26.658" status="PASS" endtime="20161110 22:05:26.658"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:26.659">${https_num} = 443</msg>
<status starttime="20161110 22:05:26.659" status="PASS" endtime="20161110 22:05:26.659"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:26.660">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 22:05:26.659" status="PASS" endtime="20161110 22:05:26.660"></status>
</kw>
<status starttime="20161110 22:05:26.657" status="PASS" endtime="20161110 22:05:26.660"></status>
</kw>
<status starttime="20161110 22:05:26.654" status="PASS" endtime="20161110 22:05:26.660"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:05:26.661">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 22:05:26.661" status="FAIL" endtime="20161110 22:05:26.661"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:26.661">${has_port} = False</msg>
<status starttime="20161110 22:05:26.660" status="PASS" endtime="20161110 22:05:26.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 22:05:26.665" status="PASS" endtime="20161110 22:05:26.665"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 22:05:26.665" status="PASS" endtime="20161110 22:05:26.666"></status>
</kw>
<status starttime="20161110 22:05:26.664" status="PASS" endtime="20161110 22:05:26.666"></status>
</kw>
<status starttime="20161110 22:05:26.661" status="PASS" endtime="20161110 22:05:26.666"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:26.666">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 22:05:29.010">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 22:05:26.666" status="PASS" endtime="20161110 22:05:29.011"></status>
</kw>
<status starttime="20161110 22:05:26.643" status="PASS" endtime="20161110 22:05:29.011"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.012">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20161110 22:05:29.011" status="PASS" endtime="20161110 22:05:29.012"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.014">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/records/events/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/org/openbmc/inventory/system/enumerate') | ('BMC_led', '/org...</msg>
<status starttime="20161110 22:05:29.013" status="PASS" endtime="20161110 22:05:29.014"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.016">${logpath} = /tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_record_log</msg>
<status starttime="20161110 22:05:29.015" status="PASS" endtime="20161110 22:05:29.016"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.018">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20161110 22:05:29.017" status="PASS" endtime="20161110 22:05:29.018"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.020">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 22:05:29.019" status="PASS" endtime="20161110 22:05:29.020"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:29.021">URI:https://9.3.23.30:443/org/openbmc/records/events/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 22:05:29.021" status="PASS" endtime="20161110 22:05:29.021"></status>
</kw>
<status starttime="20161110 22:05:29.020" status="PASS" endtime="20161110 22:05:29.021"></status>
</kw>
<status starttime="20161110 22:05:29.018" status="PASS" endtime="20161110 22:05:29.022"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:29.022">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:05:29.022" status="PASS" endtime="20161110 22:05:29.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.024">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:05:29.023" status="PASS" endtime="20161110 22:05:29.024"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.024">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:05:29.024" status="PASS" endtime="20161110 22:05:29.024"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.025">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:05:29.025" status="PASS" endtime="20161110 22:05:29.025"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.356">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:05:29.356">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:29.026" status="PASS" endtime="20161110 22:05:29.356"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:29.357">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:29.357" status="PASS" endtime="20161110 22:05:29.357"></status>
</kw>
<status starttime="20161110 22:05:29.022" status="PASS" endtime="20161110 22:05:29.357"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.573">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161110 22:05:29.573">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:29.357" status="PASS" endtime="20161110 22:05:29.573"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.574">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/records/events/281": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chass...</msg>
<status starttime="20161110 22:05:29.574" status="PASS" endtime="20161110 22:05:29.574"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:29.575">Response code:200, Content:{
  "data": {
    "/org/openbmc/records/events/281": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
        ]
      ], 
      "debug_data": [
        1
      ], 
      "message": "Error", 
      "reported_by": "Host", 
      "severity": "Testing failure", 
      "time": "2016:10:20 23:00:40"
    }, 
    "/org/openbmc/records/events/281/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
      ]
    }, 
    "/org/openbmc/records/events/283": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm3"
        ], 
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
        ]
      ], 
      "debug_data": [
        48, 
        0, 
        19, 
        127, 
        136, 
        255
      ], 
      "message": "A Test event log just happened", 
      "reported_by": "Test", 
      "severity": "Info", 
      "time": "2016:10:20 23:00:43"
    }, 
    "/org/openbmc/records/events/283/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
        "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:05:29.575" status="PASS" endtime="20161110 22:05:29.575"></status>
</kw>
<status starttime="20161110 22:05:29.575" status="PASS" endtime="20161110 22:05:29.576"></status>
</kw>
<status starttime="20161110 22:05:29.573" status="PASS" endtime="20161110 22:05:29.576"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:29.576">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:29.016" status="PASS" endtime="20161110 22:05:29.576"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:29.577">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:29.576" status="PASS" endtime="20161110 22:05:29.577"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:29.577">${status} = True</msg>
<status starttime="20161110 22:05:29.576" status="PASS" endtime="20161110 22:05:29.577"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161110 22:05:29.577" status="PASS" endtime="20161110 22:05:29.580"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.581">To JSON using : content={
  "data": {
    "/org/openbmc/records/events/281": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
        ]
      ], 
      "debug_data": [
        1
      ], 
      "message": "Error", 
      "reported_by": "Host", 
      "severity": "Testing failure", 
      "time": "2016:10:20 23:00:40"
    }, 
    "/org/openbmc/records/events/281/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
      ]
    }, 
    "/org/openbmc/records/events/283": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm3"
        ], 
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
        ]
      ], 
      "debug_data": [
        48, 
        0, 
        19, 
        127, 
        136, 
        255
      ], 
      "message": "A Test event log just happened", 
      "reported_by": "Test", 
      "severity": "Info", 
      "time": "2016:10:20 23:00:43"
    }, 
    "/org/openbmc/records/events/283/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
        "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:05:29.581">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161110 22:05:29.581">${jsondata} = {
    "data": {
        "/org/openbmc/records/events/281": {
            "associations": [
                [
                    "fru",
                    "event",
                    "/org/openbmc/i...</msg>
<status starttime="20161110 22:05:29.580" status="PASS" endtime="20161110 22:05:29.581"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:29.582" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_record_log"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_record_log&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:29.582" status="PASS" endtime="20161110 22:05:29.583"></status>
</kw>
<status starttime="20161110 22:05:29.581" status="PASS" endtime="20161110 22:05:29.583"></status>
</kw>
<status starttime="20161110 22:05:29.014" status="PASS" endtime="20161110 22:05:29.583"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.583">${logpath} = /tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_sensor_list</msg>
<status starttime="20161110 22:05:29.583" status="PASS" endtime="20161110 22:05:29.583"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.584">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20161110 22:05:29.584" status="PASS" endtime="20161110 22:05:29.584"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.586">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 22:05:29.585" status="PASS" endtime="20161110 22:05:29.586"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:29.587">URI:https://9.3.23.30:443/org/openbmc/sensors/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 22:05:29.586" status="PASS" endtime="20161110 22:05:29.587"></status>
</kw>
<status starttime="20161110 22:05:29.586" status="PASS" endtime="20161110 22:05:29.587"></status>
</kw>
<status starttime="20161110 22:05:29.585" status="PASS" endtime="20161110 22:05:29.587"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:29.588">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:05:29.587" status="PASS" endtime="20161110 22:05:29.588"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.589">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:05:29.588" status="PASS" endtime="20161110 22:05:29.589"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.589">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:05:29.589" status="PASS" endtime="20161110 22:05:29.589"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.590">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:05:29.589" status="PASS" endtime="20161110 22:05:29.590"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:29.922">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:05:29.923">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:29.590" status="PASS" endtime="20161110 22:05:29.923"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:29.923">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:29.923" status="PASS" endtime="20161110 22:05:29.923"></status>
</kw>
<status starttime="20161110 22:05:29.587" status="PASS" endtime="20161110 22:05:29.923"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:31.792">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161110 22:05:31.792">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:29.924" status="PASS" endtime="20161110 22:05:31.792"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:31.796">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "er...</msg>
<status starttime="20161110 22:05:31.794" status="PASS" endtime="20161110 22:05:31.796"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:31.797">Response code:200, Content:{
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 10824, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCA/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12021, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 11624, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 11990, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/speed/fan0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan5": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 23275, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19285, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19565, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/ambient": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon1/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 26500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/rtc": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon0/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 29000, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 958, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 954, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1026, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1034, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1034, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1294, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1296, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1298, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1156, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1304, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1302, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1302, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1152, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:05:31.797" status="PASS" endtime="20161110 22:05:31.799"></status>
</kw>
<status starttime="20161110 22:05:31.796" status="PASS" endtime="20161110 22:05:31.799"></status>
</kw>
<status starttime="20161110 22:05:31.793" status="PASS" endtime="20161110 22:05:31.800"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:31.800">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:29.584" status="PASS" endtime="20161110 22:05:31.800"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:31.802">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:31.801" status="PASS" endtime="20161110 22:05:31.802"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:31.802">${status} = True</msg>
<status starttime="20161110 22:05:31.801" status="PASS" endtime="20161110 22:05:31.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161110 22:05:31.803" status="PASS" endtime="20161110 22:05:31.807"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:31.813">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 10824, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCA/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12021, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 11624, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 11990, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/speed/fan0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan5": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 23275, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19285, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19565, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/ambient": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon1/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 26500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/rtc": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon0/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 29000, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 958, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 954, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1026, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1034, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1034, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1294, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1296, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1298, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1156, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1304, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1302, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1302, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1152, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:05:31.814">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161110 22:05:31.814">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/HSCA/Iout": {
            "adjust": 0.25,
            "critical_lower": 0,
            "critical_upper": 0,
            "emergency_enabled": 0,
          ...</msg>
<status starttime="20161110 22:05:31.808" status="PASS" endtime="20161110 22:05:31.814"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:31.816" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_sensor_list"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_sensor_list&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:31.815" status="PASS" endtime="20161110 22:05:31.816"></status>
</kw>
<status starttime="20161110 22:05:31.814" status="PASS" endtime="20161110 22:05:31.816"></status>
</kw>
<status starttime="20161110 22:05:29.583" status="PASS" endtime="20161110 22:05:31.816"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/org/openbmc/inventory/system/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:31.817">${logpath} = /tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_inventory</msg>
<status starttime="20161110 22:05:31.817" status="PASS" endtime="20161110 22:05:31.817"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:31.818">${base_uri} = /org/openbmc/inventory/system/enumerate</msg>
<status starttime="20161110 22:05:31.818" status="PASS" endtime="20161110 22:05:31.818"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:31.819">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 22:05:31.819" status="PASS" endtime="20161110 22:05:31.819"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:31.820">URI:https://9.3.23.30:443/org/openbmc/inventory/system/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 22:05:31.820" status="PASS" endtime="20161110 22:05:31.820"></status>
</kw>
<status starttime="20161110 22:05:31.820" status="PASS" endtime="20161110 22:05:31.820"></status>
</kw>
<status starttime="20161110 22:05:31.818" status="PASS" endtime="20161110 22:05:31.821"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:31.821">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:05:31.821" status="PASS" endtime="20161110 22:05:31.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:31.823">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:05:31.822" status="PASS" endtime="20161110 22:05:31.823"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:31.823">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:05:31.823" status="PASS" endtime="20161110 22:05:31.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:31.824">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:05:31.823" status="PASS" endtime="20161110 22:05:31.824"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:32.284">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:05:32.284">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:31.824" status="PASS" endtime="20161110 22:05:32.284"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:32.285">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:32.284" status="PASS" endtime="20161110 22:05:32.285"></status>
</kw>
<status starttime="20161110 22:05:31.821" status="PASS" endtime="20161110 22:05:32.285"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:35.725">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161110 22:05:35.725">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:32.286" status="PASS" endtime="20161110 22:05:35.725"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:35.728">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-81b8d98", 
      "Custom Field 2": "\tskiboot-5.3.2-op...</msg>
<status starttime="20161110 22:05:35.727" status="PASS" endtime="20161110 22:05:35.728"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:35.730">Response code:200, Content:{
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-81b8d98", 
      "Custom Field 2": "\tskiboot-5.3.2-opdirty", 
      "Custom Field 3": "\thostboot-5e17973-opdirty-185a924", 
      "Custom Field 4": "\tlinux-4.4.19-openpower1-opdirty-47fa53c", 
      "Custom Field 5": "\tpetitboot-v1.2.3-opdirty-94a2998", 
      "Custom Field 6": "\tbarreleye-xml-253622f-opdirty", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-3d0f297-dirty", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-213-g17b02f3-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "EC:20", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "EC:20", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1/event": {
      "endpoints": [
        "/org/openbmc/records/events/281"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/283"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/283"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:05:35.729" status="PASS" endtime="20161110 22:05:35.732"></status>
</kw>
<status starttime="20161110 22:05:35.729" status="PASS" endtime="20161110 22:05:35.732"></status>
</kw>
<status starttime="20161110 22:05:35.726" status="PASS" endtime="20161110 22:05:35.732"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:35.733">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:31.817" status="PASS" endtime="20161110 22:05:35.733"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:35.734">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:35.734" status="PASS" endtime="20161110 22:05:35.734"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:35.735">${status} = True</msg>
<status starttime="20161110 22:05:35.733" status="PASS" endtime="20161110 22:05:35.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161110 22:05:35.735" status="PASS" endtime="20161110 22:05:35.741"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:35.750">To JSON using : content={
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-81b8d98", 
      "Custom Field 2": "\tskiboot-5.3.2-opdirty", 
      "Custom Field 3": "\thostboot-5e17973-opdirty-185a924", 
      "Custom Field 4": "\tlinux-4.4.19-openpower1-opdirty-47fa53c", 
      "Custom Field 5": "\tpetitboot-v1.2.3-opdirty-94a2998", 
      "Custom Field 6": "\tbarreleye-xml-253622f-opdirty", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-3d0f297-dirty", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-213-g17b02f3-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "EC:20", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "EC:20", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1/event": {
      "endpoints": [
        "/org/openbmc/records/events/281"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/283"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/283"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:05:35.750">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161110 22:05:35.751">${jsondata} = {
    "data": {
        "/org/openbmc/inventory/system/bios": {
            "Asset Tag": "",
            "Custom Field 1": "\tbuildroot-81b8d98",
            "Custom Field 2": "\tskiboot-5.3.2-opdirty...</msg>
<status starttime="20161110 22:05:35.742" status="PASS" endtime="20161110 22:05:35.751"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:35.753" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_inventory"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_inventory&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:35.752" status="PASS" endtime="20161110 22:05:35.753"></status>
</kw>
<status starttime="20161110 22:05:35.751" status="PASS" endtime="20161110 22:05:35.753"></status>
</kw>
<status starttime="20161110 22:05:31.816" status="PASS" endtime="20161110 22:05:35.753"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:35.754">${logpath} = /tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_led</msg>
<status starttime="20161110 22:05:35.754" status="PASS" endtime="20161110 22:05:35.754"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:35.755">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20161110 22:05:35.755" status="PASS" endtime="20161110 22:05:35.755"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:35.757">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/led/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 22:05:35.756" status="PASS" endtime="20161110 22:05:35.757"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:35.757">URI:https://9.3.23.30:443/org/openbmc/control/led/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 22:05:35.757" status="PASS" endtime="20161110 22:05:35.758"></status>
</kw>
<status starttime="20161110 22:05:35.757" status="PASS" endtime="20161110 22:05:35.758"></status>
</kw>
<status starttime="20161110 22:05:35.755" status="PASS" endtime="20161110 22:05:35.758"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:35.759">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:05:35.758" status="PASS" endtime="20161110 22:05:35.759"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:35.760">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:05:35.759" status="PASS" endtime="20161110 22:05:35.760"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:35.760">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:05:35.760" status="PASS" endtime="20161110 22:05:35.760"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:35.761">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:05:35.760" status="PASS" endtime="20161110 22:05:35.761"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:36.447">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:05:36.448">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:35.761" status="PASS" endtime="20161110 22:05:36.448"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:36.449">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:36.448" status="PASS" endtime="20161110 22:05:36.449"></status>
</kw>
<status starttime="20161110 22:05:35.758" status="PASS" endtime="20161110 22:05:36.449"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:36.806">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161110 22:05:36.806">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:36.449" status="PASS" endtime="20161110 22:05:36.807"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:36.809">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK...</msg>
<status starttime="20161110 22:05:36.808" status="PASS" endtime="20161110 22:05:36.809"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:36.810">Response code:200, Content:{
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:05:36.810" status="PASS" endtime="20161110 22:05:36.810"></status>
</kw>
<status starttime="20161110 22:05:36.809" status="PASS" endtime="20161110 22:05:36.811"></status>
</kw>
<status starttime="20161110 22:05:36.807" status="PASS" endtime="20161110 22:05:36.811"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:36.811">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:35.754" status="PASS" endtime="20161110 22:05:36.811"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:36.813">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:36.812" status="PASS" endtime="20161110 22:05:36.813"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:36.813">${status} = True</msg>
<status starttime="20161110 22:05:36.812" status="PASS" endtime="20161110 22:05:36.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161110 22:05:36.814" status="PASS" endtime="20161110 22:05:36.818"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:36.819">To JSON using : content={
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:05:36.819">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161110 22:05:36.819">${jsondata} = {
    "data": {
        "/org/openbmc/control/led/beep": {},
        "/org/openbmc/control/led/heartbeat": {},
        "/org/openbmc/control/led/identify": {}
    },
    "message": "200 OK",
    "stat...</msg>
<status starttime="20161110 22:05:36.818" status="PASS" endtime="20161110 22:05:36.819"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:36.822" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_led"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_led&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:36.821" status="PASS" endtime="20161110 22:05:36.822"></status>
</kw>
<status starttime="20161110 22:05:36.820" status="PASS" endtime="20161110 22:05:36.822"></status>
</kw>
<status starttime="20161110 22:05:35.753" status="PASS" endtime="20161110 22:05:36.823"></status>
</kw>
<status starttime="20161110 22:05:29.014" status="PASS" endtime="20161110 22:05:36.823"></status>
</kw>
<status starttime="20161110 22:05:29.013" status="PASS" endtime="20161110 22:05:36.823"></status>
</kw>
<status starttime="20161110 22:05:29.012" status="PASS" endtime="20161110 22:05:36.823"></status>
</kw>
<status starttime="20161110 22:05:29.012" status="PASS" endtime="20161110 22:05:36.823"></status>
</kw>
<status starttime="20161110 22:05:26.643" status="PASS" endtime="20161110 22:05:36.823"></status>
</kw>
<status starttime="20161110 22:05:26.642" status="PASS" endtime="20161110 22:05:36.823"></status>
</kw>
<status starttime="20161110 22:05:26.641" status="PASS" endtime="20161110 22:05:36.823"></status>
</kw>
<status starttime="20161110 22:05:26.641" status="PASS" endtime="20161110 22:05:36.823"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:05:36.826">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 22:05:36.825" status="FAIL" endtime="20161110 22:05:36.826"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:36.826">${has_host} = False</msg>
<status starttime="20161110 22:05:36.825" status="PASS" endtime="20161110 22:05:36.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 22:05:36.829" status="PASS" endtime="20161110 22:05:36.829"></status>
</kw>
<status starttime="20161110 22:05:36.826" status="PASS" endtime="20161110 22:05:36.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:36.833">${port_num} = 22</msg>
<status starttime="20161110 22:05:36.833" status="PASS" endtime="20161110 22:05:36.833"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:36.833">${SSH_PORT} = 22</msg>
<status starttime="20161110 22:05:36.833" status="PASS" endtime="20161110 22:05:36.833"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:36.834">${https_num} = 443</msg>
<status starttime="20161110 22:05:36.834" status="PASS" endtime="20161110 22:05:36.834"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:36.835">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 22:05:36.834" status="PASS" endtime="20161110 22:05:36.835"></status>
</kw>
<status starttime="20161110 22:05:36.832" status="PASS" endtime="20161110 22:05:36.835"></status>
</kw>
<status starttime="20161110 22:05:36.829" status="PASS" endtime="20161110 22:05:36.835"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:05:36.836">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 22:05:36.835" status="FAIL" endtime="20161110 22:05:36.836"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:36.836">${has_port} = False</msg>
<status starttime="20161110 22:05:36.835" status="PASS" endtime="20161110 22:05:36.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 22:05:36.839" status="PASS" endtime="20161110 22:05:36.840"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 22:05:36.840" status="PASS" endtime="20161110 22:05:36.840"></status>
</kw>
<status starttime="20161110 22:05:36.839" status="PASS" endtime="20161110 22:05:36.840"></status>
</kw>
<status starttime="20161110 22:05:36.836" status="PASS" endtime="20161110 22:05:36.840"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:36.841">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 22:05:39.166">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 22:05:36.840" status="PASS" endtime="20161110 22:05:39.167"></status>
</kw>
<status starttime="20161110 22:05:36.824" status="PASS" endtime="20161110 22:05:39.167"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:39.168">@{entries} = [ BMC FILES ]</msg>
<status starttime="20161110 22:05:39.168" status="PASS" endtime="20161110 22:05:39.168"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:39.170">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_procinfo', 'cat /proc/cpuinfo') ]</msg>
<status starttime="20161110 22:05:39.170" status="PASS" endtime="20161110 22:05:39.170"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:39.172">${logpath} = /tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_meminfo</msg>
<status starttime="20161110 22:05:39.171" status="PASS" endtime="20161110 22:05:39.172"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161110 22:05:39.173" status="PASS" endtime="20161110 22:05:39.178"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:39.179">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20161110 22:05:39.248">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 22:05:39.248">${stdout} = MemTotal:         499020 kB
MemFree:          356864 kB
MemAvailable:     395964 kB
Buffers:           10336 kB
Cached:            46372 kB
SwapCached:            0 kB
Active:           100068 kB
Inac...</msg>
<msg level="INFO" timestamp="20161110 22:05:39.248">${stderr} = </msg>
<status starttime="20161110 22:05:39.178" status="PASS" endtime="20161110 22:05:39.248"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:39.256" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_meminfo"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_meminfo&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:39.254" status="PASS" endtime="20161110 22:05:39.256"></status>
</kw>
<status starttime="20161110 22:05:39.253" status="PASS" endtime="20161110 22:05:39.256"></status>
</kw>
<status starttime="20161110 22:05:39.248" status="PASS" endtime="20161110 22:05:39.256"></status>
</kw>
<status starttime="20161110 22:05:39.172" status="PASS" endtime="20161110 22:05:39.256"></status>
</kw>
<status starttime="20161110 22:05:39.171" status="PASS" endtime="20161110 22:05:39.256"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:39.257">${logpath} = /tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_journalctl</msg>
<status starttime="20161110 22:05:39.257" status="PASS" endtime="20161110 22:05:39.257"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161110 22:05:39.259" status="PASS" endtime="20161110 22:05:39.263"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:39.264">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20161110 22:05:47.989">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 22:05:47.999">${stdout} = -- Logs begin at Thu 2016-10-20 19:57:25 UTC, end at Thu 2016-10-20 23:16:56 UTC. --
Oct 20 19:57:25 barreleye systemd-journald[404]: Runtime journal (/run/log/journal/) is 3.0M, max 24.3M, 21.3M free...</msg>
<msg level="INFO" timestamp="20161110 22:05:47.999">${stderr} = </msg>
<status starttime="20161110 22:05:39.264" status="PASS" endtime="20161110 22:05:47.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:48.011" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_journalctl"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_journalctl&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:48.008" status="PASS" endtime="20161110 22:05:48.011"></status>
</kw>
<status starttime="20161110 22:05:48.005" status="PASS" endtime="20161110 22:05:48.011"></status>
</kw>
<status starttime="20161110 22:05:48.000" status="PASS" endtime="20161110 22:05:48.011"></status>
</kw>
<status starttime="20161110 22:05:39.258" status="PASS" endtime="20161110 22:05:48.012"></status>
</kw>
<status starttime="20161110 22:05:39.256" status="PASS" endtime="20161110 22:05:48.012"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:48.012">${logpath} = /tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_proc_list</msg>
<status starttime="20161110 22:05:48.012" status="PASS" endtime="20161110 22:05:48.012"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161110 22:05:48.013" status="PASS" endtime="20161110 22:05:48.016"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:48.017">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20161110 22:05:48.337">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 22:05:48.337">${stdout} = Mem: 142264K used, 356756K free, 12468K shrd, 10336K buff, 46376K cached
CPU:   0% usr   8% sys   0% nic  91% idle   0% io   0% irq   0% sirq
Load average: 1.79 1.18 0.84 1/119 1583
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20161110 22:05:48.337">${stderr} = </msg>
<status starttime="20161110 22:05:48.016" status="PASS" endtime="20161110 22:05:48.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:48.342" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_proc_list"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_proc_list&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:48.341" status="PASS" endtime="20161110 22:05:48.342"></status>
</kw>
<status starttime="20161110 22:05:48.340" status="PASS" endtime="20161110 22:05:48.342"></status>
</kw>
<status starttime="20161110 22:05:48.338" status="PASS" endtime="20161110 22:05:48.342"></status>
</kw>
<status starttime="20161110 22:05:48.013" status="PASS" endtime="20161110 22:05:48.342"></status>
</kw>
<status starttime="20161110 22:05:48.012" status="PASS" endtime="20161110 22:05:48.342"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:48.343">${logpath} = /tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_dmesg</msg>
<status starttime="20161110 22:05:48.343" status="PASS" endtime="20161110 22:05:48.343"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161110 22:05:48.344" status="PASS" endtime="20161110 22:05:48.347"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:48.347">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20161110 22:05:48.464">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 22:05:48.464">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-c5682cbc3542add705e35152329436067bb1f94a (jenkins@hudson) (gcc version 5.3.0 (GCC) ) #1 Tue Nov 1 05:44:54 UTC 2016
CPU: ARM926EJ-S [41069265] re...</msg>
<msg level="INFO" timestamp="20161110 22:05:48.464">${stderr} = </msg>
<status starttime="20161110 22:05:48.347" status="PASS" endtime="20161110 22:05:48.464"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:48.468" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_dmesg"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_dmesg&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:48.468" status="PASS" endtime="20161110 22:05:48.468"></status>
</kw>
<status starttime="20161110 22:05:48.467" status="PASS" endtime="20161110 22:05:48.468"></status>
</kw>
<status starttime="20161110 22:05:48.464" status="PASS" endtime="20161110 22:05:48.468"></status>
</kw>
<status starttime="20161110 22:05:48.343" status="PASS" endtime="20161110 22:05:48.468"></status>
</kw>
<status starttime="20161110 22:05:48.342" status="PASS" endtime="20161110 22:05:48.468"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:48.469">${logpath} = /tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_procinfo</msg>
<status starttime="20161110 22:05:48.469" status="PASS" endtime="20161110 22:05:48.469"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161110 22:05:48.470" status="PASS" endtime="20161110 22:05:48.473"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:48.473">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20161110 22:05:48.569">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 22:05:48.569">${stdout} = processor	: 0
model name	: ARM926EJ-S rev 5 (v5l)
BogoMIPS	: 190.87
Features	: swp half thumb fastmult edsp java 
CPU implementer	: 0x41
CPU architecture: 5TEJ
CPU variant	: 0x0
CPU part	: 0x926
CPU r...</msg>
<msg level="INFO" timestamp="20161110 22:05:48.569">${stderr} = </msg>
<status starttime="20161110 22:05:48.473" status="PASS" endtime="20161110 22:05:48.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:48.574" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_procinfo"&gt;/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest/20161110220517263052_BMC_procinfo&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:48.573" status="PASS" endtime="20161110 22:05:48.574"></status>
</kw>
<status starttime="20161110 22:05:48.573" status="PASS" endtime="20161110 22:05:48.574"></status>
</kw>
<status starttime="20161110 22:05:48.569" status="PASS" endtime="20161110 22:05:48.574"></status>
</kw>
<status starttime="20161110 22:05:48.469" status="PASS" endtime="20161110 22:05:48.574"></status>
</kw>
<status starttime="20161110 22:05:48.469" status="PASS" endtime="20161110 22:05:48.574"></status>
</kw>
<status starttime="20161110 22:05:39.170" status="PASS" endtime="20161110 22:05:48.574"></status>
</kw>
<status starttime="20161110 22:05:39.169" status="PASS" endtime="20161110 22:05:48.574"></status>
</kw>
<status starttime="20161110 22:05:39.169" status="PASS" endtime="20161110 22:05:48.574"></status>
</kw>
<status starttime="20161110 22:05:39.168" status="PASS" endtime="20161110 22:05:48.574"></status>
</kw>
<status starttime="20161110 22:05:36.824" status="PASS" endtime="20161110 22:05:48.574"></status>
</kw>
<status starttime="20161110 22:05:36.824" status="PASS" endtime="20161110 22:05:48.574"></status>
</kw>
<status starttime="20161110 22:05:36.823" status="PASS" endtime="20161110 22:05:48.575"></status>
</kw>
<status starttime="20161110 22:05:36.823" status="PASS" endtime="20161110 22:05:48.575"></status>
</kw>
<status starttime="20161110 22:05:17.317" status="PASS" endtime="20161110 22:05:48.575"></status>
</kw>
<status starttime="20161110 22:05:17.316" status="PASS" endtime="20161110 22:05:48.575"></status>
</kw>
<status starttime="20161110 22:05:17.316" status="PASS" endtime="20161110 22:05:48.575"></status>
</kw>
<status starttime="20161110 22:05:17.316" status="PASS" endtime="20161110 22:05:48.575"></status>
</kw>
<status starttime="20161110 22:05:17.315" status="PASS" endtime="20161110 22:05:48.575"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:48.576">${cur_time} = 2016-11-10 22:05:48:575634</msg>
<status starttime="20161110 22:05:48.575" status="PASS" endtime="20161110 22:05:48.576"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:48.576">${cur_time} = 20161110220548575634</msg>
<status starttime="20161110 22:05:48.576" status="PASS" endtime="20161110 22:05:48.576"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:48.577">${cur_time} = 20161110220548575634</msg>
<status starttime="20161110 22:05:48.575" status="PASS" endtime="20161110 22:05:48.577"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FFDC Collection Completed \t: ${cur_time}</arg>
</arguments>
<status starttime="20161110 22:05:48.577" status="PASS" endtime="20161110 22:05:48.577"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${\n}${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:48.577">
/tmp/root/24880/obmc-robot/logs/20161110220517263052_TestsTestBasicPoweron/20161110220517263052_powerontest</msg>
<status starttime="20161110 22:05:48.577" status="PASS" endtime="20161110 22:05:48.577"></status>
</kw>
<status starttime="20161110 22:05:17.262" status="PASS" endtime="20161110 22:05:48.578"></status>
</kw>
<status starttime="20161110 22:05:17.256" status="PASS" endtime="20161110 22:05:48.578"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:48.578" html="yes">Directory '&lt;a href="file:///tmp/root/24880/obmc-robot/logs"&gt;/tmp/root/24880/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 22:05:48.578" status="PASS" endtime="20161110 22:05:48.579"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:48.579" html="yes">File '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/test_history.txt"&gt;/tmp/root/24880/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 22:05:48.579" status="PASS" endtime="20161110 22:05:48.579"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:48.579">${exist} = True</msg>
<status starttime="20161110 22:05:48.579" status="PASS" endtime="20161110 22:05:48.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 22:05:48.580" status="PASS" endtime="20161110 22:05:48.582"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:48.583">${cur_time} = 2016-11-10 22:05:48:583005</msg>
<status starttime="20161110 22:05:48.583" status="PASS" endtime="20161110 22:05:48.583"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:48.584">${cur_time} = 20161110220548583005</msg>
<status starttime="20161110 22:05:48.583" status="PASS" endtime="20161110 22:05:48.584"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:48.584">${cur_time} = 20161110220548583005</msg>
<status starttime="20161110 22:05:48.582" status="PASS" endtime="20161110 22:05:48.584"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:48.585" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/test_history.txt"&gt;/tmp/root/24880/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:48.584" status="PASS" endtime="20161110 22:05:48.585"></status>
</kw>
<status starttime="20161110 22:05:48.578" status="PASS" endtime="20161110 22:05:48.585"></status>
</kw>
<status starttime="20161110 22:05:17.255" status="PASS" endtime="20161110 22:05:48.585"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Login to BMC and Stop the obmc-console-client process.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:05:48.587">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 22:05:48.586" status="FAIL" endtime="20161110 22:05:48.587"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:48.587">${has_host} = False</msg>
<status starttime="20161110 22:05:48.586" status="PASS" endtime="20161110 22:05:48.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 22:05:48.590" status="PASS" endtime="20161110 22:05:48.591"></status>
</kw>
<status starttime="20161110 22:05:48.587" status="PASS" endtime="20161110 22:05:48.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:48.596">${port_num} = 22</msg>
<status starttime="20161110 22:05:48.596" status="PASS" endtime="20161110 22:05:48.596"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:48.597">${SSH_PORT} = 22</msg>
<status starttime="20161110 22:05:48.596" status="PASS" endtime="20161110 22:05:48.597"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:48.597">${https_num} = 443</msg>
<status starttime="20161110 22:05:48.597" status="PASS" endtime="20161110 22:05:48.597"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:48.598">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 22:05:48.598" status="PASS" endtime="20161110 22:05:48.598"></status>
</kw>
<status starttime="20161110 22:05:48.595" status="PASS" endtime="20161110 22:05:48.599"></status>
</kw>
<status starttime="20161110 22:05:48.591" status="PASS" endtime="20161110 22:05:48.599"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:05:48.600">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 22:05:48.600" status="FAIL" endtime="20161110 22:05:48.600"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:48.600">${has_port} = False</msg>
<status starttime="20161110 22:05:48.599" status="PASS" endtime="20161110 22:05:48.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 22:05:48.606" status="PASS" endtime="20161110 22:05:48.606"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 22:05:48.606" status="PASS" endtime="20161110 22:05:48.607"></status>
</kw>
<status starttime="20161110 22:05:48.605" status="PASS" endtime="20161110 22:05:48.607"></status>
</kw>
<status starttime="20161110 22:05:48.601" status="PASS" endtime="20161110 22:05:48.607"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:48.607">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 22:05:50.793">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 22:05:48.607" status="PASS" endtime="20161110 22:05:50.793"></status>
</kw>
<status starttime="20161110 22:05:48.585" status="PASS" endtime="20161110 22:05:50.794"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${file_path}-${LOG_TIME}_* | cut -d'_' -f 2</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${pid}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:50.795">Executing command 'ls /tmp/obmc-console.log-20161110214932329913_* | cut -d'_' -f 2'.</msg>
<msg level="INFO" timestamp="20161110 22:05:50.894">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 22:05:50.894">${pid} = 1035</msg>
<msg level="INFO" timestamp="20161110 22:05:50.894">${stderr} = </msg>
<status starttime="20161110 22:05:50.794" status="PASS" endtime="20161110 22:05:50.894"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:50.895">Length is 0</msg>
<status starttime="20161110 22:05:50.894" status="PASS" endtime="20161110 22:05:50.895"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps ax | grep ${pid} | grep -v grep</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:50.895">Executing command 'ps ax | grep 1035 | grep -v grep'.</msg>
<msg level="INFO" timestamp="20161110 22:05:51.132">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 22:05:51.132">${rc} = 0</msg>
<status starttime="20161110 22:05:50.895" status="PASS" endtime="20161110 22:05:51.132"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${rc}' == '${1}'</arg>
<arg>No obmc-console-client process running</arg>
</arguments>
<status starttime="20161110 22:05:51.133" status="PASS" endtime="20161110 22:05:51.135"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -s KILL ${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:51.136">Executing command 'kill -s KILL 1035'.</msg>
<msg level="INFO" timestamp="20161110 22:05:51.274">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 22:05:51.274">${console} = </msg>
<msg level="INFO" timestamp="20161110 22:05:51.274">${stderr} = </msg>
<status starttime="20161110 22:05:51.135" status="PASS" endtime="20161110 22:05:51.274"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:51.275">Length is 0</msg>
<status starttime="20161110 22:05:51.275" status="PASS" endtime="20161110 22:05:51.275"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Current Client PID:${pid}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:51.275">Current Client PID:1035</msg>
<status starttime="20161110 22:05:51.275" status="PASS" endtime="20161110 22:05:51.275"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${file_path}-${LOG_TIME}_${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:51.276">Executing command 'cat /tmp/obmc-console.log-20161110214932329913_1035'.</msg>
<msg level="INFO" timestamp="20161110 22:05:51.441">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 22:05:51.441">${console} = </msg>
<msg level="INFO" timestamp="20161110 22:05:51.441">${stderr} = </msg>
<status starttime="20161110 22:05:51.276" status="PASS" endtime="20161110 22:05:51.441"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:51.442">Length is 0</msg>
<status starttime="20161110 22:05:51.441" status="PASS" endtime="20161110 22:05:51.442"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:51.442">${sol_log} = </msg>
<status starttime="20161110 22:05:48.585" status="PASS" endtime="20161110 22:05:51.442"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:51.443"></msg>
<status starttime="20161110 22:05:51.443" status="PASS" endtime="20161110 22:05:51.443"></status>
</kw>
<status starttime="20161110 22:05:17.254" status="PASS" endtime="20161110 22:05:51.443"></status>
</kw>
<doc>Power OFF and power ON</doc>
<tags>
<tag>chassisboot</tag>
<tag>power_on_test</tag>
</tags>
<status starttime="20161110 21:49:29.662" critical="yes" status="FAIL" endtime="20161110 22:05:51.443">Keyword 'Is Host Booted' failed after retrying for 15 minutes. The last error was: 'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</status>
</test>
<doc>This module will test basic power on use cases for CI</doc>
<status starttime="20161110 21:49:29.638" status="FAIL" endtime="20161110 22:05:51.444"></status>
</suite>
<suite id="s1-s4" source="/tmp/root/24880/obmc-robot/tests/test_eventlog.robot" name="Test Eventlog">
<kw type="setup" name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:05:51.475">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 22:05:51.475" status="FAIL" endtime="20161110 22:05:51.475"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:51.475">${has_host} = False</msg>
<status starttime="20161110 22:05:51.474" status="PASS" endtime="20161110 22:05:51.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 22:05:51.480" status="PASS" endtime="20161110 22:05:51.481"></status>
</kw>
<status starttime="20161110 22:05:51.476" status="PASS" endtime="20161110 22:05:51.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:51.484">${port_num} = 22</msg>
<status starttime="20161110 22:05:51.484" status="PASS" endtime="20161110 22:05:51.485"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:51.485">${SSH_PORT} = 22</msg>
<status starttime="20161110 22:05:51.485" status="PASS" endtime="20161110 22:05:51.485"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:51.485">${https_num} = 443</msg>
<status starttime="20161110 22:05:51.485" status="PASS" endtime="20161110 22:05:51.485"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:51.486">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 22:05:51.486" status="PASS" endtime="20161110 22:05:51.486"></status>
</kw>
<status starttime="20161110 22:05:51.484" status="PASS" endtime="20161110 22:05:51.486"></status>
</kw>
<status starttime="20161110 22:05:51.481" status="PASS" endtime="20161110 22:05:51.486"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 22:05:51.487">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 22:05:51.487" status="FAIL" endtime="20161110 22:05:51.487"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:51.487">${has_port} = False</msg>
<status starttime="20161110 22:05:51.487" status="PASS" endtime="20161110 22:05:51.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 22:05:51.491" status="PASS" endtime="20161110 22:05:51.491"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 22:05:51.491" status="PASS" endtime="20161110 22:05:51.492"></status>
</kw>
<status starttime="20161110 22:05:51.490" status="PASS" endtime="20161110 22:05:51.492"></status>
</kw>
<status starttime="20161110 22:05:51.488" status="PASS" endtime="20161110 22:05:51.492"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:51.492">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 22:05:53.814">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 22:05:51.492" status="PASS" endtime="20161110 22:05:53.814"></status>
</kw>
<status starttime="20161110 22:05:51.473" status="PASS" endtime="20161110 22:05:53.815"></status>
</kw>
<test id="s1-s4-t1" name="clear any logs">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:53.817">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161110 22:05:53.817" status="PASS" endtime="20161110 22:05:53.817"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:53.818">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:05:53.818" status="PASS" endtime="20161110 22:05:53.818"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:05:53.819" status="PASS" endtime="20161110 22:05:53.819"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:53.822">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:05:53.820" status="PASS" endtime="20161110 22:05:53.822"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:53.823">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:05:53.823" status="PASS" endtime="20161110 22:05:53.823"></status>
</kw>
<status starttime="20161110 22:05:53.822" status="PASS" endtime="20161110 22:05:53.823"></status>
</kw>
<status starttime="20161110 22:05:53.819" status="PASS" endtime="20161110 22:05:53.824"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:53.824">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:05:53.824" status="PASS" endtime="20161110 22:05:53.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:53.825">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:05:53.825" status="PASS" endtime="20161110 22:05:53.825"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:53.826">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:05:53.826" status="PASS" endtime="20161110 22:05:53.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:53.827">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:05:53.826" status="PASS" endtime="20161110 22:05:53.827"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:54.165">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:05:54.165">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:53.827" status="PASS" endtime="20161110 22:05:54.166"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:54.166">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:54.166" status="PASS" endtime="20161110 22:05:54.167"></status>
</kw>
<status starttime="20161110 22:05:53.824" status="PASS" endtime="20161110 22:05:54.167"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:54.448">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:05:54.449">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:54.167" status="PASS" endtime="20161110 22:05:54.449"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:54.450">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:05:54.450" status="PASS" endtime="20161110 22:05:54.451"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:54.452">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:05:54.452" status="PASS" endtime="20161110 22:05:54.452"></status>
</kw>
<status starttime="20161110 22:05:54.451" status="PASS" endtime="20161110 22:05:54.452"></status>
</kw>
<status starttime="20161110 22:05:54.449" status="PASS" endtime="20161110 22:05:54.453"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:54.453">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:53.816" status="PASS" endtime="20161110 22:05:54.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:54.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:54.453" status="PASS" endtime="20161110 22:05:54.454"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:54.456">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161110 22:05:54.455" status="PASS" endtime="20161110 22:05:54.456"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:54.458">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 22:05:54.457" status="PASS" endtime="20161110 22:05:54.458"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:54.459">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 22:05:54.459" status="PASS" endtime="20161110 22:05:54.459"></status>
</kw>
<status starttime="20161110 22:05:54.458" status="PASS" endtime="20161110 22:05:54.460"></status>
</kw>
<status starttime="20161110 22:05:54.456" status="PASS" endtime="20161110 22:05:54.460"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:54.461">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:05:54.461" status="PASS" endtime="20161110 22:05:54.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:54.462">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:05:54.462" status="PASS" endtime="20161110 22:05:54.462"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:54.463">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:05:54.462" status="PASS" endtime="20161110 22:05:54.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:54.463">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:05:54.463" status="PASS" endtime="20161110 22:05:54.463"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:54.992">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:05:54.992">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:54.464" status="PASS" endtime="20161110 22:05:54.992"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:54.993">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:54.993" status="PASS" endtime="20161110 22:05:54.993"></status>
</kw>
<status starttime="20161110 22:05:54.460" status="PASS" endtime="20161110 22:05:54.994"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:55.053">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161110 22:05:55.053">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:54.994" status="PASS" endtime="20161110 22:05:55.053"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:55.055">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:05:55.054" status="PASS" endtime="20161110 22:05:55.055"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:55.056">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:05:55.056" status="PASS" endtime="20161110 22:05:55.057"></status>
</kw>
<status starttime="20161110 22:05:55.055" status="PASS" endtime="20161110 22:05:55.057"></status>
</kw>
<status starttime="20161110 22:05:55.053" status="PASS" endtime="20161110 22:05:55.057"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:55.057">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:54.454" status="PASS" endtime="20161110 22:05:55.057"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:55.058">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:05:55.058">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:05:55.058">${json} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:05:55.058" status="PASS" endtime="20161110 22:05:55.058"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:55.059">Length is 0</msg>
<status starttime="20161110 22:05:55.059" status="PASS" endtime="20161110 22:05:55.059"></status>
</kw>
<kw type="teardown" name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 22:05:55.060" status="PASS" endtime="20161110 22:05:55.065"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:55.075" html="yes">Directory '&lt;a href="file:///tmp/root/24880/obmc-robot/logs"&gt;/tmp/root/24880/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 22:05:55.071" status="PASS" endtime="20161110 22:05:55.075"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:55.075" html="yes">File '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/test_history.txt"&gt;/tmp/root/24880/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 22:05:55.075" status="PASS" endtime="20161110 22:05:55.076"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:55.076">${exist} = True</msg>
<status starttime="20161110 22:05:55.075" status="PASS" endtime="20161110 22:05:55.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 22:05:55.076" status="PASS" endtime="20161110 22:05:55.078"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:55.079">${cur_time} = 2016-11-10 22:05:55:079138</msg>
<status starttime="20161110 22:05:55.079" status="PASS" endtime="20161110 22:05:55.079"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:55.080">${cur_time} = 20161110220555079138</msg>
<status starttime="20161110 22:05:55.080" status="PASS" endtime="20161110 22:05:55.080"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:55.080">${cur_time} = 20161110220555079138</msg>
<status starttime="20161110 22:05:55.079" status="PASS" endtime="20161110 22:05:55.080"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:55.081" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/test_history.txt"&gt;/tmp/root/24880/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:55.080" status="PASS" endtime="20161110 22:05:55.081"></status>
</kw>
<status starttime="20161110 22:05:55.065" status="PASS" endtime="20161110 22:05:55.081"></status>
</kw>
<status starttime="20161110 22:05:55.060" status="PASS" endtime="20161110 22:05:55.081"></status>
</kw>
<doc>Test delete all events</doc>
<tags>
<tag>CI</tag>
<tag>clear_any_logs</tag>
</tags>
<status starttime="20161110 22:05:53.815" critical="yes" status="PASS" endtime="20161110 22:05:55.081"></status>
</test>
<test id="s1-s4-t2" name="write a log">
<kw name="create a test log">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:55.083">${data} = {u'data': []}</msg>
<status starttime="20161110 22:05:55.082" status="PASS" endtime="20161110 22:05:55.083"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:55.084">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161110 22:05:55.083" status="PASS" endtime="20161110 22:05:55.084"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:55.084">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:05:55.084" status="PASS" endtime="20161110 22:05:55.084"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 22:05:55.084" status="PASS" endtime="20161110 22:05:55.085"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:55.086">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:05:55.085" status="PASS" endtime="20161110 22:05:55.086"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:55.087">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 22:05:55.087" status="PASS" endtime="20161110 22:05:55.087"></status>
</kw>
<status starttime="20161110 22:05:55.086" status="PASS" endtime="20161110 22:05:55.087"></status>
</kw>
<status starttime="20161110 22:05:55.085" status="PASS" endtime="20161110 22:05:55.087"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:55.088">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:05:55.088" status="PASS" endtime="20161110 22:05:55.088"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:55.089">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:05:55.089" status="PASS" endtime="20161110 22:05:55.089"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:55.089">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:05:55.089" status="PASS" endtime="20161110 22:05:55.089"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:55.090">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:05:55.090" status="PASS" endtime="20161110 22:05:55.090"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:55.830">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:05:55.830">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:55.090" status="PASS" endtime="20161110 22:05:55.830"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:55.831">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:55.830" status="PASS" endtime="20161110 22:05:55.831"></status>
</kw>
<status starttime="20161110 22:05:55.087" status="PASS" endtime="20161110 22:05:55.832"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:56.395">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:05:56.395">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:55.832" status="PASS" endtime="20161110 22:05:56.395"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:56.397">${msg} = Response code:200, Content:{
  "data": 284, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:05:56.396" status="PASS" endtime="20161110 22:05:56.397"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:56.399">Response code:200, Content:{
  "data": 284, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:05:56.399" status="PASS" endtime="20161110 22:05:56.400"></status>
</kw>
<status starttime="20161110 22:05:56.397" status="PASS" endtime="20161110 22:05:56.400"></status>
</kw>
<status starttime="20161110 22:05:56.395" status="PASS" endtime="20161110 22:05:56.400"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:56.400">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:55.083" status="PASS" endtime="20161110 22:05:56.400"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:56.401">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:56.401" status="PASS" endtime="20161110 22:05:56.401"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:56.402">To JSON using : content={
  "data": 284, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:05:56.402">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:05:56.402">${json} = {u'data': 284, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:05:56.402" status="PASS" endtime="20161110 22:05:56.402"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:56.403">${LOGID} = 284</msg>
<status starttime="20161110 22:05:56.403" status="PASS" endtime="20161110 22:05:56.403"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:56.404">${uri} = /org/openbmc/records/events/284</msg>
<status starttime="20161110 22:05:56.403" status="PASS" endtime="20161110 22:05:56.404"></status>
</kw>
<status starttime="20161110 22:05:55.082" status="PASS" endtime="20161110 22:05:56.404"></status>
</kw>
<kw type="teardown" name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 22:05:56.405" status="PASS" endtime="20161110 22:05:56.408"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:56.410" html="yes">Directory '&lt;a href="file:///tmp/root/24880/obmc-robot/logs"&gt;/tmp/root/24880/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 22:05:56.409" status="PASS" endtime="20161110 22:05:56.410"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:56.411" html="yes">File '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/test_history.txt"&gt;/tmp/root/24880/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 22:05:56.411" status="PASS" endtime="20161110 22:05:56.411"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:56.411">${exist} = True</msg>
<status starttime="20161110 22:05:56.410" status="PASS" endtime="20161110 22:05:56.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 22:05:56.412" status="PASS" endtime="20161110 22:05:56.414"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:56.415">${cur_time} = 2016-11-10 22:05:56:414753</msg>
<status starttime="20161110 22:05:56.415" status="PASS" endtime="20161110 22:05:56.415"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:56.415">${cur_time} = 20161110220556414753</msg>
<status starttime="20161110 22:05:56.415" status="PASS" endtime="20161110 22:05:56.415"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:56.416">${cur_time} = 20161110220556414753</msg>
<status starttime="20161110 22:05:56.414" status="PASS" endtime="20161110 22:05:56.416"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:56.416" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/test_history.txt"&gt;/tmp/root/24880/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:56.416" status="PASS" endtime="20161110 22:05:56.417"></status>
</kw>
<status starttime="20161110 22:05:56.409" status="PASS" endtime="20161110 22:05:56.417"></status>
</kw>
<status starttime="20161110 22:05:56.404" status="PASS" endtime="20161110 22:05:56.417"></status>
</kw>
<doc>Test create event</doc>
<tags>
<tag>CI</tag>
<tag>write_a_log</tag>
</tags>
<status starttime="20161110 22:05:55.082" critical="yes" status="PASS" endtime="20161110 22:05:56.417"></status>
</test>
<kw type="teardown" name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status starttime="20161110 22:05:56.418" status="PASS" endtime="20161110 22:05:56.796"></status>
</kw>
<doc>This suite is used for testing the error logging
capability from the host</doc>
<status starttime="20161110 22:05:51.447" status="PASS" endtime="20161110 22:05:56.796"></status>
</suite>
<suite id="s1-s5" source="/tmp/root/24880/obmc-robot/tests/test_obmcrest.robot" name="Test Obmcrest">
<test id="s1-s5-t1" name="Good connection for testing">
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:56.818">${base_uri} = /</msg>
<status starttime="20161110 22:05:56.818" status="PASS" endtime="20161110 22:05:56.818"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:56.820">${msg} = URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status starttime="20161110 22:05:56.819" status="PASS" endtime="20161110 22:05:56.820"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:56.821">URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status starttime="20161110 22:05:56.820" status="PASS" endtime="20161110 22:05:56.821"></status>
</kw>
<status starttime="20161110 22:05:56.820" status="PASS" endtime="20161110 22:05:56.821"></status>
</kw>
<status starttime="20161110 22:05:56.819" status="PASS" endtime="20161110 22:05:56.821"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:56.822">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:05:56.821" status="PASS" endtime="20161110 22:05:56.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:56.823">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:05:56.822" status="PASS" endtime="20161110 22:05:56.823"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:56.823">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:05:56.823" status="PASS" endtime="20161110 22:05:56.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:56.824">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:05:56.824" status="PASS" endtime="20161110 22:05:56.824"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:57.750">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:05:57.751">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:56.824" status="PASS" endtime="20161110 22:05:57.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:57.752">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:57.751" status="PASS" endtime="20161110 22:05:57.752"></status>
</kw>
<status starttime="20161110 22:05:56.821" status="PASS" endtime="20161110 22:05:57.752"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:57.985">Get Request using : alias=openbmc, uri=/, headers=None </msg>
<msg level="INFO" timestamp="20161110 22:05:57.986">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:57.752" status="PASS" endtime="20161110 22:05:57.986"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:57.988">${msg} = Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:05:57.987" status="PASS" endtime="20161110 22:05:57.988"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:57.989">Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:05:57.989" status="PASS" endtime="20161110 22:05:57.989"></status>
</kw>
<status starttime="20161110 22:05:57.988" status="PASS" endtime="20161110 22:05:57.990"></status>
</kw>
<status starttime="20161110 22:05:57.986" status="PASS" endtime="20161110 22:05:57.990"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:57.990">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:56.818" status="PASS" endtime="20161110 22:05:57.990"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:57.991">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:57.990" status="PASS" endtime="20161110 22:05:57.991"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:57.992">To JSON using : content={
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:05:57.992">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:05:57.992">${content} = {u'data': [u'/org'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:05:57.992" status="PASS" endtime="20161110 22:05:57.992"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:57.992">${content} = [u'/org']</msg>
<status starttime="20161110 22:05:56.817" status="PASS" endtime="20161110 22:05:57.992"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${content}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${c}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:57.993">${c} = /org</msg>
<status starttime="20161110 22:05:57.993" status="PASS" endtime="20161110 22:05:57.993"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${c}</arg>
<arg>/org</arg>
</arguments>
<status starttime="20161110 22:05:57.993" status="PASS" endtime="20161110 22:05:57.993"></status>
</kw>
<kw type="teardown" name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 22:05:57.994" status="PASS" endtime="20161110 22:05:57.997"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:57.998" html="yes">Directory '&lt;a href="file:///tmp/root/24880/obmc-robot/logs"&gt;/tmp/root/24880/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 22:05:57.998" status="PASS" endtime="20161110 22:05:57.998"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:57.999" html="yes">File '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/test_history.txt"&gt;/tmp/root/24880/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 22:05:57.999" status="PASS" endtime="20161110 22:05:57.999"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:57.999">${exist} = True</msg>
<status starttime="20161110 22:05:57.998" status="PASS" endtime="20161110 22:05:57.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 22:05:57.999" status="PASS" endtime="20161110 22:05:58.004"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:58.005">${cur_time} = 2016-11-10 22:05:58:004486</msg>
<status starttime="20161110 22:05:58.004" status="PASS" endtime="20161110 22:05:58.005"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:58.005">${cur_time} = 20161110220558004486</msg>
<status starttime="20161110 22:05:58.005" status="PASS" endtime="20161110 22:05:58.005"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:58.005">${cur_time} = 20161110220558004486</msg>
<status starttime="20161110 22:05:58.004" status="PASS" endtime="20161110 22:05:58.005"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:58.006" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/test_history.txt"&gt;/tmp/root/24880/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:58.006" status="PASS" endtime="20161110 22:05:58.006"></status>
</kw>
<status starttime="20161110 22:05:57.997" status="PASS" endtime="20161110 22:05:58.006"></status>
</kw>
<status starttime="20161110 22:05:57.994" status="PASS" endtime="20161110 22:05:58.006"></status>
</kw>
<tags>
<tag>CI</tag>
<tag>Good_connection_for_testing</tag>
</tags>
<status starttime="20161110 22:05:56.817" critical="yes" status="PASS" endtime="20161110 22:05:58.006"></status>
</test>
<test id="s1-s5-t2" name="get directory listing /">
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:58.008">${base_uri} = /</msg>
<status starttime="20161110 22:05:58.008" status="PASS" endtime="20161110 22:05:58.008"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:58.009">${msg} = URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status starttime="20161110 22:05:58.009" status="PASS" endtime="20161110 22:05:58.009"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:58.010">URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status starttime="20161110 22:05:58.010" status="PASS" endtime="20161110 22:05:58.011"></status>
</kw>
<status starttime="20161110 22:05:58.010" status="PASS" endtime="20161110 22:05:58.011"></status>
</kw>
<status starttime="20161110 22:05:58.008" status="PASS" endtime="20161110 22:05:58.011"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:58.012">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 22:05:58.011" status="PASS" endtime="20161110 22:05:58.012"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:58.012">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 22:05:58.012" status="PASS" endtime="20161110 22:05:58.012"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:58.013">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 22:05:58.013" status="PASS" endtime="20161110 22:05:58.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:58.014">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 22:05:58.013" status="PASS" endtime="20161110 22:05:58.014"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:58.626">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 22:05:58.626">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:58.014" status="PASS" endtime="20161110 22:05:58.627"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:58.627">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:58.627" status="PASS" endtime="20161110 22:05:58.627"></status>
</kw>
<status starttime="20161110 22:05:58.011" status="PASS" endtime="20161110 22:05:58.627"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:58.686">Get Request using : alias=openbmc, uri=/, headers=None </msg>
<msg level="INFO" timestamp="20161110 22:05:58.686">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:58.628" status="PASS" endtime="20161110 22:05:58.686"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:58.687">${msg} = Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:05:58.687" status="PASS" endtime="20161110 22:05:58.688"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:58.688">Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 22:05:58.688" status="PASS" endtime="20161110 22:05:58.688"></status>
</kw>
<status starttime="20161110 22:05:58.688" status="PASS" endtime="20161110 22:05:58.688"></status>
</kw>
<status starttime="20161110 22:05:58.686" status="PASS" endtime="20161110 22:05:58.689"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:58.689">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 22:05:58.007" status="PASS" endtime="20161110 22:05:58.689"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:58.689">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 22:05:58.689" status="PASS" endtime="20161110 22:05:58.689"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:58.690">To JSON using : content={
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 22:05:58.690">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 22:05:58.690">${json} = {u'data': [u'/org'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 22:05:58.690" status="PASS" endtime="20161110 22:05:58.690"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${json['data']}</arg>
<arg>/org</arg>
</arguments>
<status starttime="20161110 22:05:58.690" status="PASS" endtime="20161110 22:05:58.690"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json['status']}</arg>
<arg>ok</arg>
</arguments>
<status starttime="20161110 22:05:58.691" status="PASS" endtime="20161110 22:05:58.691"></status>
</kw>
<kw type="teardown" name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 22:05:58.692" status="PASS" endtime="20161110 22:05:58.695"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:58.696" html="yes">Directory '&lt;a href="file:///tmp/root/24880/obmc-robot/logs"&gt;/tmp/root/24880/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 22:05:58.695" status="PASS" endtime="20161110 22:05:58.696"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:58.697" html="yes">File '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/test_history.txt"&gt;/tmp/root/24880/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 22:05:58.697" status="PASS" endtime="20161110 22:05:58.697"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:58.697">${exist} = True</msg>
<status starttime="20161110 22:05:58.696" status="PASS" endtime="20161110 22:05:58.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 22:05:58.697" status="PASS" endtime="20161110 22:05:58.700"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:58.701">${cur_time} = 2016-11-10 22:05:58:700402</msg>
<status starttime="20161110 22:05:58.700" status="PASS" endtime="20161110 22:05:58.701"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 22:05:58.701">${cur_time} = 20161110220558700402</msg>
<status starttime="20161110 22:05:58.701" status="PASS" endtime="20161110 22:05:58.701"></status>
</kw>
<msg level="INFO" timestamp="20161110 22:05:58.701">${cur_time} = 20161110220558700402</msg>
<status starttime="20161110 22:05:58.700" status="PASS" endtime="20161110 22:05:58.701"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 22:05:58.702" html="yes">Appended to file '&lt;a href="file:///tmp/root/24880/obmc-robot/logs/test_history.txt"&gt;/tmp/root/24880/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 22:05:58.702" status="PASS" endtime="20161110 22:05:58.702"></status>
</kw>
<status starttime="20161110 22:05:58.695" status="PASS" endtime="20161110 22:05:58.702"></status>
</kw>
<status starttime="20161110 22:05:58.691" status="PASS" endtime="20161110 22:05:58.702"></status>
</kw>
<tags>
<tag>CI</tag>
<tag>get_directory_listing</tag>
</tags>
<status starttime="20161110 22:05:58.007" critical="yes" status="PASS" endtime="20161110 22:05:58.702"></status>
</test>
<doc>This suite will verifiy all OpenBMC rest interfaces
Details of valid interfaces can be found here...
https://github.com/openbmc/docs/blob/master/rest-api.md</doc>
<status starttime="20161110 22:05:56.798" status="PASS" endtime="20161110 22:05:58.703"></status>
</suite>
<status starttime="20161110 21:49:14.856" status="FAIL" endtime="20161110 22:05:58.706"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="1">Critical Tests</stat>
<stat pass="7" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="4" fail="0">CI</stat>
<stat pass="1" fail="0">clear_any_logs</stat>
<stat pass="1" fail="0">Create_error_log_on_single_FRU</stat>
<stat pass="1" fail="0">Delete_error_log</stat>
<stat pass="1" fail="0">get_directory_listing</stat>
<stat pass="1" fail="0">Good_connection_for_testing</stat>
<stat pass="0" fail="1">power_on_test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
<stat pass="1" fail="0">write_a_log</stat>
</tag>
<suite>
<stat id="s1" pass="7" fail="1" name="Tests">Tests</stat>
<stat id="s1-s1" pass="1" fail="0" name="Security">Tests.Security</stat>
<stat id="s1-s1-s1" pass="1" fail="0" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" pass="2" fail="0" name="Test Association">Tests.Test Association</stat>
<stat id="s1-s3" pass="0" fail="1" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
<stat id="s1-s4" pass="2" fail="0" name="Test Eventlog">Tests.Test Eventlog</stat>
<stat id="s1-s5" pass="2" fail="0" name="Test Obmcrest">Tests.Test Obmcrest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
